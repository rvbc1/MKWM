
MKWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004668  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000ec  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000140  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000078  20000000  08004b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000022c  20000078  08004c08  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002a4  08004c08  000202a4  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013cd1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b76  00000000  00000000  00033d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000606d  00000000  00000000  000368e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0003c958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0003d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000053fd  00000000  00000000  0003de58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000397f  00000000  00000000  00043255  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00046bd4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a8c  00000000  00000000  00046c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  000496dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00049718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004760 	.word	0x08004760

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004760 	.word	0x08004760

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2uiz>:
 80008f8:	004a      	lsls	r2, r1, #1
 80008fa:	d211      	bcs.n	8000920 <__aeabi_d2uiz+0x28>
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000900:	d211      	bcs.n	8000926 <__aeabi_d2uiz+0x2e>
 8000902:	d50d      	bpl.n	8000920 <__aeabi_d2uiz+0x28>
 8000904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d40e      	bmi.n	800092c <__aeabi_d2uiz+0x34>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	4770      	bx	lr
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	4770      	bx	lr
 8000926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092a:	d102      	bne.n	8000932 <__aeabi_d2uiz+0x3a>
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000930:	4770      	bx	lr
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	4770      	bx	lr

08000938 <selfrel_offset31>:
 8000938:	6803      	ldr	r3, [r0, #0]
 800093a:	005a      	lsls	r2, r3, #1
 800093c:	bf4c      	ite	mi
 800093e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000942:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000946:	4418      	add	r0, r3
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <search_EIT_table>:
 800094c:	b361      	cbz	r1, 80009a8 <search_EIT_table+0x5c>
 800094e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000952:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000956:	4690      	mov	r8, r2
 8000958:	4606      	mov	r6, r0
 800095a:	46d1      	mov	r9, sl
 800095c:	2700      	movs	r7, #0
 800095e:	eb07 0409 	add.w	r4, r7, r9
 8000962:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000966:	1064      	asrs	r4, r4, #1
 8000968:	00e5      	lsls	r5, r4, #3
 800096a:	1971      	adds	r1, r6, r5
 800096c:	4608      	mov	r0, r1
 800096e:	f7ff ffe3 	bl	8000938 <selfrel_offset31>
 8000972:	45a2      	cmp	sl, r4
 8000974:	4683      	mov	fp, r0
 8000976:	f105 0008 	add.w	r0, r5, #8
 800097a:	4430      	add	r0, r6
 800097c:	d009      	beq.n	8000992 <search_EIT_table+0x46>
 800097e:	f7ff ffdb 	bl	8000938 <selfrel_offset31>
 8000982:	45c3      	cmp	fp, r8
 8000984:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000988:	d805      	bhi.n	8000996 <search_EIT_table+0x4a>
 800098a:	4540      	cmp	r0, r8
 800098c:	d209      	bcs.n	80009a2 <search_EIT_table+0x56>
 800098e:	1c67      	adds	r7, r4, #1
 8000990:	e7e5      	b.n	800095e <search_EIT_table+0x12>
 8000992:	45c3      	cmp	fp, r8
 8000994:	d905      	bls.n	80009a2 <search_EIT_table+0x56>
 8000996:	42a7      	cmp	r7, r4
 8000998:	d002      	beq.n	80009a0 <search_EIT_table+0x54>
 800099a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800099e:	e7de      	b.n	800095e <search_EIT_table+0x12>
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a8:	4608      	mov	r0, r1
 80009aa:	4770      	bx	lr

080009ac <__gnu_unwind_get_pr_addr>:
 80009ac:	2801      	cmp	r0, #1
 80009ae:	d007      	beq.n	80009c0 <__gnu_unwind_get_pr_addr+0x14>
 80009b0:	2802      	cmp	r0, #2
 80009b2:	d007      	beq.n	80009c4 <__gnu_unwind_get_pr_addr+0x18>
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf0c      	ite	eq
 80009ba:	4618      	moveq	r0, r3
 80009bc:	2000      	movne	r0, #0
 80009be:	4770      	bx	lr
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <__gnu_unwind_get_pr_addr+0x20>)
 80009c2:	4770      	bx	lr
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <__gnu_unwind_get_pr_addr+0x24>)
 80009c6:	4770      	bx	lr
 80009c8:	080010bd 	.word	0x080010bd
 80009cc:	080010c1 	.word	0x080010c1
 80009d0:	080010c5 	.word	0x080010c5

080009d4 <get_eit_entry>:
 80009d4:	b530      	push	{r4, r5, lr}
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <get_eit_entry+0x98>)
 80009d8:	b083      	sub	sp, #12
 80009da:	4604      	mov	r4, r0
 80009dc:	1e8d      	subs	r5, r1, #2
 80009de:	b373      	cbz	r3, 8000a3e <get_eit_entry+0x6a>
 80009e0:	a901      	add	r1, sp, #4
 80009e2:	4628      	mov	r0, r5
 80009e4:	f3af 8000 	nop.w
 80009e8:	b318      	cbz	r0, 8000a32 <get_eit_entry+0x5e>
 80009ea:	9901      	ldr	r1, [sp, #4]
 80009ec:	462a      	mov	r2, r5
 80009ee:	f7ff ffad 	bl	800094c <search_EIT_table>
 80009f2:	4601      	mov	r1, r0
 80009f4:	b1e8      	cbz	r0, 8000a32 <get_eit_entry+0x5e>
 80009f6:	f7ff ff9f 	bl	8000938 <selfrel_offset31>
 80009fa:	684b      	ldr	r3, [r1, #4]
 80009fc:	64a0      	str	r0, [r4, #72]	; 0x48
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d011      	beq.n	8000a26 <get_eit_entry+0x52>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db22      	blt.n	8000a4c <get_eit_entry+0x78>
 8000a06:	1d08      	adds	r0, r1, #4
 8000a08:	f7ff ff96 	bl	8000938 <selfrel_offset31>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000a10:	6523      	str	r3, [r4, #80]	; 0x50
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db1e      	blt.n	8000a56 <get_eit_entry+0x82>
 8000a18:	f7ff ff8e 	bl	8000938 <selfrel_offset31>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6120      	str	r0, [r4, #16]
 8000a20:	4618      	mov	r0, r3
 8000a22:	b003      	add	sp, #12
 8000a24:	bd30      	pop	{r4, r5, pc}
 8000a26:	2305      	movs	r3, #5
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	6122      	str	r2, [r4, #16]
 8000a2e:	b003      	add	sp, #12
 8000a30:	bd30      	pop	{r4, r5, pc}
 8000a32:	2309      	movs	r3, #9
 8000a34:	2200      	movs	r2, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	6122      	str	r2, [r4, #16]
 8000a3a:	b003      	add	sp, #12
 8000a3c:	bd30      	pop	{r4, r5, pc}
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <get_eit_entry+0x9c>)
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <get_eit_entry+0xa0>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	1ac9      	subs	r1, r1, r3
 8000a46:	10c9      	asrs	r1, r1, #3
 8000a48:	9101      	str	r1, [sp, #4]
 8000a4a:	e7cf      	b.n	80009ec <get_eit_entry+0x18>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	1d08      	adds	r0, r1, #4
 8000a50:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000a52:	6523      	str	r3, [r4, #80]	; 0x50
 8000a54:	e7dd      	b.n	8000a12 <get_eit_entry+0x3e>
 8000a56:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000a5a:	f7ff ffa7 	bl	80009ac <__gnu_unwind_get_pr_addr>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	6120      	str	r0, [r4, #16]
 8000a62:	bf14      	ite	ne
 8000a64:	2300      	movne	r3, #0
 8000a66:	2309      	moveq	r3, #9
 8000a68:	e7da      	b.n	8000a20 <get_eit_entry+0x4c>
 8000a6a:	bf00      	nop
 8000a6c:	00000000 	.word	0x00000000
 8000a70:	08004a48 	.word	0x08004a48
 8000a74:	08004b88 	.word	0x08004b88

08000a78 <restore_non_core_regs>:
 8000a78:	6803      	ldr	r3, [r0, #0]
 8000a7a:	b510      	push	{r4, lr}
 8000a7c:	07da      	lsls	r2, r3, #31
 8000a7e:	4604      	mov	r4, r0
 8000a80:	d406      	bmi.n	8000a90 <restore_non_core_regs+0x18>
 8000a82:	079b      	lsls	r3, r3, #30
 8000a84:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000a88:	d509      	bpl.n	8000a9e <restore_non_core_regs+0x26>
 8000a8a:	f000 fc57 	bl	800133c <__gnu_Unwind_Restore_VFP_D>
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	0759      	lsls	r1, r3, #29
 8000a92:	d509      	bpl.n	8000aa8 <restore_non_core_regs+0x30>
 8000a94:	071a      	lsls	r2, r3, #28
 8000a96:	d50e      	bpl.n	8000ab6 <restore_non_core_regs+0x3e>
 8000a98:	06db      	lsls	r3, r3, #27
 8000a9a:	d513      	bpl.n	8000ac4 <restore_non_core_regs+0x4c>
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	f000 fc45 	bl	800132c <__gnu_Unwind_Restore_VFP>
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	0759      	lsls	r1, r3, #29
 8000aa6:	d4f5      	bmi.n	8000a94 <restore_non_core_regs+0x1c>
 8000aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000aac:	f000 fc4e 	bl	800134c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	071a      	lsls	r2, r3, #28
 8000ab4:	d4f0      	bmi.n	8000a98 <restore_non_core_regs+0x20>
 8000ab6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000aba:	f000 fc4f 	bl	800135c <__gnu_Unwind_Restore_WMMXD>
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	06db      	lsls	r3, r3, #27
 8000ac2:	d4eb      	bmi.n	8000a9c <restore_non_core_regs+0x24>
 8000ac4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000acc:	f000 bc8a 	b.w	80013e4 <__gnu_Unwind_Restore_WMMXC>

08000ad0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000ad0:	6803      	ldr	r3, [r0, #0]
 8000ad2:	b103      	cbz	r3, 8000ad6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000ad4:	4403      	add	r3, r0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__gnu_unwind_24bit.isra.1>:
 8000adc:	2009      	movs	r0, #9
 8000ade:	4770      	bx	lr

08000ae0 <_Unwind_DebugHook>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <unwind_phase2>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460d      	mov	r5, r1
 8000aea:	e008      	b.n	8000afe <unwind_phase2+0x1a>
 8000aec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000aee:	6923      	ldr	r3, [r4, #16]
 8000af0:	6162      	str	r2, [r4, #20]
 8000af2:	4621      	mov	r1, r4
 8000af4:	462a      	mov	r2, r5
 8000af6:	2001      	movs	r0, #1
 8000af8:	4798      	blx	r3
 8000afa:	2808      	cmp	r0, #8
 8000afc:	d108      	bne.n	8000b10 <unwind_phase2+0x2c>
 8000afe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff ff67 	bl	80009d4 <get_eit_entry>
 8000b06:	4606      	mov	r6, r0
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d0ef      	beq.n	8000aec <unwind_phase2+0x8>
 8000b0c:	f003 fcc0 	bl	8004490 <abort>
 8000b10:	2807      	cmp	r0, #7
 8000b12:	d1fb      	bne.n	8000b0c <unwind_phase2+0x28>
 8000b14:	4630      	mov	r0, r6
 8000b16:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b18:	f7ff ffe2 	bl	8000ae0 <_Unwind_DebugHook>
 8000b1c:	1d28      	adds	r0, r5, #4
 8000b1e:	f000 fbf9 	bl	8001314 <__restore_core_regs>
 8000b22:	bf00      	nop

08000b24 <unwind_phase2_forced>:
 8000b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b28:	4605      	mov	r5, r0
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000b30:	ac03      	add	r4, sp, #12
 8000b32:	1d0e      	adds	r6, r1, #4
 8000b34:	4692      	mov	sl, r2
 8000b36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b46:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000b4a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b52:	ac02      	add	r4, sp, #8
 8000b54:	4628      	mov	r0, r5
 8000b56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000b58:	6027      	str	r7, [r4, #0]
 8000b5a:	f7ff ff3b 	bl	80009d4 <get_eit_entry>
 8000b5e:	f1ba 0f00 	cmp.w	sl, #0
 8000b62:	4607      	mov	r7, r0
 8000b64:	bf14      	ite	ne
 8000b66:	260a      	movne	r6, #10
 8000b68:	2609      	moveq	r6, #9
 8000b6a:	b17f      	cbz	r7, 8000b8c <unwind_phase2_forced+0x68>
 8000b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b6e:	f046 0110 	orr.w	r1, r6, #16
 8000b72:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000b76:	462a      	mov	r2, r5
 8000b78:	6463      	str	r3, [r4, #68]	; 0x44
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	462b      	mov	r3, r5
 8000b7e:	47c0      	blx	r8
 8000b80:	bb78      	cbnz	r0, 8000be2 <unwind_phase2_forced+0xbe>
 8000b82:	4638      	mov	r0, r7
 8000b84:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b92:	616b      	str	r3, [r5, #20]
 8000b94:	4621      	mov	r1, r4
 8000b96:	a87a      	add	r0, sp, #488	; 0x1e8
 8000b98:	f003 fdb6 	bl	8004708 <memcpy>
 8000b9c:	692b      	ldr	r3, [r5, #16]
 8000b9e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	4798      	blx	r3
 8000ba6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000ba8:	4682      	mov	sl, r0
 8000baa:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000bae:	4631      	mov	r1, r6
 8000bb0:	6463      	str	r3, [r4, #68]	; 0x44
 8000bb2:	462a      	mov	r2, r5
 8000bb4:	462b      	mov	r3, r5
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	47c0      	blx	r8
 8000bba:	b990      	cbnz	r0, 8000be2 <unwind_phase2_forced+0xbe>
 8000bbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bc0:	a97a      	add	r1, sp, #488	; 0x1e8
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f003 fda0 	bl	8004708 <memcpy>
 8000bc8:	f1ba 0f08 	cmp.w	sl, #8
 8000bcc:	d106      	bne.n	8000bdc <unwind_phase2_forced+0xb8>
 8000bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f7ff feff 	bl	80009d4 <get_eit_entry>
 8000bd6:	2609      	movs	r6, #9
 8000bd8:	4607      	mov	r7, r0
 8000bda:	e7c6      	b.n	8000b6a <unwind_phase2_forced+0x46>
 8000bdc:	f1ba 0f07 	cmp.w	sl, #7
 8000be0:	d005      	beq.n	8000bee <unwind_phase2_forced+0xca>
 8000be2:	2709      	movs	r7, #9
 8000be4:	4638      	mov	r0, r7
 8000be6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	4638      	mov	r0, r7
 8000bf0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000bf2:	f7ff ff75 	bl	8000ae0 <_Unwind_DebugHook>
 8000bf6:	a803      	add	r0, sp, #12
 8000bf8:	f000 fb8c 	bl	8001314 <__restore_core_regs>

08000bfc <_Unwind_GetCFA>:
 8000bfc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000bfe:	4770      	bx	lr

08000c00 <__gnu_Unwind_RaiseException>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000c06:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000c08:	b0f9      	sub	sp, #484	; 0x1e4
 8000c0a:	640b      	str	r3, [r1, #64]	; 0x40
 8000c0c:	1d0e      	adds	r6, r1, #4
 8000c0e:	ad01      	add	r5, sp, #4
 8000c10:	460f      	mov	r7, r1
 8000c12:	4604      	mov	r4, r0
 8000c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c28:	f8cd e000 	str.w	lr, [sp]
 8000c2c:	e006      	b.n	8000c3c <__gnu_Unwind_RaiseException+0x3c>
 8000c2e:	6923      	ldr	r3, [r4, #16]
 8000c30:	466a      	mov	r2, sp
 8000c32:	4621      	mov	r1, r4
 8000c34:	4798      	blx	r3
 8000c36:	2808      	cmp	r0, #8
 8000c38:	4605      	mov	r5, r0
 8000c3a:	d108      	bne.n	8000c4e <__gnu_Unwind_RaiseException+0x4e>
 8000c3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f7ff fec8 	bl	80009d4 <get_eit_entry>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d0f2      	beq.n	8000c2e <__gnu_Unwind_RaiseException+0x2e>
 8000c48:	2009      	movs	r0, #9
 8000c4a:	b079      	add	sp, #484	; 0x1e4
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4e:	4668      	mov	r0, sp
 8000c50:	f7ff ff12 	bl	8000a78 <restore_non_core_regs>
 8000c54:	2d06      	cmp	r5, #6
 8000c56:	d1f7      	bne.n	8000c48 <__gnu_Unwind_RaiseException+0x48>
 8000c58:	4639      	mov	r1, r7
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff ff42 	bl	8000ae4 <unwind_phase2>

08000c60 <__gnu_Unwind_ForcedUnwind>:
 8000c60:	b430      	push	{r4, r5}
 8000c62:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000c64:	60c1      	str	r1, [r0, #12]
 8000c66:	6182      	str	r2, [r0, #24]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	641d      	str	r5, [r3, #64]	; 0x40
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	bc30      	pop	{r4, r5}
 8000c70:	e758      	b.n	8000b24 <unwind_phase2_forced>
 8000c72:	bf00      	nop

08000c74 <__gnu_Unwind_Resume>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	6943      	ldr	r3, [r0, #20]
 8000c78:	68c6      	ldr	r6, [r0, #12]
 8000c7a:	640b      	str	r3, [r1, #64]	; 0x40
 8000c7c:	b126      	cbz	r6, 8000c88 <__gnu_Unwind_Resume+0x14>
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f7ff ff50 	bl	8000b24 <unwind_phase2_forced>
 8000c84:	f003 fc04 	bl	8004490 <abort>
 8000c88:	6903      	ldr	r3, [r0, #16]
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4601      	mov	r1, r0
 8000c92:	2002      	movs	r0, #2
 8000c94:	4798      	blx	r3
 8000c96:	2807      	cmp	r0, #7
 8000c98:	d007      	beq.n	8000caa <__gnu_Unwind_Resume+0x36>
 8000c9a:	2808      	cmp	r0, #8
 8000c9c:	d103      	bne.n	8000ca6 <__gnu_Unwind_Resume+0x32>
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff ff1f 	bl	8000ae4 <unwind_phase2>
 8000ca6:	f003 fbf3 	bl	8004490 <abort>
 8000caa:	4630      	mov	r0, r6
 8000cac:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000cae:	f7ff ff17 	bl	8000ae0 <_Unwind_DebugHook>
 8000cb2:	1d28      	adds	r0, r5, #4
 8000cb4:	f000 fb2e 	bl	8001314 <__restore_core_regs>

08000cb8 <__gnu_Unwind_Resume_or_Rethrow>:
 8000cb8:	68c2      	ldr	r2, [r0, #12]
 8000cba:	b12a      	cbz	r2, 8000cc8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000cbc:	b410      	push	{r4}
 8000cbe:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	640c      	str	r4, [r1, #64]	; 0x40
 8000cc4:	bc10      	pop	{r4}
 8000cc6:	e72d      	b.n	8000b24 <unwind_phase2_forced>
 8000cc8:	e79a      	b.n	8000c00 <__gnu_Unwind_RaiseException>
 8000cca:	bf00      	nop

08000ccc <_Unwind_Complete>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_Unwind_DeleteException>:
 8000cd0:	6883      	ldr	r3, [r0, #8]
 8000cd2:	b113      	cbz	r3, 8000cda <_Unwind_DeleteException+0xa>
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4718      	bx	r3
 8000cda:	4770      	bx	lr

08000cdc <_Unwind_VRS_Get>:
 8000cdc:	b500      	push	{lr}
 8000cde:	2904      	cmp	r1, #4
 8000ce0:	d807      	bhi.n	8000cf2 <_Unwind_VRS_Get+0x16>
 8000ce2:	e8df f001 	tbb	[pc, r1]
 8000ce6:	0903      	.short	0x0903
 8000ce8:	0906      	.short	0x0906
 8000cea:	09          	.byte	0x09
 8000ceb:	00          	.byte	0x00
 8000cec:	b90b      	cbnz	r3, 8000cf2 <_Unwind_VRS_Get+0x16>
 8000cee:	2a0f      	cmp	r2, #15
 8000cf0:	d905      	bls.n	8000cfe <_Unwind_VRS_Get+0x22>
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cfe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d02:	6852      	ldr	r2, [r2, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d0e:	bf00      	nop

08000d10 <_Unwind_GetGR>:
 8000d10:	2300      	movs	r3, #0
 8000d12:	b510      	push	{r4, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	ac03      	add	r4, sp, #12
 8000d18:	460a      	mov	r2, r1
 8000d1a:	9400      	str	r4, [sp, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f7ff ffdd 	bl	8000cdc <_Unwind_VRS_Get>
 8000d22:	9803      	ldr	r0, [sp, #12]
 8000d24:	b004      	add	sp, #16
 8000d26:	bd10      	pop	{r4, pc}

08000d28 <_Unwind_VRS_Set>:
 8000d28:	b500      	push	{lr}
 8000d2a:	2904      	cmp	r1, #4
 8000d2c:	d807      	bhi.n	8000d3e <_Unwind_VRS_Set+0x16>
 8000d2e:	e8df f001 	tbb	[pc, r1]
 8000d32:	0903      	.short	0x0903
 8000d34:	0906      	.short	0x0906
 8000d36:	09          	.byte	0x09
 8000d37:	00          	.byte	0x00
 8000d38:	b90b      	cbnz	r3, 8000d3e <_Unwind_VRS_Set+0x16>
 8000d3a:	2a0f      	cmp	r2, #15
 8000d3c:	d905      	bls.n	8000d4a <_Unwind_VRS_Set+0x22>
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d44:	2001      	movs	r0, #1
 8000d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d4a:	9901      	ldr	r1, [sp, #4]
 8000d4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d50:	6809      	ldr	r1, [r1, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	6051      	str	r1, [r2, #4]
 8000d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d5a:	bf00      	nop

08000d5c <_Unwind_SetGR>:
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	b510      	push	{r4, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	ac04      	add	r4, sp, #16
 8000d64:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000d68:	9400      	str	r4, [sp, #0]
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff ffdb 	bl	8000d28 <_Unwind_VRS_Set>
 8000d72:	b004      	add	sp, #16
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	bf00      	nop

08000d78 <__gnu_Unwind_Backtrace>:
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000d7e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000d80:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	1d15      	adds	r5, r2, #4
 8000d88:	ac17      	add	r4, sp, #92	; 0x5c
 8000d8a:	4607      	mov	r7, r0
 8000d8c:	460e      	mov	r6, r1
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000da2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000da6:	e012      	b.n	8000dce <__gnu_Unwind_Backtrace+0x56>
 8000da8:	210c      	movs	r1, #12
 8000daa:	a816      	add	r0, sp, #88	; 0x58
 8000dac:	466a      	mov	r2, sp
 8000dae:	f7ff ffd5 	bl	8000d5c <_Unwind_SetGR>
 8000db2:	4631      	mov	r1, r6
 8000db4:	a816      	add	r0, sp, #88	; 0x58
 8000db6:	47b8      	blx	r7
 8000db8:	b978      	cbnz	r0, 8000dda <__gnu_Unwind_Backtrace+0x62>
 8000dba:	9b04      	ldr	r3, [sp, #16]
 8000dbc:	aa16      	add	r2, sp, #88	; 0x58
 8000dbe:	4669      	mov	r1, sp
 8000dc0:	2008      	movs	r0, #8
 8000dc2:	4798      	blx	r3
 8000dc4:	2805      	cmp	r0, #5
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	d008      	beq.n	8000ddc <__gnu_Unwind_Backtrace+0x64>
 8000dca:	2809      	cmp	r0, #9
 8000dcc:	d005      	beq.n	8000dda <__gnu_Unwind_Backtrace+0x62>
 8000dce:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000dd0:	4668      	mov	r0, sp
 8000dd2:	f7ff fdff 	bl	80009d4 <get_eit_entry>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d0e6      	beq.n	8000da8 <__gnu_Unwind_Backtrace+0x30>
 8000dda:	2409      	movs	r4, #9
 8000ddc:	a816      	add	r0, sp, #88	; 0x58
 8000dde:	f7ff fe4b 	bl	8000a78 <restore_non_core_regs>
 8000de2:	4620      	mov	r0, r4
 8000de4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dea:	bf00      	nop

08000dec <__gnu_unwind_pr_common>:
 8000dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000df2:	4691      	mov	r9, r2
 8000df4:	6822      	ldr	r2, [r4, #0]
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	3404      	adds	r4, #4
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	9207      	str	r2, [sp, #28]
 8000dfe:	9408      	str	r4, [sp, #32]
 8000e00:	f000 0b03 	and.w	fp, r0, #3
 8000e04:	461e      	mov	r6, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d160      	bne.n	8000ecc <__gnu_unwind_pr_common+0xe0>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	0212      	lsls	r2, r2, #8
 8000e0e:	9207      	str	r2, [sp, #28]
 8000e10:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000e14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000e18:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000e1a:	f1bb 0f02 	cmp.w	fp, #2
 8000e1e:	bf08      	it	eq
 8000e20:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000e22:	f013 0301 	ands.w	r3, r3, #1
 8000e26:	d140      	bne.n	8000eaa <__gnu_unwind_pr_common+0xbe>
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	f000 0308 	and.w	r3, r0, #8
 8000e2e:	9303      	str	r3, [sp, #12]
 8000e30:	f8d4 8000 	ldr.w	r8, [r4]
 8000e34:	f1b8 0f00 	cmp.w	r8, #0
 8000e38:	d039      	beq.n	8000eae <__gnu_unwind_pr_common+0xc2>
 8000e3a:	2e02      	cmp	r6, #2
 8000e3c:	d043      	beq.n	8000ec6 <__gnu_unwind_pr_common+0xda>
 8000e3e:	f8b4 8000 	ldrh.w	r8, [r4]
 8000e42:	8867      	ldrh	r7, [r4, #2]
 8000e44:	3404      	adds	r4, #4
 8000e46:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e48:	f027 0a01 	bic.w	sl, r7, #1
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	4648      	mov	r0, r9
 8000e50:	449a      	add	sl, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <_Unwind_GetGR>
 8000e56:	4582      	cmp	sl, r0
 8000e58:	d833      	bhi.n	8000ec2 <__gnu_unwind_pr_common+0xd6>
 8000e5a:	f028 0301 	bic.w	r3, r8, #1
 8000e5e:	449a      	add	sl, r3
 8000e60:	4550      	cmp	r0, sl
 8000e62:	bf2c      	ite	cs
 8000e64:	2000      	movcs	r0, #0
 8000e66:	2001      	movcc	r0, #1
 8000e68:	007f      	lsls	r7, r7, #1
 8000e6a:	f007 0702 	and.w	r7, r7, #2
 8000e6e:	f008 0801 	and.w	r8, r8, #1
 8000e72:	ea47 0708 	orr.w	r7, r7, r8
 8000e76:	2f01      	cmp	r7, #1
 8000e78:	d03e      	beq.n	8000ef8 <__gnu_unwind_pr_common+0x10c>
 8000e7a:	d335      	bcc.n	8000ee8 <__gnu_unwind_pr_common+0xfc>
 8000e7c:	2f02      	cmp	r7, #2
 8000e7e:	d11c      	bne.n	8000eba <__gnu_unwind_pr_common+0xce>
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e86:	9202      	str	r2, [sp, #8]
 8000e88:	f1bb 0f00 	cmp.w	fp, #0
 8000e8c:	d176      	bne.n	8000f7c <__gnu_unwind_pr_common+0x190>
 8000e8e:	b128      	cbz	r0, 8000e9c <__gnu_unwind_pr_common+0xb0>
 8000e90:	9903      	ldr	r1, [sp, #12]
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d07e      	beq.n	8000f94 <__gnu_unwind_pr_common+0x1a8>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	f000 80a6 	beq.w	8000fe8 <__gnu_unwind_pr_common+0x1fc>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db77      	blt.n	8000f90 <__gnu_unwind_pr_common+0x1a4>
 8000ea0:	9b02      	ldr	r3, [sp, #8]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ea8:	e7c2      	b.n	8000e30 <__gnu_unwind_pr_common+0x44>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	2e02      	cmp	r6, #2
 8000eb0:	dd3e      	ble.n	8000f30 <__gnu_unwind_pr_common+0x144>
 8000eb2:	f7ff fe13 	bl	8000adc <__gnu_unwind_24bit.isra.1>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d040      	beq.n	8000f3c <__gnu_unwind_pr_common+0x150>
 8000eba:	2009      	movs	r0, #9
 8000ebc:	b00b      	add	sp, #44	; 0x2c
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e7d0      	b.n	8000e68 <__gnu_unwind_pr_common+0x7c>
 8000ec6:	6867      	ldr	r7, [r4, #4]
 8000ec8:	3408      	adds	r4, #8
 8000eca:	e7bc      	b.n	8000e46 <__gnu_unwind_pr_common+0x5a>
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	dca3      	bgt.n	8000e18 <__gnu_unwind_pr_common+0x2c>
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	0c13      	lsrs	r3, r2, #16
 8000ed4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000ed8:	0412      	lsls	r2, r2, #16
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ee0:	9207      	str	r2, [sp, #28]
 8000ee2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000ee6:	e797      	b.n	8000e18 <__gnu_unwind_pr_common+0x2c>
 8000ee8:	f1bb 0f00 	cmp.w	fp, #0
 8000eec:	d002      	beq.n	8000ef4 <__gnu_unwind_pr_common+0x108>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	f040 80bd 	bne.w	800106e <__gnu_unwind_pr_common+0x282>
 8000ef4:	3404      	adds	r4, #4
 8000ef6:	e79b      	b.n	8000e30 <__gnu_unwind_pr_common+0x44>
 8000ef8:	f1bb 0f00 	cmp.w	fp, #0
 8000efc:	d125      	bne.n	8000f4a <__gnu_unwind_pr_common+0x15e>
 8000efe:	b1a8      	cbz	r0, 8000f2c <__gnu_unwind_pr_common+0x140>
 8000f00:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f04:	1c99      	adds	r1, r3, #2
 8000f06:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000f0a:	d0d6      	beq.n	8000eba <__gnu_unwind_pr_common+0xce>
 8000f0c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000f10:	3301      	adds	r3, #1
 8000f12:	9106      	str	r1, [sp, #24]
 8000f14:	f000 80a3 	beq.w	800105e <__gnu_unwind_pr_common+0x272>
 8000f18:	1d20      	adds	r0, r4, #4
 8000f1a:	f7ff fdd9 	bl	8000ad0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000f1e:	ab06      	add	r3, sp, #24
 8000f20:	4601      	mov	r1, r0
 8000f22:	4628      	mov	r0, r5
 8000f24:	f002 fdc8 	bl	8003ab8 <__cxa_type_match>
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d177      	bne.n	800101c <__gnu_unwind_pr_common+0x230>
 8000f2c:	3408      	adds	r4, #8
 8000f2e:	e77f      	b.n	8000e30 <__gnu_unwind_pr_common+0x44>
 8000f30:	a907      	add	r1, sp, #28
 8000f32:	4648      	mov	r0, r9
 8000f34:	f000 faf0 	bl	8001518 <__gnu_unwind_execute>
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d1be      	bne.n	8000eba <__gnu_unwind_pr_common+0xce>
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15c      	bne.n	8000ffc <__gnu_unwind_pr_common+0x210>
 8000f42:	2008      	movs	r0, #8
 8000f44:	b00b      	add	sp, #44	; 0x2c
 8000f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f4a:	210d      	movs	r1, #13
 8000f4c:	4648      	mov	r0, r9
 8000f4e:	6a2f      	ldr	r7, [r5, #32]
 8000f50:	f7ff fede 	bl	8000d10 <_Unwind_GetGR>
 8000f54:	4287      	cmp	r7, r0
 8000f56:	d1e9      	bne.n	8000f2c <__gnu_unwind_pr_common+0x140>
 8000f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f5a:	429c      	cmp	r4, r3
 8000f5c:	d1e6      	bne.n	8000f2c <__gnu_unwind_pr_common+0x140>
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff fcea 	bl	8000938 <selfrel_offset31>
 8000f64:	210f      	movs	r1, #15
 8000f66:	4602      	mov	r2, r0
 8000f68:	4648      	mov	r0, r9
 8000f6a:	f7ff fef7 	bl	8000d5c <_Unwind_SetGR>
 8000f6e:	4648      	mov	r0, r9
 8000f70:	462a      	mov	r2, r5
 8000f72:	2100      	movs	r1, #0
 8000f74:	f7ff fef2 	bl	8000d5c <_Unwind_SetGR>
 8000f78:	2007      	movs	r0, #7
 8000f7a:	e79f      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 8000f7c:	210d      	movs	r1, #13
 8000f7e:	4648      	mov	r0, r9
 8000f80:	6a2f      	ldr	r7, [r5, #32]
 8000f82:	f7ff fec5 	bl	8000d10 <_Unwind_GetGR>
 8000f86:	4287      	cmp	r7, r0
 8000f88:	d058      	beq.n	800103c <__gnu_unwind_pr_common+0x250>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da87      	bge.n	8000ea0 <__gnu_unwind_pr_common+0xb4>
 8000f90:	3404      	adds	r4, #4
 8000f92:	e785      	b.n	8000ea0 <__gnu_unwind_pr_common+0xb4>
 8000f94:	9b02      	ldr	r3, [sp, #8]
 8000f96:	b33b      	cbz	r3, 8000fe8 <__gnu_unwind_pr_common+0x1fc>
 8000f98:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000f9c:	1d27      	adds	r7, r4, #4
 8000f9e:	f8cd b010 	str.w	fp, [sp, #16]
 8000fa2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000fa6:	46a3      	mov	fp, r4
 8000fa8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000fac:	461c      	mov	r4, r3
 8000fae:	9605      	str	r6, [sp, #20]
 8000fb0:	e002      	b.n	8000fb8 <__gnu_unwind_pr_common+0x1cc>
 8000fb2:	45b2      	cmp	sl, r6
 8000fb4:	46b0      	mov	r8, r6
 8000fb6:	d016      	beq.n	8000fe6 <__gnu_unwind_pr_common+0x1fa>
 8000fb8:	4638      	mov	r0, r7
 8000fba:	9406      	str	r4, [sp, #24]
 8000fbc:	f7ff fd88 	bl	8000ad0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000fc0:	ab06      	add	r3, sp, #24
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f002 fd76 	bl	8003ab8 <__cxa_type_match>
 8000fcc:	f108 0601 	add.w	r6, r8, #1
 8000fd0:	3704      	adds	r7, #4
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d0ed      	beq.n	8000fb2 <__gnu_unwind_pr_common+0x1c6>
 8000fd6:	9b02      	ldr	r3, [sp, #8]
 8000fd8:	465c      	mov	r4, fp
 8000fda:	4543      	cmp	r3, r8
 8000fdc:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000fe0:	9e05      	ldr	r6, [sp, #20]
 8000fe2:	d1d2      	bne.n	8000f8a <__gnu_unwind_pr_common+0x19e>
 8000fe4:	e000      	b.n	8000fe8 <__gnu_unwind_pr_common+0x1fc>
 8000fe6:	465c      	mov	r4, fp
 8000fe8:	4648      	mov	r0, r9
 8000fea:	210d      	movs	r1, #13
 8000fec:	f7ff fe90 	bl	8000d10 <_Unwind_GetGR>
 8000ff0:	9b06      	ldr	r3, [sp, #24]
 8000ff2:	6228      	str	r0, [r5, #32]
 8000ff4:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ff6:	626b      	str	r3, [r5, #36]	; 0x24
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	e75f      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	4648      	mov	r0, r9
 8001000:	f7ff fe86 	bl	8000d10 <_Unwind_GetGR>
 8001004:	210e      	movs	r1, #14
 8001006:	4602      	mov	r2, r0
 8001008:	4648      	mov	r0, r9
 800100a:	f7ff fea7 	bl	8000d5c <_Unwind_SetGR>
 800100e:	4648      	mov	r0, r9
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <__gnu_unwind_pr_common+0x2cc>)
 8001012:	210f      	movs	r1, #15
 8001014:	f7ff fea2 	bl	8000d5c <_Unwind_SetGR>
 8001018:	2007      	movs	r0, #7
 800101a:	e74f      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 800101c:	4607      	mov	r7, r0
 800101e:	210d      	movs	r1, #13
 8001020:	4648      	mov	r0, r9
 8001022:	f7ff fe75 	bl	8000d10 <_Unwind_GetGR>
 8001026:	2f02      	cmp	r7, #2
 8001028:	6228      	str	r0, [r5, #32]
 800102a:	d11d      	bne.n	8001068 <__gnu_unwind_pr_common+0x27c>
 800102c:	462b      	mov	r3, r5
 800102e:	9a06      	ldr	r2, [sp, #24]
 8001030:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001034:	626b      	str	r3, [r5, #36]	; 0x24
 8001036:	62ac      	str	r4, [r5, #40]	; 0x28
 8001038:	2006      	movs	r0, #6
 800103a:	e73f      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 800103c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800103e:	429c      	cmp	r4, r3
 8001040:	d1a3      	bne.n	8000f8a <__gnu_unwind_pr_common+0x19e>
 8001042:	2204      	movs	r2, #4
 8001044:	2700      	movs	r7, #0
 8001046:	9902      	ldr	r1, [sp, #8]
 8001048:	18a3      	adds	r3, r4, r2
 800104a:	62a9      	str	r1, [r5, #40]	; 0x28
 800104c:	62ef      	str	r7, [r5, #44]	; 0x2c
 800104e:	632a      	str	r2, [r5, #48]	; 0x30
 8001050:	636b      	str	r3, [r5, #52]	; 0x34
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	42bb      	cmp	r3, r7
 8001056:	db1d      	blt.n	8001094 <__gnu_unwind_pr_common+0x2a8>
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	e720      	b.n	8000ea0 <__gnu_unwind_pr_common+0xb4>
 800105e:	4648      	mov	r0, r9
 8001060:	210d      	movs	r1, #13
 8001062:	f7ff fe55 	bl	8000d10 <_Unwind_GetGR>
 8001066:	6228      	str	r0, [r5, #32]
 8001068:	9b06      	ldr	r3, [sp, #24]
 800106a:	626b      	str	r3, [r5, #36]	; 0x24
 800106c:	e7e3      	b.n	8001036 <__gnu_unwind_pr_common+0x24a>
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fc62 	bl	8000938 <selfrel_offset31>
 8001074:	3404      	adds	r4, #4
 8001076:	4606      	mov	r6, r0
 8001078:	63ac      	str	r4, [r5, #56]	; 0x38
 800107a:	4628      	mov	r0, r5
 800107c:	f002 fd7a 	bl	8003b74 <__cxa_begin_cleanup>
 8001080:	2800      	cmp	r0, #0
 8001082:	f43f af1a 	beq.w	8000eba <__gnu_unwind_pr_common+0xce>
 8001086:	4648      	mov	r0, r9
 8001088:	4632      	mov	r2, r6
 800108a:	210f      	movs	r1, #15
 800108c:	f7ff fe66 	bl	8000d5c <_Unwind_SetGR>
 8001090:	2007      	movs	r0, #7
 8001092:	e713      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 8001094:	4608      	mov	r0, r1
 8001096:	3001      	adds	r0, #1
 8001098:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800109c:	f7ff fc4c 	bl	8000938 <selfrel_offset31>
 80010a0:	210f      	movs	r1, #15
 80010a2:	4602      	mov	r2, r0
 80010a4:	4648      	mov	r0, r9
 80010a6:	f7ff fe59 	bl	8000d5c <_Unwind_SetGR>
 80010aa:	4648      	mov	r0, r9
 80010ac:	462a      	mov	r2, r5
 80010ae:	4639      	mov	r1, r7
 80010b0:	f7ff fe54 	bl	8000d5c <_Unwind_SetGR>
 80010b4:	2007      	movs	r0, #7
 80010b6:	e701      	b.n	8000ebc <__gnu_unwind_pr_common+0xd0>
 80010b8:	08004387 	.word	0x08004387

080010bc <__aeabi_unwind_cpp_pr0>:
 80010bc:	2300      	movs	r3, #0
 80010be:	e695      	b.n	8000dec <__gnu_unwind_pr_common>

080010c0 <__aeabi_unwind_cpp_pr1>:
 80010c0:	2301      	movs	r3, #1
 80010c2:	e693      	b.n	8000dec <__gnu_unwind_pr_common>

080010c4 <__aeabi_unwind_cpp_pr2>:
 80010c4:	2302      	movs	r3, #2
 80010c6:	e691      	b.n	8000dec <__gnu_unwind_pr_common>

080010c8 <_Unwind_VRS_Pop>:
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	b0c5      	sub	sp, #276	; 0x114
 80010ce:	2904      	cmp	r1, #4
 80010d0:	d80d      	bhi.n	80010ee <_Unwind_VRS_Pop+0x26>
 80010d2:	e8df f001 	tbb	[pc, r1]
 80010d6:	0355      	.short	0x0355
 80010d8:	310c      	.short	0x310c
 80010da:	0f          	.byte	0x0f
 80010db:	00          	.byte	0x00
 80010dc:	2b01      	cmp	r3, #1
 80010de:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80010e2:	b295      	uxth	r5, r2
 80010e4:	d164      	bne.n	80011b0 <_Unwind_VRS_Pop+0xe8>
 80010e6:	1972      	adds	r2, r6, r5
 80010e8:	2a10      	cmp	r2, #16
 80010ea:	f240 809d 	bls.w	8001228 <_Unwind_VRS_Pop+0x160>
 80010ee:	2002      	movs	r0, #2
 80010f0:	b045      	add	sp, #276	; 0x114
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1fa      	bne.n	80010ee <_Unwind_VRS_Pop+0x26>
 80010f8:	2a10      	cmp	r2, #16
 80010fa:	d8f8      	bhi.n	80010ee <_Unwind_VRS_Pop+0x26>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	06d8      	lsls	r0, r3, #27
 8001100:	f100 80c8 	bmi.w	8001294 <_Unwind_VRS_Pop+0x1cc>
 8001104:	ae22      	add	r6, sp, #136	; 0x88
 8001106:	4630      	mov	r0, r6
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	2501      	movs	r5, #1
 800110c:	f000 f974 	bl	80013f8 <__gnu_Unwind_Save_WMMXC>
 8001110:	2300      	movs	r3, #0
 8001112:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001114:	9a01      	ldr	r2, [sp, #4]
 8001116:	fa05 f103 	lsl.w	r1, r5, r3
 800111a:	4211      	tst	r1, r2
 800111c:	d003      	beq.n	8001126 <_Unwind_VRS_Pop+0x5e>
 800111e:	6801      	ldr	r1, [r0, #0]
 8001120:	3004      	adds	r0, #4
 8001122:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001126:	3301      	adds	r3, #1
 8001128:	2b04      	cmp	r3, #4
 800112a:	d1f4      	bne.n	8001116 <_Unwind_VRS_Pop+0x4e>
 800112c:	63a0      	str	r0, [r4, #56]	; 0x38
 800112e:	4630      	mov	r0, r6
 8001130:	f000 f958 	bl	80013e4 <__gnu_Unwind_Restore_WMMXC>
 8001134:	2000      	movs	r0, #0
 8001136:	e7db      	b.n	80010f0 <_Unwind_VRS_Pop+0x28>
 8001138:	2b03      	cmp	r3, #3
 800113a:	d1d8      	bne.n	80010ee <_Unwind_VRS_Pop+0x26>
 800113c:	0c15      	lsrs	r5, r2, #16
 800113e:	b297      	uxth	r7, r2
 8001140:	19eb      	adds	r3, r5, r7
 8001142:	2b10      	cmp	r3, #16
 8001144:	d8d3      	bhi.n	80010ee <_Unwind_VRS_Pop+0x26>
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	071e      	lsls	r6, r3, #28
 800114a:	f100 80b7 	bmi.w	80012bc <_Unwind_VRS_Pop+0x1f4>
 800114e:	ae22      	add	r6, sp, #136	; 0x88
 8001150:	4630      	mov	r0, r6
 8001152:	f000 f925 	bl	80013a0 <__gnu_Unwind_Save_WMMXD>
 8001156:	00ed      	lsls	r5, r5, #3
 8001158:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800115a:	b15f      	cbz	r7, 8001174 <_Unwind_VRS_Pop+0xac>
 800115c:	3d04      	subs	r5, #4
 800115e:	4603      	mov	r3, r0
 8001160:	1971      	adds	r1, r6, r5
 8001162:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001166:	f853 2b04 	ldr.w	r2, [r3], #4
 800116a:	4283      	cmp	r3, r0
 800116c:	f841 2f04 	str.w	r2, [r1, #4]!
 8001170:	d1f9      	bne.n	8001166 <_Unwind_VRS_Pop+0x9e>
 8001172:	4618      	mov	r0, r3
 8001174:	63a0      	str	r0, [r4, #56]	; 0x38
 8001176:	4630      	mov	r0, r6
 8001178:	f000 f8f0 	bl	800135c <__gnu_Unwind_Restore_WMMXD>
 800117c:	2000      	movs	r0, #0
 800117e:	e7b7      	b.n	80010f0 <_Unwind_VRS_Pop+0x28>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1b4      	bne.n	80010ee <_Unwind_VRS_Pop+0x26>
 8001184:	2701      	movs	r7, #1
 8001186:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001188:	b296      	uxth	r6, r2
 800118a:	1d20      	adds	r0, r4, #4
 800118c:	fa07 f103 	lsl.w	r1, r7, r3
 8001190:	4231      	tst	r1, r6
 8001192:	f103 0301 	add.w	r3, r3, #1
 8001196:	d002      	beq.n	800119e <_Unwind_VRS_Pop+0xd6>
 8001198:	6829      	ldr	r1, [r5, #0]
 800119a:	3504      	adds	r5, #4
 800119c:	6001      	str	r1, [r0, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	f100 0004 	add.w	r0, r0, #4
 80011a4:	d1f2      	bne.n	800118c <_Unwind_VRS_Pop+0xc4>
 80011a6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80011aa:	d13b      	bne.n	8001224 <_Unwind_VRS_Pop+0x15c>
 80011ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80011ae:	e79f      	b.n	80010f0 <_Unwind_VRS_Pop+0x28>
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d19c      	bne.n	80010ee <_Unwind_VRS_Pop+0x26>
 80011b4:	1977      	adds	r7, r6, r5
 80011b6:	2f20      	cmp	r7, #32
 80011b8:	d899      	bhi.n	80010ee <_Unwind_VRS_Pop+0x26>
 80011ba:	2e0f      	cmp	r6, #15
 80011bc:	d966      	bls.n	800128c <_Unwind_VRS_Pop+0x1c4>
 80011be:	462f      	mov	r7, r5
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	d13a      	bne.n	800123a <_Unwind_VRS_Pop+0x172>
 80011c4:	462a      	mov	r2, r5
 80011c6:	2700      	movs	r7, #0
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011cc:	dd72      	ble.n	80012b4 <_Unwind_VRS_Pop+0x1ec>
 80011ce:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80011d2:	4601      	mov	r1, r0
 80011d4:	a844      	add	r0, sp, #272	; 0x110
 80011d6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80011da:	388c      	subs	r0, #140	; 0x8c
 80011dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80011e0:	4291      	cmp	r1, r2
 80011e2:	f840 5f04 	str.w	r5, [r0, #4]!
 80011e6:	d1f9      	bne.n	80011dc <_Unwind_VRS_Pop+0x114>
 80011e8:	4608      	mov	r0, r1
 80011ea:	b197      	cbz	r7, 8001212 <_Unwind_VRS_Pop+0x14a>
 80011ec:	2e10      	cmp	r6, #16
 80011ee:	4632      	mov	r2, r6
 80011f0:	bf38      	it	cc
 80011f2:	2210      	movcc	r2, #16
 80011f4:	a944      	add	r1, sp, #272	; 0x110
 80011f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80011fa:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80011fe:	0079      	lsls	r1, r7, #1
 8001200:	3a04      	subs	r2, #4
 8001202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001206:	f850 5b04 	ldr.w	r5, [r0], #4
 800120a:	4288      	cmp	r0, r1
 800120c:	f842 5f04 	str.w	r5, [r2, #4]!
 8001210:	d1f9      	bne.n	8001206 <_Unwind_VRS_Pop+0x13e>
 8001212:	2b01      	cmp	r3, #1
 8001214:	d048      	beq.n	80012a8 <_Unwind_VRS_Pop+0x1e0>
 8001216:	2e0f      	cmp	r6, #15
 8001218:	63a1      	str	r1, [r4, #56]	; 0x38
 800121a:	d933      	bls.n	8001284 <_Unwind_VRS_Pop+0x1bc>
 800121c:	b117      	cbz	r7, 8001224 <_Unwind_VRS_Pop+0x15c>
 800121e:	a802      	add	r0, sp, #8
 8001220:	f000 f894 	bl	800134c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001224:	2000      	movs	r0, #0
 8001226:	e763      	b.n	80010f0 <_Unwind_VRS_Pop+0x28>
 8001228:	2e0f      	cmp	r6, #15
 800122a:	f63f af60 	bhi.w	80010ee <_Unwind_VRS_Pop+0x26>
 800122e:	2700      	movs	r7, #0
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	07d1      	lsls	r1, r2, #31
 8001234:	d417      	bmi.n	8001266 <_Unwind_VRS_Pop+0x19e>
 8001236:	2f00      	cmp	r7, #0
 8001238:	d060      	beq.n	80012fc <_Unwind_VRS_Pop+0x234>
 800123a:	6822      	ldr	r2, [r4, #0]
 800123c:	0751      	lsls	r1, r2, #29
 800123e:	d445      	bmi.n	80012cc <_Unwind_VRS_Pop+0x204>
 8001240:	2b01      	cmp	r3, #1
 8001242:	d04d      	beq.n	80012e0 <_Unwind_VRS_Pop+0x218>
 8001244:	2e0f      	cmp	r6, #15
 8001246:	d806      	bhi.n	8001256 <_Unwind_VRS_Pop+0x18e>
 8001248:	a822      	add	r0, sp, #136	; 0x88
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f000 f87a 	bl	8001344 <__gnu_Unwind_Save_VFP_D>
 8001250:	9b01      	ldr	r3, [sp, #4]
 8001252:	2f00      	cmp	r7, #0
 8001254:	d0b6      	beq.n	80011c4 <_Unwind_VRS_Pop+0xfc>
 8001256:	a802      	add	r0, sp, #8
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f000 f87b 	bl	8001354 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800125e:	9b01      	ldr	r3, [sp, #4]
 8001260:	f1c6 0210 	rsb	r2, r6, #16
 8001264:	e7b0      	b.n	80011c8 <_Unwind_VRS_Pop+0x100>
 8001266:	f022 0101 	bic.w	r1, r2, #1
 800126a:	2b05      	cmp	r3, #5
 800126c:	6021      	str	r1, [r4, #0]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	4620      	mov	r0, r4
 8001272:	d03b      	beq.n	80012ec <_Unwind_VRS_Pop+0x224>
 8001274:	f022 0203 	bic.w	r2, r2, #3
 8001278:	f840 2b48 	str.w	r2, [r0], #72
 800127c:	f000 f85a 	bl	8001334 <__gnu_Unwind_Save_VFP>
 8001280:	9b01      	ldr	r3, [sp, #4]
 8001282:	e7d8      	b.n	8001236 <_Unwind_VRS_Pop+0x16e>
 8001284:	a822      	add	r0, sp, #136	; 0x88
 8001286:	f000 f859 	bl	800133c <__gnu_Unwind_Restore_VFP_D>
 800128a:	e7c7      	b.n	800121c <_Unwind_VRS_Pop+0x154>
 800128c:	2f10      	cmp	r7, #16
 800128e:	d9ce      	bls.n	800122e <_Unwind_VRS_Pop+0x166>
 8001290:	3f10      	subs	r7, #16
 8001292:	e7cd      	b.n	8001230 <_Unwind_VRS_Pop+0x168>
 8001294:	f023 0310 	bic.w	r3, r3, #16
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800129e:	9201      	str	r2, [sp, #4]
 80012a0:	f000 f8aa 	bl	80013f8 <__gnu_Unwind_Save_WMMXC>
 80012a4:	9a01      	ldr	r2, [sp, #4]
 80012a6:	e72d      	b.n	8001104 <_Unwind_VRS_Pop+0x3c>
 80012a8:	3104      	adds	r1, #4
 80012aa:	63a1      	str	r1, [r4, #56]	; 0x38
 80012ac:	a822      	add	r0, sp, #136	; 0x88
 80012ae:	f000 f83d 	bl	800132c <__gnu_Unwind_Restore_VFP>
 80012b2:	e7b7      	b.n	8001224 <_Unwind_VRS_Pop+0x15c>
 80012b4:	2f00      	cmp	r7, #0
 80012b6:	d199      	bne.n	80011ec <_Unwind_VRS_Pop+0x124>
 80012b8:	4601      	mov	r1, r0
 80012ba:	e7aa      	b.n	8001212 <_Unwind_VRS_Pop+0x14a>
 80012bc:	f023 0308 	bic.w	r3, r3, #8
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80012c6:	f000 f86b 	bl	80013a0 <__gnu_Unwind_Save_WMMXD>
 80012ca:	e740      	b.n	800114e <_Unwind_VRS_Pop+0x86>
 80012cc:	4620      	mov	r0, r4
 80012ce:	f022 0204 	bic.w	r2, r2, #4
 80012d2:	f840 2bd0 	str.w	r2, [r0], #208
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f000 f83c 	bl	8001354 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	e7af      	b.n	8001240 <_Unwind_VRS_Pop+0x178>
 80012e0:	a822      	add	r0, sp, #136	; 0x88
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	f000 f826 	bl	8001334 <__gnu_Unwind_Save_VFP>
 80012e8:	9b01      	ldr	r3, [sp, #4]
 80012ea:	e7b9      	b.n	8001260 <_Unwind_VRS_Pop+0x198>
 80012ec:	f041 0102 	orr.w	r1, r1, #2
 80012f0:	f840 1b48 	str.w	r1, [r0], #72
 80012f4:	f000 f826 	bl	8001344 <__gnu_Unwind_Save_VFP_D>
 80012f8:	9b01      	ldr	r3, [sp, #4]
 80012fa:	e79c      	b.n	8001236 <_Unwind_VRS_Pop+0x16e>
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d003      	beq.n	8001308 <_Unwind_VRS_Pop+0x240>
 8001300:	2e0f      	cmp	r6, #15
 8001302:	f63f af5f 	bhi.w	80011c4 <_Unwind_VRS_Pop+0xfc>
 8001306:	e79f      	b.n	8001248 <_Unwind_VRS_Pop+0x180>
 8001308:	a822      	add	r0, sp, #136	; 0x88
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f000 f812 	bl	8001334 <__gnu_Unwind_Save_VFP>
 8001310:	9b01      	ldr	r3, [sp, #4]
 8001312:	e757      	b.n	80011c4 <_Unwind_VRS_Pop+0xfc>

08001314 <__restore_core_regs>:
 8001314:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001318:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800131c:	469c      	mov	ip, r3
 800131e:	46a6      	mov	lr, r4
 8001320:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001324:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001328:	46e5      	mov	sp, ip
 800132a:	bd00      	pop	{pc}

0800132c <__gnu_Unwind_Restore_VFP>:
 800132c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <__gnu_Unwind_Save_VFP>:
 8001334:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <__gnu_Unwind_Restore_VFP_D>:
 800133c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <__gnu_Unwind_Save_VFP_D>:
 8001344:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800134c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001354:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop

0800135c <__gnu_Unwind_Restore_WMMXD>:
 800135c:	ecf0 0102 	ldfe	f0, [r0], #8
 8001360:	ecf0 1102 	ldfe	f1, [r0], #8
 8001364:	ecf0 2102 	ldfe	f2, [r0], #8
 8001368:	ecf0 3102 	ldfe	f3, [r0], #8
 800136c:	ecf0 4102 	ldfe	f4, [r0], #8
 8001370:	ecf0 5102 	ldfe	f5, [r0], #8
 8001374:	ecf0 6102 	ldfe	f6, [r0], #8
 8001378:	ecf0 7102 	ldfe	f7, [r0], #8
 800137c:	ecf0 8102 	ldfp	f0, [r0], #8
 8001380:	ecf0 9102 	ldfp	f1, [r0], #8
 8001384:	ecf0 a102 	ldfp	f2, [r0], #8
 8001388:	ecf0 b102 	ldfp	f3, [r0], #8
 800138c:	ecf0 c102 	ldfp	f4, [r0], #8
 8001390:	ecf0 d102 	ldfp	f5, [r0], #8
 8001394:	ecf0 e102 	ldfp	f6, [r0], #8
 8001398:	ecf0 f102 	ldfp	f7, [r0], #8
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <__gnu_Unwind_Save_WMMXD>:
 80013a0:	ece0 0102 	stfe	f0, [r0], #8
 80013a4:	ece0 1102 	stfe	f1, [r0], #8
 80013a8:	ece0 2102 	stfe	f2, [r0], #8
 80013ac:	ece0 3102 	stfe	f3, [r0], #8
 80013b0:	ece0 4102 	stfe	f4, [r0], #8
 80013b4:	ece0 5102 	stfe	f5, [r0], #8
 80013b8:	ece0 6102 	stfe	f6, [r0], #8
 80013bc:	ece0 7102 	stfe	f7, [r0], #8
 80013c0:	ece0 8102 	stfp	f0, [r0], #8
 80013c4:	ece0 9102 	stfp	f1, [r0], #8
 80013c8:	ece0 a102 	stfp	f2, [r0], #8
 80013cc:	ece0 b102 	stfp	f3, [r0], #8
 80013d0:	ece0 c102 	stfp	f4, [r0], #8
 80013d4:	ece0 d102 	stfp	f5, [r0], #8
 80013d8:	ece0 e102 	stfp	f6, [r0], #8
 80013dc:	ece0 f102 	stfp	f7, [r0], #8
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <__gnu_Unwind_Restore_WMMXC>:
 80013e4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80013e8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80013ec:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80013f0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <__gnu_Unwind_Save_WMMXC>:
 80013f8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80013fc:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001400:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001404:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <_Unwind_RaiseException>:
 800140c:	46ec      	mov	ip, sp
 800140e:	b500      	push	{lr}
 8001410:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001414:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001420:	a901      	add	r1, sp, #4
 8001422:	f7ff fbed 	bl	8000c00 <__gnu_Unwind_RaiseException>
 8001426:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800142a:	b012      	add	sp, #72	; 0x48
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <_Unwind_Resume>:
 8001430:	46ec      	mov	ip, sp
 8001432:	b500      	push	{lr}
 8001434:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001438:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001444:	a901      	add	r1, sp, #4
 8001446:	f7ff fc15 	bl	8000c74 <__gnu_Unwind_Resume>
 800144a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800144e:	b012      	add	sp, #72	; 0x48
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <_Unwind_Resume_or_Rethrow>:
 8001454:	46ec      	mov	ip, sp
 8001456:	b500      	push	{lr}
 8001458:	e92d 5000 	stmdb	sp!, {ip, lr}
 800145c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001468:	a901      	add	r1, sp, #4
 800146a:	f7ff fc25 	bl	8000cb8 <__gnu_Unwind_Resume_or_Rethrow>
 800146e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001472:	b012      	add	sp, #72	; 0x48
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <_Unwind_ForcedUnwind>:
 8001478:	46ec      	mov	ip, sp
 800147a:	b500      	push	{lr}
 800147c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001480:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e92d 000c 	stmdb	sp!, {r2, r3}
 800148c:	ab01      	add	r3, sp, #4
 800148e:	f7ff fbe7 	bl	8000c60 <__gnu_Unwind_ForcedUnwind>
 8001492:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001496:	b012      	add	sp, #72	; 0x48
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <_Unwind_Backtrace>:
 800149c:	46ec      	mov	ip, sp
 800149e:	b500      	push	{lr}
 80014a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014b0:	aa01      	add	r2, sp, #4
 80014b2:	f7ff fc61 	bl	8000d78 <__gnu_Unwind_Backtrace>
 80014b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014ba:	b012      	add	sp, #72	; 0x48
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <next_unwind_byte>:
 80014c0:	7a02      	ldrb	r2, [r0, #8]
 80014c2:	b91a      	cbnz	r2, 80014cc <next_unwind_byte+0xc>
 80014c4:	7a43      	ldrb	r3, [r0, #9]
 80014c6:	b943      	cbnz	r3, 80014da <next_unwind_byte+0x1a>
 80014c8:	20b0      	movs	r0, #176	; 0xb0
 80014ca:	4770      	bx	lr
 80014cc:	6803      	ldr	r3, [r0, #0]
 80014ce:	3a01      	subs	r2, #1
 80014d0:	7202      	strb	r2, [r0, #8]
 80014d2:	021a      	lsls	r2, r3, #8
 80014d4:	6002      	str	r2, [r0, #0]
 80014d6:	0e18      	lsrs	r0, r3, #24
 80014d8:	4770      	bx	lr
 80014da:	2103      	movs	r1, #3
 80014dc:	6842      	ldr	r2, [r0, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	b410      	push	{r4}
 80014e2:	7243      	strb	r3, [r0, #9]
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	1d14      	adds	r4, r2, #4
 80014e8:	7201      	strb	r1, [r0, #8]
 80014ea:	021a      	lsls	r2, r3, #8
 80014ec:	6044      	str	r4, [r0, #4]
 80014ee:	6002      	str	r2, [r0, #0]
 80014f0:	bc10      	pop	{r4}
 80014f2:	0e18      	lsrs	r0, r3, #24
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <_Unwind_GetGR.constprop.0>:
 80014f8:	2300      	movs	r3, #0
 80014fa:	b500      	push	{lr}
 80014fc:	b085      	sub	sp, #20
 80014fe:	aa03      	add	r2, sp, #12
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	220c      	movs	r2, #12
 8001506:	f7ff fbe9 	bl	8000cdc <_Unwind_VRS_Get>
 800150a:	9803      	ldr	r0, [sp, #12]
 800150c:	b005      	add	sp, #20
 800150e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001512:	bf00      	nop

08001514 <unwind_UCB_from_context>:
 8001514:	e7f0      	b.n	80014f8 <_Unwind_GetGR.constprop.0>
 8001516:	bf00      	nop

08001518 <__gnu_unwind_execute>:
 8001518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800151c:	4606      	mov	r6, r0
 800151e:	460f      	mov	r7, r1
 8001520:	f04f 0800 	mov.w	r8, #0
 8001524:	b085      	sub	sp, #20
 8001526:	4638      	mov	r0, r7
 8001528:	f7ff ffca 	bl	80014c0 <next_unwind_byte>
 800152c:	28b0      	cmp	r0, #176	; 0xb0
 800152e:	4604      	mov	r4, r0
 8001530:	d023      	beq.n	800157a <__gnu_unwind_execute+0x62>
 8001532:	0605      	lsls	r5, r0, #24
 8001534:	d427      	bmi.n	8001586 <__gnu_unwind_execute+0x6e>
 8001536:	2300      	movs	r3, #0
 8001538:	f10d 090c 	add.w	r9, sp, #12
 800153c:	4619      	mov	r1, r3
 800153e:	0085      	lsls	r5, r0, #2
 8001540:	220d      	movs	r2, #13
 8001542:	f8cd 9000 	str.w	r9, [sp]
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff fbc8 	bl	8000cdc <_Unwind_VRS_Get>
 800154c:	b2ed      	uxtb	r5, r5
 800154e:	9b03      	ldr	r3, [sp, #12]
 8001550:	0660      	lsls	r0, r4, #25
 8001552:	f105 0504 	add.w	r5, r5, #4
 8001556:	bf4c      	ite	mi
 8001558:	1b5d      	submi	r5, r3, r5
 800155a:	18ed      	addpl	r5, r5, r3
 800155c:	2300      	movs	r3, #0
 800155e:	220d      	movs	r2, #13
 8001560:	4619      	mov	r1, r3
 8001562:	f8cd 9000 	str.w	r9, [sp]
 8001566:	4630      	mov	r0, r6
 8001568:	9503      	str	r5, [sp, #12]
 800156a:	f7ff fbdd 	bl	8000d28 <_Unwind_VRS_Set>
 800156e:	4638      	mov	r0, r7
 8001570:	f7ff ffa6 	bl	80014c0 <next_unwind_byte>
 8001574:	28b0      	cmp	r0, #176	; 0xb0
 8001576:	4604      	mov	r4, r0
 8001578:	d1db      	bne.n	8001532 <__gnu_unwind_execute+0x1a>
 800157a:	f1b8 0f00 	cmp.w	r8, #0
 800157e:	f000 8094 	beq.w	80016aa <__gnu_unwind_execute+0x192>
 8001582:	2000      	movs	r0, #0
 8001584:	e01c      	b.n	80015c0 <__gnu_unwind_execute+0xa8>
 8001586:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800158a:	2b80      	cmp	r3, #128	; 0x80
 800158c:	d05c      	beq.n	8001648 <__gnu_unwind_execute+0x130>
 800158e:	2b90      	cmp	r3, #144	; 0x90
 8001590:	d019      	beq.n	80015c6 <__gnu_unwind_execute+0xae>
 8001592:	2ba0      	cmp	r3, #160	; 0xa0
 8001594:	d02c      	beq.n	80015f0 <__gnu_unwind_execute+0xd8>
 8001596:	2bb0      	cmp	r3, #176	; 0xb0
 8001598:	d03e      	beq.n	8001618 <__gnu_unwind_execute+0x100>
 800159a:	2bc0      	cmp	r3, #192	; 0xc0
 800159c:	d06b      	beq.n	8001676 <__gnu_unwind_execute+0x15e>
 800159e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80015a2:	2bd0      	cmp	r3, #208	; 0xd0
 80015a4:	d10b      	bne.n	80015be <__gnu_unwind_execute+0xa6>
 80015a6:	f000 0207 	and.w	r2, r0, #7
 80015aa:	3201      	adds	r2, #1
 80015ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015b0:	2305      	movs	r3, #5
 80015b2:	2101      	movs	r1, #1
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff fd87 	bl	80010c8 <_Unwind_VRS_Pop>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d0b3      	beq.n	8001526 <__gnu_unwind_execute+0xe>
 80015be:	2009      	movs	r0, #9
 80015c0:	b005      	add	sp, #20
 80015c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015c6:	f000 030d 	and.w	r3, r0, #13
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	d0f7      	beq.n	80015be <__gnu_unwind_execute+0xa6>
 80015ce:	2300      	movs	r3, #0
 80015d0:	ad03      	add	r5, sp, #12
 80015d2:	f000 020f 	and.w	r2, r0, #15
 80015d6:	4619      	mov	r1, r3
 80015d8:	9500      	str	r5, [sp, #0]
 80015da:	4630      	mov	r0, r6
 80015dc:	f7ff fb7e 	bl	8000cdc <_Unwind_VRS_Get>
 80015e0:	2300      	movs	r3, #0
 80015e2:	9500      	str	r5, [sp, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	220d      	movs	r2, #13
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff fb9d 	bl	8000d28 <_Unwind_VRS_Set>
 80015ee:	e79a      	b.n	8001526 <__gnu_unwind_execute+0xe>
 80015f0:	43c3      	mvns	r3, r0
 80015f2:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	411a      	asrs	r2, r3
 80015fc:	2300      	movs	r3, #0
 80015fe:	0701      	lsls	r1, r0, #28
 8001600:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001604:	bf48      	it	mi
 8001606:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800160a:	4619      	mov	r1, r3
 800160c:	4630      	mov	r0, r6
 800160e:	f7ff fd5b 	bl	80010c8 <_Unwind_VRS_Pop>
 8001612:	2800      	cmp	r0, #0
 8001614:	d1d3      	bne.n	80015be <__gnu_unwind_execute+0xa6>
 8001616:	e786      	b.n	8001526 <__gnu_unwind_execute+0xe>
 8001618:	28b1      	cmp	r0, #177	; 0xb1
 800161a:	d057      	beq.n	80016cc <__gnu_unwind_execute+0x1b4>
 800161c:	28b2      	cmp	r0, #178	; 0xb2
 800161e:	d068      	beq.n	80016f2 <__gnu_unwind_execute+0x1da>
 8001620:	28b3      	cmp	r0, #179	; 0xb3
 8001622:	f000 8095 	beq.w	8001750 <__gnu_unwind_execute+0x238>
 8001626:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800162a:	2bb4      	cmp	r3, #180	; 0xb4
 800162c:	d0c7      	beq.n	80015be <__gnu_unwind_execute+0xa6>
 800162e:	2301      	movs	r3, #1
 8001630:	f000 0207 	and.w	r2, r0, #7
 8001634:	441a      	add	r2, r3
 8001636:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800163a:	4619      	mov	r1, r3
 800163c:	4630      	mov	r0, r6
 800163e:	f7ff fd43 	bl	80010c8 <_Unwind_VRS_Pop>
 8001642:	2800      	cmp	r0, #0
 8001644:	d1bb      	bne.n	80015be <__gnu_unwind_execute+0xa6>
 8001646:	e76e      	b.n	8001526 <__gnu_unwind_execute+0xe>
 8001648:	4638      	mov	r0, r7
 800164a:	f7ff ff39 	bl	80014c0 <next_unwind_byte>
 800164e:	0224      	lsls	r4, r4, #8
 8001650:	4304      	orrs	r4, r0
 8001652:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001656:	d0b2      	beq.n	80015be <__gnu_unwind_execute+0xa6>
 8001658:	2300      	movs	r3, #0
 800165a:	0124      	lsls	r4, r4, #4
 800165c:	b2a2      	uxth	r2, r4
 800165e:	4619      	mov	r1, r3
 8001660:	4630      	mov	r0, r6
 8001662:	f7ff fd31 	bl	80010c8 <_Unwind_VRS_Pop>
 8001666:	2800      	cmp	r0, #0
 8001668:	d1a9      	bne.n	80015be <__gnu_unwind_execute+0xa6>
 800166a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800166e:	bf18      	it	ne
 8001670:	f04f 0801 	movne.w	r8, #1
 8001674:	e757      	b.n	8001526 <__gnu_unwind_execute+0xe>
 8001676:	28c6      	cmp	r0, #198	; 0xc6
 8001678:	d07d      	beq.n	8001776 <__gnu_unwind_execute+0x25e>
 800167a:	28c7      	cmp	r0, #199	; 0xc7
 800167c:	f000 8086 	beq.w	800178c <__gnu_unwind_execute+0x274>
 8001680:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001684:	2bc0      	cmp	r3, #192	; 0xc0
 8001686:	f000 8094 	beq.w	80017b2 <__gnu_unwind_execute+0x29a>
 800168a:	28c8      	cmp	r0, #200	; 0xc8
 800168c:	f000 809f 	beq.w	80017ce <__gnu_unwind_execute+0x2b6>
 8001690:	28c9      	cmp	r0, #201	; 0xc9
 8001692:	d194      	bne.n	80015be <__gnu_unwind_execute+0xa6>
 8001694:	4638      	mov	r0, r7
 8001696:	f7ff ff13 	bl	80014c0 <next_unwind_byte>
 800169a:	0302      	lsls	r2, r0, #12
 800169c:	f000 000f 	and.w	r0, r0, #15
 80016a0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80016a4:	3001      	adds	r0, #1
 80016a6:	4302      	orrs	r2, r0
 80016a8:	e782      	b.n	80015b0 <__gnu_unwind_execute+0x98>
 80016aa:	ac03      	add	r4, sp, #12
 80016ac:	4643      	mov	r3, r8
 80016ae:	220e      	movs	r2, #14
 80016b0:	4641      	mov	r1, r8
 80016b2:	9400      	str	r4, [sp, #0]
 80016b4:	4630      	mov	r0, r6
 80016b6:	f7ff fb11 	bl	8000cdc <_Unwind_VRS_Get>
 80016ba:	9400      	str	r4, [sp, #0]
 80016bc:	4630      	mov	r0, r6
 80016be:	4643      	mov	r3, r8
 80016c0:	220f      	movs	r2, #15
 80016c2:	4641      	mov	r1, r8
 80016c4:	f7ff fb30 	bl	8000d28 <_Unwind_VRS_Set>
 80016c8:	4640      	mov	r0, r8
 80016ca:	e779      	b.n	80015c0 <__gnu_unwind_execute+0xa8>
 80016cc:	4638      	mov	r0, r7
 80016ce:	f7ff fef7 	bl	80014c0 <next_unwind_byte>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	f43f af73 	beq.w	80015be <__gnu_unwind_execute+0xa6>
 80016d8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80016dc:	f47f af6f 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff fcef 	bl	80010c8 <_Unwind_VRS_Pop>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f47f af67 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 80016f0:	e719      	b.n	8001526 <__gnu_unwind_execute+0xe>
 80016f2:	2300      	movs	r3, #0
 80016f4:	f10d 090c 	add.w	r9, sp, #12
 80016f8:	220d      	movs	r2, #13
 80016fa:	4619      	mov	r1, r3
 80016fc:	f8cd 9000 	str.w	r9, [sp]
 8001700:	4630      	mov	r0, r6
 8001702:	f7ff faeb 	bl	8000cdc <_Unwind_VRS_Get>
 8001706:	4638      	mov	r0, r7
 8001708:	f7ff feda 	bl	80014c0 <next_unwind_byte>
 800170c:	0602      	lsls	r2, r0, #24
 800170e:	f04f 0402 	mov.w	r4, #2
 8001712:	d50c      	bpl.n	800172e <__gnu_unwind_execute+0x216>
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800171a:	40a0      	lsls	r0, r4
 800171c:	4403      	add	r3, r0
 800171e:	4638      	mov	r0, r7
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	f7ff fecd 	bl	80014c0 <next_unwind_byte>
 8001726:	0603      	lsls	r3, r0, #24
 8001728:	f104 0407 	add.w	r4, r4, #7
 800172c:	d4f2      	bmi.n	8001714 <__gnu_unwind_execute+0x1fc>
 800172e:	2300      	movs	r3, #0
 8001730:	9903      	ldr	r1, [sp, #12]
 8001732:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001736:	40a2      	lsls	r2, r4
 8001738:	f501 7101 	add.w	r1, r1, #516	; 0x204
 800173c:	188c      	adds	r4, r1, r2
 800173e:	f8cd 9000 	str.w	r9, [sp]
 8001742:	4619      	mov	r1, r3
 8001744:	220d      	movs	r2, #13
 8001746:	4630      	mov	r0, r6
 8001748:	9403      	str	r4, [sp, #12]
 800174a:	f7ff faed 	bl	8000d28 <_Unwind_VRS_Set>
 800174e:	e6ea      	b.n	8001526 <__gnu_unwind_execute+0xe>
 8001750:	4638      	mov	r0, r7
 8001752:	f7ff feb5 	bl	80014c0 <next_unwind_byte>
 8001756:	2301      	movs	r3, #1
 8001758:	0301      	lsls	r1, r0, #12
 800175a:	f000 000f 	and.w	r0, r0, #15
 800175e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001762:	18c2      	adds	r2, r0, r3
 8001764:	430a      	orrs	r2, r1
 8001766:	4630      	mov	r0, r6
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fcad 	bl	80010c8 <_Unwind_VRS_Pop>
 800176e:	2800      	cmp	r0, #0
 8001770:	f47f af25 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 8001774:	e6d7      	b.n	8001526 <__gnu_unwind_execute+0xe>
 8001776:	4638      	mov	r0, r7
 8001778:	f7ff fea2 	bl	80014c0 <next_unwind_byte>
 800177c:	0301      	lsls	r1, r0, #12
 800177e:	f000 000f 	and.w	r0, r0, #15
 8001782:	2303      	movs	r3, #3
 8001784:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001788:	1c42      	adds	r2, r0, #1
 800178a:	e7eb      	b.n	8001764 <__gnu_unwind_execute+0x24c>
 800178c:	4638      	mov	r0, r7
 800178e:	f7ff fe97 	bl	80014c0 <next_unwind_byte>
 8001792:	2800      	cmp	r0, #0
 8001794:	f43f af13 	beq.w	80015be <__gnu_unwind_execute+0xa6>
 8001798:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800179c:	f47f af0f 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 80017a0:	4602      	mov	r2, r0
 80017a2:	2104      	movs	r1, #4
 80017a4:	4630      	mov	r0, r6
 80017a6:	f7ff fc8f 	bl	80010c8 <_Unwind_VRS_Pop>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	f47f af07 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 80017b0:	e6b9      	b.n	8001526 <__gnu_unwind_execute+0xe>
 80017b2:	2303      	movs	r3, #3
 80017b4:	f000 020f 	and.w	r2, r0, #15
 80017b8:	3201      	adds	r2, #1
 80017ba:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80017be:	4619      	mov	r1, r3
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff fc81 	bl	80010c8 <_Unwind_VRS_Pop>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	f47f aef9 	bne.w	80015be <__gnu_unwind_execute+0xa6>
 80017cc:	e6ab      	b.n	8001526 <__gnu_unwind_execute+0xe>
 80017ce:	4638      	mov	r0, r7
 80017d0:	f7ff fe76 	bl	80014c0 <next_unwind_byte>
 80017d4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80017d8:	f000 030f 	and.w	r3, r0, #15
 80017dc:	3210      	adds	r2, #16
 80017de:	3301      	adds	r3, #1
 80017e0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80017e4:	e6e4      	b.n	80015b0 <__gnu_unwind_execute+0x98>
 80017e6:	bf00      	nop

080017e8 <__gnu_unwind_frame>:
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	2403      	movs	r4, #3
 80017ec:	460d      	mov	r5, r1
 80017ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80017f0:	b085      	sub	sp, #20
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	f88d 400c 	strb.w	r4, [sp, #12]
 80017f8:	79dc      	ldrb	r4, [r3, #7]
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	3308      	adds	r3, #8
 80017fe:	a901      	add	r1, sp, #4
 8001800:	4628      	mov	r0, r5
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	f88d 400d 	strb.w	r4, [sp, #13]
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	f7ff fe85 	bl	8001518 <__gnu_unwind_execute>
 800180e:	b005      	add	sp, #20
 8001810:	bd30      	pop	{r4, r5, pc}
 8001812:	bf00      	nop

08001814 <_Unwind_GetRegionStart>:
 8001814:	b508      	push	{r3, lr}
 8001816:	f7ff fe7d 	bl	8001514 <unwind_UCB_from_context>
 800181a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800181c:	bd08      	pop	{r3, pc}
 800181e:	bf00      	nop

08001820 <_Unwind_GetLanguageSpecificData>:
 8001820:	b508      	push	{r3, lr}
 8001822:	f7ff fe77 	bl	8001514 <unwind_UCB_from_context>
 8001826:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001828:	79c3      	ldrb	r3, [r0, #7]
 800182a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800182e:	3008      	adds	r0, #8
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop

08001834 <_Unwind_GetTextRelBase>:
 8001834:	b508      	push	{r3, lr}
 8001836:	f002 fe2b 	bl	8004490 <abort>
 800183a:	bf00      	nop

0800183c <_Unwind_GetDataRelBase>:
 800183c:	b508      	push	{r3, lr}
 800183e:	f7ff fff9 	bl	8001834 <_Unwind_GetTextRelBase>
 8001842:	bf00      	nop

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_InitTick+0x3c>)
{
 8001848:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184a:	7818      	ldrb	r0, [r3, #0]
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	fbb3 f3f0 	udiv	r3, r3, r0
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_InitTick+0x40>)
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	fbb0 f0f3 	udiv	r0, r0, r3
 800185c:	f000 f88c 	bl	8001978 <HAL_SYSTICK_Config>
 8001860:	4604      	mov	r4, r0
 8001862:	b958      	cbnz	r0, 800187c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001864:	2d0f      	cmp	r5, #15
 8001866:	d809      	bhi.n	800187c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	4602      	mov	r2, r0
 800186a:	4629      	mov	r1, r5
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001870:	f000 f842 	bl	80018f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_InitTick+0x44>)
 8001876:	4620      	mov	r0, r4
 8001878:	601d      	str	r5, [r3, #0]
 800187a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800187e:	bd38      	pop	{r3, r4, r5, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x20>)
{
 800188e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	f000 f81b 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff ffd0 	bl	8001844 <HAL_InitTick>
  HAL_MspInit();
 80018a4:	f001 ff0a 	bl	80036bc <HAL_MspInit>
}
 80018a8:	2000      	movs	r0, #0
 80018aa:	bd08      	pop	{r3, pc}
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_IncTick+0x10>)
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_IncTick+0x14>)
 80018b4:	6811      	ldr	r1, [r2, #0]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	440b      	add	r3, r1
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000029c 	.word	0x2000029c
 80018c4:	20000000 	.word	0x20000000

080018c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <HAL_GetTick+0x8>)
 80018ca:	6818      	ldr	r0, [r3, #0]
}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000029c 	.word	0x2000029c

080018d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80018ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018f0:	60d3      	str	r3, [r2, #12]
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b530      	push	{r4, r5, lr}
 80018fc:	68dc      	ldr	r4, [r3, #12]
 80018fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001902:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	2b04      	cmp	r3, #4
 800190a:	bf28      	it	cs
 800190c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001914:	bf98      	it	ls
 8001916:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	fa05 f303 	lsl.w	r3, r5, r3
 800191c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001920:	bf88      	it	hi
 8001922:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4019      	ands	r1, r3
 8001926:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	fa05 f404 	lsl.w	r4, r5, r4
 800192c:	3c01      	subs	r4, #1
 800192e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001930:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001932:	ea42 0201 	orr.w	r2, r2, r1
 8001936:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	bfaf      	iteee	ge
 800193c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	4b06      	ldrlt	r3, [pc, #24]	; (800195c <HAL_NVIC_SetPriority+0x64>)
 8001942:	f000 000f 	andlt.w	r0, r0, #15
 8001946:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	bfa5      	ittet	ge
 800194a:	b2d2      	uxtbge	r2, r2
 800194c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001956:	bd30      	pop	{r4, r5, pc}
 8001958:	e000ed00 	.word	0xe000ed00
 800195c:	e000ed14 	.word	0xe000ed14

08001960 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001960:	2301      	movs	r3, #1
 8001962:	0942      	lsrs	r2, r0, #5
 8001964:	f000 001f 	and.w	r0, r0, #31
 8001968:	fa03 f000 	lsl.w	r0, r3, r0
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <HAL_NVIC_EnableIRQ+0x14>)
 800196e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100

08001978 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	3801      	subs	r0, #1
 800197a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800197e:	d20a      	bcs.n	8001996 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019a6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	bf0c      	ite	eq
 80019ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019b0:	f022 0204 	bicne.w	r2, r2, #4
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4770      	bx	lr
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019bc:	4770      	bx	lr

080019be <HAL_SYSTICK_IRQHandler>:
{
 80019be:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80019c0:	f7ff fffc 	bl	80019bc <HAL_SYSTICK_Callback>
 80019c4:	bd08      	pop	{r3, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019ca:	b350      	cbz	r0, 8001a22 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019cc:	2214      	movs	r2, #20
 80019ce:	6801      	ldr	r1, [r0, #0]
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019d2:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 80019e0:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80019e2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80019e4:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80019ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	4323      	orrs	r3, r4
 80019f4:	6904      	ldr	r4, [r0, #16]
 80019f6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	6944      	ldr	r4, [r0, #20]
 80019fa:	4323      	orrs	r3, r4
 80019fc:	6984      	ldr	r4, [r0, #24]
 80019fe:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a00:	69c4      	ldr	r4, [r0, #28]
 8001a02:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001a04:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a06:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a08:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001a0a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001a10:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001a12:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001a14:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001a16:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1a:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
}
 8001a24:	bd10      	pop	{r4, pc}
 8001a26:	bf00      	nop
 8001a28:	bffdfff8 	.word	0xbffdfff8
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a32:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d035      	beq.n	8001aa6 <HAL_DMA_Start_IT+0x76>
 8001a3a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a3c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001a40:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a44:	42a5      	cmp	r5, r4
 8001a46:	f04f 0600 	mov.w	r6, #0
 8001a4a:	f04f 0402 	mov.w	r4, #2
 8001a4e:	d128      	bne.n	8001aa2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a50:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001a58:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	f026 0601 	bic.w	r6, r6, #1
 8001a60:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a62:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001a64:	40bd      	lsls	r5, r7
 8001a66:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a68:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6a:	6843      	ldr	r3, [r0, #4]
 8001a6c:	6805      	ldr	r5, [r0, #0]
 8001a6e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001a70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a72:	bf0b      	itete	eq
 8001a74:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a76:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a78:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a7a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001a7c:	b14b      	cbz	r3, 8001a92 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a84:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a86:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	f043 030a 	orr.w	r3, r3, #10
 8001aa0:	e7f0      	b.n	8001a84 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001aa2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001aa6:	2002      	movs	r0, #2
}
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001aac <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aac:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001ab0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
 8001abc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abe:	6803      	ldr	r3, [r0, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f022 020e 	bic.w	r2, r2, #14
 8001ac6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_DMA_Abort_IT+0x88>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x6a>
 8001ad6:	3214      	adds	r2, #20
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d01e      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x6e>
 8001adc:	3214      	adds	r2, #20
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01d      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x72>
 8001ae2:	3214      	adds	r2, #20
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d01d      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x78>
 8001ae8:	3214      	adds	r2, #20
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x7e>
 8001aee:	3214      	adds	r2, #20
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf0c      	ite	eq
 8001af4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001af8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001afe:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b00:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001b08:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001b0a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b0e:	b17b      	cbz	r3, 8001b30 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001b10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	4620      	mov	r0, r4
 8001b14:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b16:	2301      	movs	r3, #1
 8001b18:	e7f0      	b.n	8001afc <HAL_DMA_Abort_IT+0x50>
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	e7ee      	b.n	8001afc <HAL_DMA_Abort_IT+0x50>
 8001b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b22:	e7eb      	b.n	8001afc <HAL_DMA_Abort_IT+0x50>
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	e7e8      	b.n	8001afc <HAL_DMA_Abort_IT+0x50>
 8001b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2e:	e7e5      	b.n	8001afc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	4618      	mov	r0, r3
}
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	40020008 	.word	0x40020008
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_DMA_IRQHandler>:
{
 8001b3c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b3e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b40:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b42:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b44:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b46:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b48:	4095      	lsls	r5, r2
 8001b4a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001b4c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b4e:	d032      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x7a>
 8001b50:	074d      	lsls	r5, r1, #29
 8001b52:	d530      	bpl.n	8001bb6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b58:	bf5e      	ittt	pl
 8001b5a:	681a      	ldrpl	r2, [r3, #0]
 8001b5c:	f022 0204 	bicpl.w	r2, r2, #4
 8001b60:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b62:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <HAL_DMA_IRQHandler+0x120>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d019      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x60>
 8001b68:	3214      	adds	r2, #20
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d018      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x64>
 8001b6e:	3214      	adds	r2, #20
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d017      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x68>
 8001b74:	3214      	adds	r2, #20
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d017      	beq.n	8001baa <HAL_DMA_IRQHandler+0x6e>
 8001b7a:	3214      	adds	r2, #20
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d017      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x74>
 8001b80:	3214      	adds	r2, #20
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bf0c      	ite	eq
 8001b86:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001b8a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_DMA_IRQHandler+0x124>)
 8001b90:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05e      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x11a>
}
 8001b98:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001b9a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e7f6      	b.n	8001b8e <HAL_DMA_IRQHandler+0x52>
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	e7f4      	b.n	8001b8e <HAL_DMA_IRQHandler+0x52>
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	e7f1      	b.n	8001b8e <HAL_DMA_IRQHandler+0x52>
 8001baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bae:	e7ee      	b.n	8001b8e <HAL_DMA_IRQHandler+0x52>
 8001bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bb4:	e7eb      	b.n	8001b8e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bb6:	2502      	movs	r5, #2
 8001bb8:	4095      	lsls	r5, r2
 8001bba:	4225      	tst	r5, r4
 8001bbc:	d035      	beq.n	8001c2a <HAL_DMA_IRQHandler+0xee>
 8001bbe:	078d      	lsls	r5, r1, #30
 8001bc0:	d533      	bpl.n	8001c2a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	0694      	lsls	r4, r2, #26
 8001bc6:	d406      	bmi.n	8001bd6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f022 020a 	bic.w	r2, r2, #10
 8001bce:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_DMA_IRQHandler+0x120>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d019      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xd4>
 8001bdc:	3214      	adds	r2, #20
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_DMA_IRQHandler+0xd8>
 8001be2:	3214      	adds	r2, #20
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d017      	beq.n	8001c18 <HAL_DMA_IRQHandler+0xdc>
 8001be8:	3214      	adds	r2, #20
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d017      	beq.n	8001c1e <HAL_DMA_IRQHandler+0xe2>
 8001bee:	3214      	adds	r2, #20
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d017      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xe8>
 8001bf4:	3214      	adds	r2, #20
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	bf0c      	ite	eq
 8001bfa:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001bfe:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_DMA_IRQHandler+0x124>)
 8001c04:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001c06:	2300      	movs	r3, #0
 8001c08:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001c0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c0e:	e7c1      	b.n	8001b94 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c10:	2302      	movs	r3, #2
 8001c12:	e7f6      	b.n	8001c02 <HAL_DMA_IRQHandler+0xc6>
 8001c14:	2320      	movs	r3, #32
 8001c16:	e7f4      	b.n	8001c02 <HAL_DMA_IRQHandler+0xc6>
 8001c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1c:	e7f1      	b.n	8001c02 <HAL_DMA_IRQHandler+0xc6>
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	e7ee      	b.n	8001c02 <HAL_DMA_IRQHandler+0xc6>
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	e7eb      	b.n	8001c02 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c2a:	2508      	movs	r5, #8
 8001c2c:	4095      	lsls	r5, r2
 8001c2e:	4225      	tst	r5, r4
 8001c30:	d011      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x11a>
 8001c32:	0709      	lsls	r1, r1, #28
 8001c34:	d50f      	bpl.n	8001c56 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	f021 010e 	bic.w	r1, r1, #14
 8001c3c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	fa03 f202 	lsl.w	r2, r3, r2
 8001c44:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c46:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001c48:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001c52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c54:	e79e      	b.n	8001b94 <HAL_DMA_IRQHandler+0x58>
}
 8001c56:	bc70      	pop	{r4, r5, r6}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40020008 	.word	0x40020008
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001c68:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	4616      	mov	r6, r2
 8001c6c:	4b65      	ldr	r3, [pc, #404]	; (8001e04 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c6e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001e14 <HAL_GPIO_Init+0x1b0>
 8001c72:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001e18 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001c76:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001c7c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c80:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001c84:	45a0      	cmp	r8, r4
 8001c86:	d17f      	bne.n	8001d88 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001c88:	684d      	ldr	r5, [r1, #4]
 8001c8a:	2d12      	cmp	r5, #18
 8001c8c:	f000 80af 	beq.w	8001dee <HAL_GPIO_Init+0x18a>
 8001c90:	f200 8088 	bhi.w	8001da4 <HAL_GPIO_Init+0x140>
 8001c94:	2d02      	cmp	r5, #2
 8001c96:	f000 80a7 	beq.w	8001de8 <HAL_GPIO_Init+0x184>
 8001c9a:	d87c      	bhi.n	8001d96 <HAL_GPIO_Init+0x132>
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	f000 808e 	beq.w	8001dbe <HAL_GPIO_Init+0x15a>
 8001ca2:	2d01      	cmp	r5, #1
 8001ca4:	f000 809e 	beq.w	8001de4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cac:	2cff      	cmp	r4, #255	; 0xff
 8001cae:	bf93      	iteet	ls
 8001cb0:	4682      	movls	sl, r0
 8001cb2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001cb6:	3d08      	subhi	r5, #8
 8001cb8:	f8d0 b000 	ldrls.w	fp, [r0]
 8001cbc:	bf92      	itee	ls
 8001cbe:	00b5      	lslls	r5, r6, #2
 8001cc0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001cc4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc6:	fa09 f805 	lsl.w	r8, r9, r5
 8001cca:	ea2b 0808 	bic.w	r8, fp, r8
 8001cce:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd2:	bf88      	it	hi
 8001cd4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd8:	ea48 0505 	orr.w	r5, r8, r5
 8001cdc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001ce4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001ce8:	d04e      	beq.n	8001d88 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4d47      	ldr	r5, [pc, #284]	; (8001e08 <HAL_GPIO_Init+0x1a4>)
 8001cec:	4f46      	ldr	r7, [pc, #280]	; (8001e08 <HAL_GPIO_Init+0x1a4>)
 8001cee:	69ad      	ldr	r5, [r5, #24]
 8001cf0:	f026 0803 	bic.w	r8, r6, #3
 8001cf4:	f045 0501 	orr.w	r5, r5, #1
 8001cf8:	61bd      	str	r5, [r7, #24]
 8001cfa:	69bd      	ldr	r5, [r7, #24]
 8001cfc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d00:	f005 0501 	and.w	r5, r5, #1
 8001d04:	9501      	str	r5, [sp, #4]
 8001d06:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d0a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d10:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001d14:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d18:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d1c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d20:	4d3a      	ldr	r5, [pc, #232]	; (8001e0c <HAL_GPIO_Init+0x1a8>)
 8001d22:	42a8      	cmp	r0, r5
 8001d24:	d068      	beq.n	8001df8 <HAL_GPIO_Init+0x194>
 8001d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d2a:	42a8      	cmp	r0, r5
 8001d2c:	d066      	beq.n	8001dfc <HAL_GPIO_Init+0x198>
 8001d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d32:	42a8      	cmp	r0, r5
 8001d34:	d064      	beq.n	8001e00 <HAL_GPIO_Init+0x19c>
 8001d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2503      	moveq	r5, #3
 8001d40:	2504      	movne	r5, #4
 8001d42:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d46:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001d4a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d4e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d50:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001d54:	bf14      	ite	ne
 8001d56:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d58:	43a5      	biceq	r5, r4
 8001d5a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001d62:	bf14      	ite	ne
 8001d64:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d66:	43a5      	biceq	r5, r4
 8001d68:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d70:	bf14      	ite	ne
 8001d72:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d74:	43a5      	biceq	r5, r4
 8001d76:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d78:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d7e:	bf14      	ite	ne
 8001d80:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d82:	ea25 0404 	biceq.w	r4, r5, r4
 8001d86:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d88:	3601      	adds	r6, #1
 8001d8a:	2e10      	cmp	r6, #16
 8001d8c:	f47f af73 	bne.w	8001c76 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001d90:	b003      	add	sp, #12
 8001d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001d96:	2d03      	cmp	r5, #3
 8001d98:	d022      	beq.n	8001de0 <HAL_GPIO_Init+0x17c>
 8001d9a:	2d11      	cmp	r5, #17
 8001d9c:	d184      	bne.n	8001ca8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9e:	68ca      	ldr	r2, [r1, #12]
 8001da0:	3204      	adds	r2, #4
          break;
 8001da2:	e781      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001da4:	4f1a      	ldr	r7, [pc, #104]	; (8001e10 <HAL_GPIO_Init+0x1ac>)
 8001da6:	42bd      	cmp	r5, r7
 8001da8:	d009      	beq.n	8001dbe <HAL_GPIO_Init+0x15a>
 8001daa:	d812      	bhi.n	8001dd2 <HAL_GPIO_Init+0x16e>
 8001dac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001e1c <HAL_GPIO_Init+0x1b8>
 8001db0:	454d      	cmp	r5, r9
 8001db2:	d004      	beq.n	8001dbe <HAL_GPIO_Init+0x15a>
 8001db4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001db8:	454d      	cmp	r5, r9
 8001dba:	f47f af75 	bne.w	8001ca8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dbe:	688a      	ldr	r2, [r1, #8]
 8001dc0:	b1c2      	cbz	r2, 8001df4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001dc4:	bf0c      	ite	eq
 8001dc6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001dca:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dce:	2208      	movs	r2, #8
 8001dd0:	e76a      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001dd2:	4575      	cmp	r5, lr
 8001dd4:	d0f3      	beq.n	8001dbe <HAL_GPIO_Init+0x15a>
 8001dd6:	4565      	cmp	r5, ip
 8001dd8:	d0f1      	beq.n	8001dbe <HAL_GPIO_Init+0x15a>
 8001dda:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001e20 <HAL_GPIO_Init+0x1bc>
 8001dde:	e7eb      	b.n	8001db8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de0:	2200      	movs	r2, #0
 8001de2:	e761      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	68ca      	ldr	r2, [r1, #12]
          break;
 8001de6:	e75f      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de8:	68ca      	ldr	r2, [r1, #12]
 8001dea:	3208      	adds	r2, #8
          break;
 8001dec:	e75c      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dee:	68ca      	ldr	r2, [r1, #12]
 8001df0:	320c      	adds	r2, #12
          break;
 8001df2:	e759      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df4:	2204      	movs	r2, #4
 8001df6:	e757      	b.n	8001ca8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df8:	2500      	movs	r5, #0
 8001dfa:	e7a2      	b.n	8001d42 <HAL_GPIO_Init+0xde>
 8001dfc:	2501      	movs	r5, #1
 8001dfe:	e7a0      	b.n	8001d42 <HAL_GPIO_Init+0xde>
 8001e00:	2502      	movs	r5, #2
 8001e02:	e79e      	b.n	8001d42 <HAL_GPIO_Init+0xde>
 8001e04:	40010400 	.word	0x40010400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10110000 	.word	0x10110000
 8001e20:	10220000 	.word	0x10220000

08001e24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e24:	b10a      	cbz	r2, 8001e2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	6101      	str	r1, [r0, #16]
 8001e28:	4770      	bx	lr
 8001e2a:	0409      	lsls	r1, r1, #16
 8001e2c:	e7fb      	b.n	8001e26 <HAL_GPIO_WritePin+0x2>

08001e2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001e2e:	68c3      	ldr	r3, [r0, #12]
 8001e30:	4059      	eors	r1, r3
 8001e32:	60c1      	str	r1, [r0, #12]
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001e38:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e3c:	6959      	ldr	r1, [r3, #20]
 8001e3e:	4201      	tst	r1, r0
 8001e40:	d002      	beq.n	8001e48 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e42:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	f7ff fff7 	bl	8001e36 <HAL_GPIO_EXTI_Callback>
 8001e48:	bd08      	pop	{r3, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	6803      	ldr	r3, [r0, #0]
{
 8001e52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	07db      	lsls	r3, r3, #31
{
 8001e58:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	d410      	bmi.n	8001e7e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	079f      	lsls	r7, r3, #30
 8001e60:	d45e      	bmi.n	8001f20 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	0719      	lsls	r1, r3, #28
 8001e66:	f100 8095 	bmi.w	8001f94 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	075a      	lsls	r2, r3, #29
 8001e6e:	f100 80bf 	bmi.w	8001ff0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	69ea      	ldr	r2, [r5, #28]
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	f040 812d 	bne.w	80020d4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e7e:	4c90      	ldr	r4, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001e80:	6863      	ldr	r3, [r4, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d007      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	03de      	lsls	r6, r3, #15
 8001e98:	d509      	bpl.n	8001eae <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	039c      	lsls	r4, r3, #14
 8001e9e:	d5dd      	bpl.n	8001e5c <HAL_RCC_OscConfig+0xc>
 8001ea0:	686b      	ldr	r3, [r5, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1da      	bne.n	8001e5c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	686b      	ldr	r3, [r5, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d110      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x88>
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fd03 	bl	80018c8 <HAL_GetTick>
 8001ec2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	0398      	lsls	r0, r3, #14
 8001ec8:	d4c8      	bmi.n	8001e5c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eca:	f7ff fcfd 	bl	80018c8 <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	2864      	cmp	r0, #100	; 0x64
 8001ed2:	d9f7      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	e7e7      	b.n	8001ea8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed8:	b99b      	cbnz	r3, 8001f02 <HAL_RCC_OscConfig+0xb2>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eea:	f7ff fced 	bl	80018c8 <HAL_GetTick>
 8001eee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	0399      	lsls	r1, r3, #14
 8001ef4:	d5b2      	bpl.n	8001e5c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fce7 	bl	80018c8 <HAL_GetTick>
 8001efa:	1b80      	subs	r0, r0, r6
 8001efc:	2864      	cmp	r0, #100	; 0x64
 8001efe:	d9f7      	bls.n	8001ef0 <HAL_RCC_OscConfig+0xa0>
 8001f00:	e7e8      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	d103      	bne.n	8001f12 <HAL_RCC_OscConfig+0xc2>
 8001f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0e:	6023      	str	r3, [r4, #0]
 8001f10:	e7d1      	b.n	8001eb6 <HAL_RCC_OscConfig+0x66>
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6023      	str	r3, [r4, #0]
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	e7cd      	b.n	8001ebc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f20:	4c67      	ldr	r4, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	f013 0f0c 	tst.w	r3, #12
 8001f28:	d007      	beq.n	8001f3a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d110      	bne.n	8001f56 <HAL_RCC_OscConfig+0x106>
 8001f34:	6863      	ldr	r3, [r4, #4]
 8001f36:	03da      	lsls	r2, r3, #15
 8001f38:	d40d      	bmi.n	8001f56 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	079b      	lsls	r3, r3, #30
 8001f3e:	d502      	bpl.n	8001f46 <HAL_RCC_OscConfig+0xf6>
 8001f40:	692b      	ldr	r3, [r5, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d1af      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	696a      	ldr	r2, [r5, #20]
 8001f4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	e785      	b.n	8001e62 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f56:	692a      	ldr	r2, [r5, #16]
 8001f58:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	b16a      	cbz	r2, 8001f78 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f60:	f7ff fcb2 	bl	80018c8 <HAL_GetTick>
 8001f64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	079f      	lsls	r7, r3, #30
 8001f6a:	d4ec      	bmi.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fcac 	bl	80018c8 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9f7      	bls.n	8001f66 <HAL_RCC_OscConfig+0x116>
 8001f76:	e7ad      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fca5 	bl	80018c8 <HAL_GetTick>
 8001f7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	0798      	lsls	r0, r3, #30
 8001f84:	f57f af6d 	bpl.w	8001e62 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc9e 	bl	80018c8 <HAL_GetTick>
 8001f8c:	1b80      	subs	r0, r0, r6
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d9f6      	bls.n	8001f80 <HAL_RCC_OscConfig+0x130>
 8001f92:	e79f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	69aa      	ldr	r2, [r5, #24]
 8001f96:	4c4a      	ldr	r4, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x278>)
 8001f9a:	b1da      	cbz	r2, 8001fd4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fc92 	bl	80018c8 <HAL_GetTick>
 8001fa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa8:	079b      	lsls	r3, r3, #30
 8001faa:	d50d      	bpl.n	8001fc8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001fba:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	9201      	str	r2, [sp, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_RCC_OscConfig+0x16a>
 8001fc6:	e750      	b.n	8001e6a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fc7e 	bl	80018c8 <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9e9      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x156>
 8001fd2:	e77f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001fd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fc77 	bl	80018c8 <HAL_GetTick>
 8001fda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fde:	079f      	lsls	r7, r3, #30
 8001fe0:	f57f af43 	bpl.w	8001e6a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc70 	bl	80018c8 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d9f6      	bls.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fee:	e771      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff0:	4c33      	ldr	r4, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	69e3      	ldr	r3, [r4, #28]
 8001ff4:	00d8      	lsls	r0, r3, #3
 8001ff6:	d424      	bmi.n	8002042 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001ff8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	69e3      	ldr	r3, [r4, #28]
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	61e3      	str	r3, [r4, #28]
 8002002:	69e3      	ldr	r3, [r4, #28]
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4e30      	ldr	r6, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 800200e:	6833      	ldr	r3, [r6, #0]
 8002010:	05d9      	lsls	r1, r3, #23
 8002012:	d518      	bpl.n	8002046 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	68eb      	ldr	r3, [r5, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d126      	bne.n	8002068 <HAL_RCC_OscConfig+0x218>
 800201a:	6a23      	ldr	r3, [r4, #32]
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002022:	f7ff fc51 	bl	80018c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800202a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	6a23      	ldr	r3, [r4, #32]
 800202e:	079b      	lsls	r3, r3, #30
 8002030:	d53f      	bpl.n	80020b2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002032:	2f00      	cmp	r7, #0
 8002034:	f43f af1d 	beq.w	8001e72 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	69e3      	ldr	r3, [r4, #28]
 800203a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203e:	61e3      	str	r3, [r4, #28]
 8002040:	e717      	b.n	8001e72 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2700      	movs	r7, #0
 8002044:	e7e2      	b.n	800200c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800204e:	f7ff fc3b 	bl	80018c8 <HAL_GetTick>
 8002052:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	6833      	ldr	r3, [r6, #0]
 8002056:	05da      	lsls	r2, r3, #23
 8002058:	d4dc      	bmi.n	8002014 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff fc35 	bl	80018c8 <HAL_GetTick>
 800205e:	eba0 0008 	sub.w	r0, r0, r8
 8002062:	2864      	cmp	r0, #100	; 0x64
 8002064:	d9f6      	bls.n	8002054 <HAL_RCC_OscConfig+0x204>
 8002066:	e735      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	b9ab      	cbnz	r3, 8002096 <HAL_RCC_OscConfig+0x246>
 800206a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6223      	str	r3, [r4, #32]
 8002076:	6a23      	ldr	r3, [r4, #32]
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800207e:	f7ff fc23 	bl	80018c8 <HAL_GetTick>
 8002082:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	6a23      	ldr	r3, [r4, #32]
 8002086:	0798      	lsls	r0, r3, #30
 8002088:	d5d3      	bpl.n	8002032 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff fc1d 	bl	80018c8 <HAL_GetTick>
 800208e:	1b80      	subs	r0, r0, r6
 8002090:	4540      	cmp	r0, r8
 8002092:	d9f7      	bls.n	8002084 <HAL_RCC_OscConfig+0x234>
 8002094:	e71e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002096:	2b05      	cmp	r3, #5
 8002098:	6a23      	ldr	r3, [r4, #32]
 800209a:	d103      	bne.n	80020a4 <HAL_RCC_OscConfig+0x254>
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6223      	str	r3, [r4, #32]
 80020a2:	e7ba      	b.n	800201a <HAL_RCC_OscConfig+0x1ca>
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6223      	str	r3, [r4, #32]
 80020aa:	6a23      	ldr	r3, [r4, #32]
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	e7b6      	b.n	8002020 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff fc09 	bl	80018c8 <HAL_GetTick>
 80020b6:	eba0 0008 	sub.w	r0, r0, r8
 80020ba:	42b0      	cmp	r0, r6
 80020bc:	d9b6      	bls.n	800202c <HAL_RCC_OscConfig+0x1dc>
 80020be:	e709      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420000 	.word	0x42420000
 80020c8:	42420480 	.word	0x42420480
 80020cc:	20000008 	.word	0x20000008
 80020d0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4c22      	ldr	r4, [pc, #136]	; (8002160 <HAL_RCC_OscConfig+0x310>)
 80020d6:	6863      	ldr	r3, [r4, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f43f aee2 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x56>
 80020e2:	2300      	movs	r3, #0
 80020e4:	4e1f      	ldr	r6, [pc, #124]	; (8002164 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020e8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ea:	d12b      	bne.n	8002144 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80020ec:	f7ff fbec 	bl	80018c8 <HAL_GetTick>
 80020f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	0199      	lsls	r1, r3, #6
 80020f6:	d41f      	bmi.n	8002138 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f8:	6a2b      	ldr	r3, [r5, #32]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002100:	6862      	ldr	r2, [r4, #4]
 8002102:	68a9      	ldr	r1, [r5, #8]
 8002104:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002108:	430a      	orrs	r2, r1
 800210a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800210e:	6862      	ldr	r2, [r4, #4]
 8002110:	430b      	orrs	r3, r1
 8002112:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002116:	4313      	orrs	r3, r2
 8002118:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800211a:	2301      	movs	r3, #1
 800211c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800211e:	f7ff fbd3 	bl	80018c8 <HAL_GetTick>
 8002122:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	019a      	lsls	r2, r3, #6
 8002128:	f53f aea7 	bmi.w	8001e7a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fbcc 	bl	80018c8 <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f6      	bls.n	8002124 <HAL_RCC_OscConfig+0x2d4>
 8002136:	e6cd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff fbc6 	bl	80018c8 <HAL_GetTick>
 800213c:	1bc0      	subs	r0, r0, r7
 800213e:	2802      	cmp	r0, #2
 8002140:	d9d7      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2a2>
 8002142:	e6c7      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002144:	f7ff fbc0 	bl	80018c8 <HAL_GetTick>
 8002148:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	f57f ae94 	bpl.w	8001e7a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fbb9 	bl	80018c8 <HAL_GetTick>
 8002156:	1b40      	subs	r0, r0, r5
 8002158:	2802      	cmp	r0, #2
 800215a:	d9f6      	bls.n	800214a <HAL_RCC_OscConfig+0x2fa>
 800215c:	e6ba      	b.n	8001ed4 <HAL_RCC_OscConfig+0x84>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420060 	.word	0x42420060

08002168 <HAL_RCC_GetSysClockFreq>:
{
 8002168:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800216c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800216e:	ac02      	add	r4, sp, #8
 8002170:	f103 0510 	add.w	r5, r3, #16
 8002174:	4622      	mov	r2, r4
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	3308      	adds	r3, #8
 800217c:	c203      	stmia	r2!, {r0, r1}
 800217e:	42ab      	cmp	r3, r5
 8002180:	4614      	mov	r4, r2
 8002182:	d1f7      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002184:	2301      	movs	r3, #1
 8002186:	f88d 3004 	strb.w	r3, [sp, #4]
 800218a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800218c:	4911      	ldr	r1, [pc, #68]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800218e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002192:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002194:	f003 020c 	and.w	r2, r3, #12
 8002198:	2a08      	cmp	r2, #8
 800219a:	d117      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80021a0:	a806      	add	r0, sp, #24
 80021a2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021aa:	d50c      	bpl.n	80021c6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ac:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ae:	480a      	ldr	r0, [pc, #40]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b6:	aa06      	add	r2, sp, #24
 80021b8:	4413      	add	r3, r2
 80021ba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80021c2:	b007      	add	sp, #28
 80021c4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x74>)
 80021c8:	4350      	muls	r0, r2
 80021ca:	e7fa      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80021ce:	e7f8      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x5a>
 80021d0:	08004778 	.word	0x08004778
 80021d4:	40021000 	.word	0x40021000
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	003d0900 	.word	0x003d0900

080021e0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021e0:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <HAL_RCC_ClockConfig+0x138>)
{
 80021e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021e6:	6813      	ldr	r3, [r2, #0]
{
 80021e8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	428b      	cmp	r3, r1
{
 80021f0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021f2:	d328      	bcc.n	8002246 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	682a      	ldr	r2, [r5, #0]
 80021f6:	0791      	lsls	r1, r2, #30
 80021f8:	d432      	bmi.n	8002260 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fa:	07d2      	lsls	r2, r2, #31
 80021fc:	d438      	bmi.n	8002270 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <HAL_RCC_ClockConfig+0x138>)
 8002200:	6813      	ldr	r3, [r2, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	429e      	cmp	r6, r3
 8002208:	d373      	bcc.n	80022f2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	682a      	ldr	r2, [r5, #0]
 800220c:	4c43      	ldr	r4, [pc, #268]	; (800231c <HAL_RCC_ClockConfig+0x13c>)
 800220e:	f012 0f04 	tst.w	r2, #4
 8002212:	d179      	bne.n	8002308 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	0713      	lsls	r3, r2, #28
 8002216:	d506      	bpl.n	8002226 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002218:	6863      	ldr	r3, [r4, #4]
 800221a:	692a      	ldr	r2, [r5, #16]
 800221c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002220:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002224:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002226:	f7ff ff9f 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <HAL_RCC_ClockConfig+0x140>)
 800222e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	40d8      	lsrs	r0, r3
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_RCC_ClockConfig+0x144>)
 8002238:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff fb02 	bl	8001844 <HAL_InitTick>
  return HAL_OK;
 8002240:	2000      	movs	r0, #0
}
 8002242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	6813      	ldr	r3, [r2, #0]
 8002248:	f023 0307 	bic.w	r3, r3, #7
 800224c:	430b      	orrs	r3, r1
 800224e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	4299      	cmp	r1, r3
 8002258:	d0cc      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	492e      	ldr	r1, [pc, #184]	; (800231c <HAL_RCC_ClockConfig+0x13c>)
 8002262:	68a8      	ldr	r0, [r5, #8]
 8002264:	684b      	ldr	r3, [r1, #4]
 8002266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226a:	4303      	orrs	r3, r0
 800226c:	604b      	str	r3, [r1, #4]
 800226e:	e7c4      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002270:	686a      	ldr	r2, [r5, #4]
 8002272:	4c2a      	ldr	r4, [pc, #168]	; (800231c <HAL_RCC_ClockConfig+0x13c>)
 8002274:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	d0ec      	beq.n	800225a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002280:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002282:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	4313      	orrs	r3, r2
 800228c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800228e:	f7ff fb1b 	bl	80018c8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002294:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	2b01      	cmp	r3, #1
 8002298:	d114      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800229a:	6863      	ldr	r3, [r4, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d0ac      	beq.n	80021fe <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff fb10 	bl	80018c8 <HAL_GetTick>
 80022a8:	1bc0      	subs	r0, r0, r7
 80022aa:	4540      	cmp	r0, r8
 80022ac:	d9f5      	bls.n	800229a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80022ae:	2003      	movs	r0, #3
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b4:	2a02      	cmp	r2, #2
 80022b6:	d102      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022bc:	e7df      	b.n	800227e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	f013 0f02 	tst.w	r3, #2
 80022c2:	e7dc      	b.n	800227e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d10f      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d095      	beq.n	80021fe <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d2:	f7ff faf9 	bl	80018c8 <HAL_GetTick>
 80022d6:	1bc0      	subs	r0, r0, r7
 80022d8:	4540      	cmp	r0, r8
 80022da:	d9f5      	bls.n	80022c8 <HAL_RCC_ClockConfig+0xe8>
 80022dc:	e7e7      	b.n	80022ae <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7ff faf3 	bl	80018c8 <HAL_GetTick>
 80022e2:	1bc0      	subs	r0, r0, r7
 80022e4:	4540      	cmp	r0, r8
 80022e6:	d8e2      	bhi.n	80022ae <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e8:	6863      	ldr	r3, [r4, #4]
 80022ea:	f013 0f0c 	tst.w	r3, #12
 80022ee:	d1f6      	bne.n	80022de <HAL_RCC_ClockConfig+0xfe>
 80022f0:	e785      	b.n	80021fe <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f023 0307 	bic.w	r3, r3, #7
 80022f8:	4333      	orrs	r3, r6
 80022fa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022fc:	6813      	ldr	r3, [r2, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	429e      	cmp	r6, r3
 8002304:	d1a9      	bne.n	800225a <HAL_RCC_ClockConfig+0x7a>
 8002306:	e780      	b.n	800220a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	68e9      	ldr	r1, [r5, #12]
 800230c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002310:	430b      	orrs	r3, r1
 8002312:	6063      	str	r3, [r4, #4]
 8002314:	e77e      	b.n	8002214 <HAL_RCC_ClockConfig+0x34>
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	0800481b 	.word	0x0800481b
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetHCLKFreq>:
}
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_RCC_GetHCLKFreq+0x8>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008

08002334 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002342:	6810      	ldr	r0, [r2, #0]
}    
 8002344:	40d8      	lsrs	r0, r3
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	0800482b 	.word	0x0800482b
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002362:	6810      	ldr	r0, [r2, #0]
} 
 8002364:	40d8      	lsrs	r0, r3
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	0800482b 	.word	0x0800482b
 8002370:	20000008 	.word	0x20000008

08002374 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002374:	6a03      	ldr	r3, [r0, #32]
{
 8002376:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002382:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002384:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002386:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800238a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800238c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800238e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002392:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002394:	4d0a      	ldr	r5, [pc, #40]	; (80023c0 <TIM_OC1_SetConfig+0x4c>)
 8002396:	42a8      	cmp	r0, r5
 8002398:	d10b      	bne.n	80023b2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800239a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800239c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023a0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023a2:	698e      	ldr	r6, [r1, #24]
 80023a4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023a6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80023aa:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80023b0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b6:	684a      	ldr	r2, [r1, #4]
 80023b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ba:	6203      	str	r3, [r0, #32]
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00

080023c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c4:	6a03      	ldr	r3, [r0, #32]
{
 80023c6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80023da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80023de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023e6:	4d0b      	ldr	r5, [pc, #44]	; (8002414 <TIM_OC3_SetConfig+0x50>)
 80023e8:	42a8      	cmp	r0, r5
 80023ea:	d10d      	bne.n	8002408 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023f6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023f8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023fa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002404:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002408:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800240c:	684a      	ldr	r2, [r1, #4]
 800240e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002410:	6203      	str	r3, [r0, #32]
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	40012c00 	.word	0x40012c00

08002418 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002418:	6a03      	ldr	r3, [r0, #32]
{
 800241a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800241c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002420:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002422:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002428:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800242a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800242e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002432:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002438:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800243c:	4d06      	ldr	r5, [pc, #24]	; (8002458 <TIM_OC4_SetConfig+0x40>)
 800243e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002440:	bf02      	ittt	eq
 8002442:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002444:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002448:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800244c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002450:	684a      	ldr	r2, [r1, #4]
 8002452:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002454:	6203      	str	r3, [r0, #32]
 8002456:	bd30      	pop	{r4, r5, pc}
 8002458:	40012c00 	.word	0x40012c00

0800245c <HAL_TIM_PWM_MspInit>:
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800245e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002462:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002464:	2b01      	cmp	r3, #1
 8002466:	f04f 0302 	mov.w	r3, #2
 800246a:	d01c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x48>
 800246c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002472:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002474:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002478:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800247e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002482:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002484:	680a      	ldr	r2, [r1, #0]
 8002486:	2a40      	cmp	r2, #64	; 0x40
 8002488:	d079      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x120>
 800248a:	d819      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x62>
 800248c:	2a10      	cmp	r2, #16
 800248e:	f000 8093 	beq.w	80025b8 <HAL_TIM_ConfigClockSource+0x15a>
 8002492:	d80a      	bhi.n	80024aa <HAL_TIM_ConfigClockSource+0x4c>
 8002494:	2a00      	cmp	r2, #0
 8002496:	f000 8089 	beq.w	80025ac <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800249a:	2301      	movs	r3, #1
 800249c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024a0:	2300      	movs	r3, #0
 80024a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80024a6:	4618      	mov	r0, r3
}
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80024aa:	2a20      	cmp	r2, #32
 80024ac:	f000 808a 	beq.w	80025c4 <HAL_TIM_ConfigClockSource+0x166>
 80024b0:	2a30      	cmp	r2, #48	; 0x30
 80024b2:	d1f2      	bne.n	800249a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80024b4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80024b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024ba:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80024be:	e036      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80024c0:	2a70      	cmp	r2, #112	; 0x70
 80024c2:	d036      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xd4>
 80024c4:	d81b      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0xa0>
 80024c6:	2a50      	cmp	r2, #80	; 0x50
 80024c8:	d042      	beq.n	8002550 <HAL_TIM_ConfigClockSource+0xf2>
 80024ca:	2a60      	cmp	r2, #96	; 0x60
 80024cc:	d1e5      	bne.n	800249a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ce:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024da:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80024dc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024de:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ea:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80024ee:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024f2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024f8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80024fc:	e017      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002502:	d011      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xca>
 8002504:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002508:	d1c7      	bne.n	800249a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800250a:	688a      	ldr	r2, [r1, #8]
 800250c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800250e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002510:	68c9      	ldr	r1, [r1, #12]
 8002512:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002518:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800251c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	e002      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e7b3      	b.n	800249a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002532:	688a      	ldr	r2, [r1, #8]
 8002534:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002536:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002538:	68c9      	ldr	r1, [r1, #12]
 800253a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002540:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002544:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002546:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002548:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800254a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800254e:	e7ee      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002550:	684c      	ldr	r4, [r1, #4]
 8002552:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002554:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002556:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002558:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255c:	f025 0501 	bic.w	r5, r5, #1
 8002560:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002564:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002566:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800256a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800256e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002570:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002572:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002574:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002578:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800257c:	e7d7      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	684c      	ldr	r4, [r1, #4]
 8002580:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002582:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002584:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002586:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258a:	f025 0501 	bic.w	r5, r5, #1
 800258e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002590:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002592:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002598:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800259c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800259e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80025a0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025a6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80025aa:	e7c0      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025ac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025b2:	f042 0207 	orr.w	r2, r2, #7
 80025b6:	e7ba      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025b8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025be:	f042 0217 	orr.w	r2, r2, #23
 80025c2:	e7b4      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025c4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025ca:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80025ce:	e7ae      	b.n	800252e <HAL_TIM_ConfigClockSource+0xd0>

080025d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80025d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d4:	4290      	cmp	r0, r2
 80025d6:	d00a      	beq.n	80025ee <TIM_Base_SetConfig+0x1e>
 80025d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025dc:	d007      	beq.n	80025ee <TIM_Base_SetConfig+0x1e>
 80025de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025e2:	4290      	cmp	r0, r2
 80025e4:	d003      	beq.n	80025ee <TIM_Base_SetConfig+0x1e>
 80025e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ea:	4290      	cmp	r0, r2
 80025ec:	d115      	bne.n	800261a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80025ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025f4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <TIM_Base_SetConfig+0x6c>)
 80025f8:	4290      	cmp	r0, r2
 80025fa:	d00a      	beq.n	8002612 <TIM_Base_SetConfig+0x42>
 80025fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x42>
 8002602:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002606:	4290      	cmp	r0, r2
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x42>
 800260a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800260e:	4290      	cmp	r0, r2
 8002610:	d103      	bne.n	800261a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002618:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800261a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800261c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002620:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002622:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002624:	688b      	ldr	r3, [r1, #8]
 8002626:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002628:	680b      	ldr	r3, [r1, #0]
 800262a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <TIM_Base_SetConfig+0x6c>)
 800262e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002630:	bf04      	itt	eq
 8002632:	690b      	ldreq	r3, [r1, #16]
 8002634:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002636:	2301      	movs	r3, #1
 8002638:	6143      	str	r3, [r0, #20]
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00

08002640 <HAL_TIM_Base_Init>:
{
 8002640:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002642:	4604      	mov	r4, r0
 8002644:	b1a0      	cbz	r0, 8002670 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002646:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800264a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800264e:	b91b      	cbnz	r3, 8002658 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002650:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002654:	f001 f882 	bl	800375c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002658:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800265c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	1d21      	adds	r1, r4, #4
 8002662:	f7ff ffb5 	bl	80025d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002666:	2301      	movs	r3, #1
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800266a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800266e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002670:	2001      	movs	r0, #1
}
 8002672:	bd10      	pop	{r4, pc}

08002674 <HAL_TIM_PWM_Init>:
{
 8002674:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002676:	4604      	mov	r4, r0
 8002678:	b1a0      	cbz	r0, 80026a4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800267a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800267e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002682:	b91b      	cbnz	r3, 800268c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002684:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002688:	f7ff fee8 	bl	800245c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800268c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002694:	1d21      	adds	r1, r4, #4
 8002696:	f7ff ff9b 	bl	80025d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800269a:	2301      	movs	r3, #1
  return HAL_OK;
 800269c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800269e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a8:	6a03      	ldr	r3, [r0, #32]
{
 80026aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ac:	f023 0310 	bic.w	r3, r3, #16
 80026b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80026b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80026b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80026b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80026c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026cc:	4d0b      	ldr	r5, [pc, #44]	; (80026fc <TIM_OC2_SetConfig+0x54>)
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d10d      	bne.n	80026ee <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026dc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80026de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026e0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026e4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80026e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80026ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026f2:	684a      	ldr	r2, [r1, #4]
 80026f4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80026f6:	6203      	str	r3, [r0, #32]
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	bf00      	nop
 80026fc:	40012c00 	.word	0x40012c00

08002700 <HAL_TIM_PWM_ConfigChannel>:
{
 8002700:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002702:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002706:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002708:	2b01      	cmp	r3, #1
 800270a:	f04f 0002 	mov.w	r0, #2
 800270e:	d025      	beq.n	800275c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002710:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002716:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800271a:	2a0c      	cmp	r2, #12
 800271c:	d818      	bhi.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x50>
 800271e:	e8df f002 	tbb	[pc, r2]
 8002722:	1707      	.short	0x1707
 8002724:	171e1717 	.word	0x171e1717
 8002728:	172f1717 	.word	0x172f1717
 800272c:	1717      	.short	0x1717
 800272e:	40          	.byte	0x40
 800272f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	f7ff fe1f 	bl	8002374 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002736:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002738:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	f042 0208 	orr.w	r2, r2, #8
 8002740:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f022 0204 	bic.w	r2, r2, #4
 8002748:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800274e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002750:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002752:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002754:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002758:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800275c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	f7ff ffa2 	bl	80026a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002764:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002766:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800277e:	e7e6      	b.n	800274e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	f7ff fe1f 	bl	80023c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002786:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002788:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	f042 0208 	orr.w	r2, r2, #8
 8002790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	f022 0204 	bic.w	r2, r2, #4
 8002798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800279e:	61da      	str	r2, [r3, #28]
    break;
 80027a0:	e7d6      	b.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	f7ff fe38 	bl	8002418 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027c2:	e7ec      	b.n	800279e <HAL_TIM_PWM_ConfigChannel+0x9e>

080027c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80027c6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80027ca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80027cc:	ea23 0304 	bic.w	r3, r3, r4
 80027d0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80027d2:	6a03      	ldr	r3, [r0, #32]
 80027d4:	408a      	lsls	r2, r1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	6202      	str	r2, [r0, #32]
 80027da:	bd10      	pop	{r4, pc}

080027dc <HAL_TIM_PWM_Start>:
{
 80027dc:	b510      	push	{r4, lr}
 80027de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027e0:	2201      	movs	r2, #1
 80027e2:	6800      	ldr	r0, [r0, #0]
 80027e4:	f7ff ffee 	bl	80027c4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_TIM_PWM_Start+0x28>)
}
 80027ec:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ee:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80027f0:	bf02      	ittt	eq
 80027f2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80027f4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80027f8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bd10      	pop	{r4, pc}
 8002804:	40012c00 	.word	0x40012c00

08002808 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002808:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800280c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800280e:	2b01      	cmp	r3, #1
 8002810:	f04f 0302 	mov.w	r3, #2
 8002814:	d018      	beq.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002816:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800281a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800281c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800281e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002820:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002826:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4322      	orrs	r2, r4
 800282c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002834:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800283c:	2301      	movs	r3, #1
 800283e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	2300      	movs	r3, #0
 8002844:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002848:	4618      	mov	r0, r3

  return HAL_OK;
}
 800284a:	bd10      	pop	{r4, pc}

0800284c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284c:	6803      	ldr	r3, [r0, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002854:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800285e:	2320      	movs	r3, #32
 8002860:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002864:	4770      	bx	lr
	...

08002868 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800286c:	6805      	ldr	r5, [r0, #0]
 800286e:	68c2      	ldr	r2, [r0, #12]
 8002870:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002872:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002878:	4313      	orrs	r3, r2
 800287a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800287c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800287e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002880:	430b      	orrs	r3, r1
 8002882:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002884:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002888:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800288c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800288e:	4313      	orrs	r3, r2
 8002890:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002892:	696b      	ldr	r3, [r5, #20]
 8002894:	6982      	ldr	r2, [r0, #24]
 8002896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289a:	4313      	orrs	r3, r2
 800289c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <UART_SetConfig+0x138>)
{
 80028a0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80028a2:	429d      	cmp	r5, r3
 80028a4:	f04f 0419 	mov.w	r4, #25
 80028a8:	d146      	bne.n	8002938 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028aa:	f7ff fd53 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80028ae:	fb04 f300 	mul.w	r3, r4, r0
 80028b2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80028b6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80028ba:	00b6      	lsls	r6, r6, #2
 80028bc:	fbb3 f3f6 	udiv	r3, r3, r6
 80028c0:	fbb3 f3f8 	udiv	r3, r3, r8
 80028c4:	011e      	lsls	r6, r3, #4
 80028c6:	f7ff fd45 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80028ca:	4360      	muls	r0, r4
 80028cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	fbb0 f7f3 	udiv	r7, r0, r3
 80028d6:	f7ff fd3d 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80028da:	4360      	muls	r0, r4
 80028dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80028ea:	fb08 7313 	mls	r3, r8, r3, r7
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80028f6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80028fa:	f7ff fd2b 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80028fe:	4360      	muls	r0, r4
 8002900:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	fbb0 faf2 	udiv	sl, r0, r2
 800290a:	f7ff fd23 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800290e:	4360      	muls	r0, r4
 8002910:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	fbb3 f3f8 	udiv	r3, r3, r8
 800291e:	fb08 a313 	mls	r3, r8, r3, sl
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	3332      	adds	r3, #50	; 0x32
 8002926:	fbb3 f3f8 	udiv	r3, r3, r8
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	433b      	orrs	r3, r7
 8002930:	4433      	add	r3, r6
 8002932:	60ab      	str	r3, [r5, #8]
 8002934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002938:	f7ff fcfc 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 800293c:	fb04 f300 	mul.w	r3, r4, r0
 8002940:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002944:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002948:	00b6      	lsls	r6, r6, #2
 800294a:	fbb3 f3f6 	udiv	r3, r3, r6
 800294e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002952:	011e      	lsls	r6, r3, #4
 8002954:	f7ff fcee 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002958:	4360      	muls	r0, r4
 800295a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fbb0 f7f3 	udiv	r7, r0, r3
 8002964:	f7ff fce6 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002968:	4360      	muls	r0, r4
 800296a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fbb0 f3f3 	udiv	r3, r0, r3
 8002974:	fbb3 f3f8 	udiv	r3, r3, r8
 8002978:	fb08 7313 	mls	r3, r8, r3, r7
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	fbb3 f3f8 	udiv	r3, r3, r8
 8002984:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002988:	f7ff fcd4 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 800298c:	4360      	muls	r0, r4
 800298e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	fbb0 faf2 	udiv	sl, r0, r2
 8002998:	f7ff fccc 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 800299c:	e7b7      	b.n	800290e <UART_SetConfig+0xa6>
 800299e:	bf00      	nop
 80029a0:	40013800 	.word	0x40013800

080029a4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	460e      	mov	r6, r1
 80029aa:	4617      	mov	r7, r2
 80029ac:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80029ae:	6821      	ldr	r1, [r4, #0]
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	ea36 0303 	bics.w	r3, r6, r3
 80029b6:	d101      	bne.n	80029bc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80029b8:	2000      	movs	r0, #0
}
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80029bc:	1c6b      	adds	r3, r5, #1
 80029be:	d0f7      	beq.n	80029b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80029c0:	b995      	cbnz	r5, 80029e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80029c4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80029d6:	2320      	movs	r3, #32
 80029d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80029e0:	2300      	movs	r3, #0
 80029e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80029e8:	f7fe ff6e 	bl	80018c8 <HAL_GetTick>
 80029ec:	1bc0      	subs	r0, r0, r7
 80029ee:	4285      	cmp	r5, r0
 80029f0:	d2dd      	bcs.n	80029ae <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80029f2:	e7e6      	b.n	80029c2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080029f4 <HAL_UART_Init>:
{
 80029f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80029f6:	4604      	mov	r4, r0
 80029f8:	b340      	cbz	r0, 8002a4c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80029fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a02:	b91b      	cbnz	r3, 8002a0c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002a04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002a08:	f000 fed4 	bl	80037b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a0c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a14:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a16:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a1c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a1e:	f7ff ff23 	bl	8002868 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a34:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a3c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002a3e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002a42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002a46:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002a4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
}
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <HAL_UART_Transmit>:
{
 8002a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a54:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002a56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002a5a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002a5c:	2b20      	cmp	r3, #32
{
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002a62:	d14e      	bne.n	8002b02 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d049      	beq.n	8002afc <HAL_UART_Transmit+0xac>
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d047      	beq.n	8002afc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002a6c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d046      	beq.n	8002b02 <HAL_UART_Transmit+0xb2>
 8002a74:	2301      	movs	r3, #1
 8002a76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	2321      	movs	r3, #33	; 0x21
 8002a80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a84:	f7fe ff20 	bl	80018c8 <HAL_GetTick>
 8002a88:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002a8a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002a92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b96b      	cbnz	r3, 8002ab4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a98:	463b      	mov	r3, r7
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ff80 	bl	80029a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002aa4:	b9a8      	cbnz	r0, 8002ad2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002aa6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002aa8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002aac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002ab4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002abe:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aca:	d10e      	bne.n	8002aea <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002acc:	f7ff ff6a 	bl	80029a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ad0:	b110      	cbz	r0, 8002ad8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ad8:	882b      	ldrh	r3, [r5, #0]
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ae2:	6923      	ldr	r3, [r4, #16]
 8002ae4:	b943      	cbnz	r3, 8002af8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002ae6:	3502      	adds	r5, #2
 8002ae8:	e7d3      	b.n	8002a92 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aea:	f7ff ff5b 	bl	80029a4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1ef      	bne.n	8002ad2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	782a      	ldrb	r2, [r5, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	3501      	adds	r5, #1
 8002afa:	e7ca      	b.n	8002a92 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
 8002afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002b02:	2002      	movs	r0, #2
}
 8002b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b08 <HAL_UART_Receive_DMA>:
{
 8002b08:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002b0a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8002b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002b10:	2a20      	cmp	r2, #32
{
 8002b12:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002b14:	d138      	bne.n	8002b88 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 8002b16:	2900      	cmp	r1, #0
 8002b18:	d034      	beq.n	8002b84 <HAL_UART_Receive_DMA+0x7c>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d032      	beq.n	8002b84 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8002b1e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002b22:	2a01      	cmp	r2, #1
 8002b24:	d030      	beq.n	8002b88 <HAL_UART_Receive_DMA+0x80>
 8002b26:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8002b2a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b2e:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8002b30:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b32:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b36:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b3a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002b3e:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b40:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002b44:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b46:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_UART_Receive_DMA+0x8c>)
 8002b4a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	1d31      	adds	r1, r6, #4
 8002b50:	f7fe ff6e 	bl	8001a30 <HAL_DMA_Start_IT>
    return HAL_OK;
 8002b54:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	9401      	str	r4, [sp, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8002b60:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7e:	615a      	str	r2, [r3, #20]
}
 8002b80:	b002      	add	sp, #8
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
 8002b86:	e7fb      	b.n	8002b80 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8002b88:	2002      	movs	r0, #2
 8002b8a:	e7f9      	b.n	8002b80 <HAL_UART_Receive_DMA+0x78>
 8002b8c:	08002b9b 	.word	0x08002b9b
 8002b90:	08002c51 	.word	0x08002c51
 8002b94:	08002c5d 	.word	0x08002c5d

08002b98 <HAL_UART_TxCpltCallback>:
 8002b98:	4770      	bx	lr

08002b9a <UART_DMAReceiveCplt>:
{
 8002b9a:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f013 0320 	ands.w	r3, r3, #32
 8002ba6:	d110      	bne.n	8002bca <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002ba8:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002bb2:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	6959      	ldr	r1, [r3, #20]
 8002bb6:	f021 0101 	bic.w	r1, r1, #1
 8002bba:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbc:	6959      	ldr	r1, [r3, #20]
 8002bbe:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002bc2:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f000 faba 	bl	8003144 <HAL_UART_RxCpltCallback>
 8002bd0:	bd08      	pop	{r3, pc}

08002bd2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002bd2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002bd6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002bd8:	2b22      	cmp	r3, #34	; 0x22
 8002bda:	d136      	bne.n	8002c4a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bdc:	6883      	ldr	r3, [r0, #8]
 8002bde:	6901      	ldr	r1, [r0, #16]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	6802      	ldr	r2, [r0, #0]
 8002be6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002be8:	d123      	bne.n	8002c32 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bea:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002bec:	b9e9      	cbnz	r1, 8002c2a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002bf6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002bf8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002bfa:	3c01      	subs	r4, #1
 8002bfc:	b2a4      	uxth	r4, r4
 8002bfe:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002c00:	b98c      	cbnz	r4, 8002c26 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c02:	6803      	ldr	r3, [r0, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	f022 0220 	bic.w	r2, r2, #32
 8002c0a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c12:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002c22:	f000 fa8f 	bl	8003144 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002c26:	2000      	movs	r0, #0
}
 8002c28:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f823 2b01 	strh.w	r2, [r3], #1
 8002c30:	e7e1      	b.n	8002bf6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c32:	b921      	cbnz	r1, 8002c3e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c34:	1c59      	adds	r1, r3, #1
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e7dc      	b.n	8002bf8 <UART_Receive_IT+0x26>
 8002c3e:	6852      	ldr	r2, [r2, #4]
 8002c40:	1c59      	adds	r1, r3, #1
 8002c42:	6281      	str	r1, [r0, #40]	; 0x28
 8002c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c48:	e7f7      	b.n	8002c3a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	bd10      	pop	{r4, pc}

08002c4e <HAL_UART_RxHalfCpltCallback>:
 8002c4e:	4770      	bx	lr

08002c50 <UART_DMARxHalfCplt>:
{
 8002c50:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8002c52:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002c54:	f7ff fffb 	bl	8002c4e <HAL_UART_RxHalfCpltCallback>
 8002c58:	bd08      	pop	{r3, pc}

08002c5a <HAL_UART_ErrorCallback>:
 8002c5a:	4770      	bx	lr

08002c5c <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8002c5e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c60:	680b      	ldr	r3, [r1, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c64:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002c68:	2821      	cmp	r0, #33	; 0x21
 8002c6a:	d10a      	bne.n	8002c82 <UART_DMAError+0x26>
 8002c6c:	0612      	lsls	r2, r2, #24
 8002c6e:	d508      	bpl.n	8002c82 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8002c70:	2200      	movs	r2, #0
 8002c72:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c7a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002c82:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c84:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002c88:	2a22      	cmp	r2, #34	; 0x22
 8002c8a:	d106      	bne.n	8002c9a <UART_DMAError+0x3e>
 8002c8c:	065b      	lsls	r3, r3, #25
 8002c8e:	d504      	bpl.n	8002c9a <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002c90:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8002c92:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002c94:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c96:	f7ff fdd9 	bl	800284c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c9a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002c9c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002ca4:	f7ff ffd9 	bl	8002c5a <HAL_UART_ErrorCallback>
 8002ca8:	bd08      	pop	{r3, pc}
	...

08002cac <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cac:	6803      	ldr	r3, [r0, #0]
{
 8002cae:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb0:	681a      	ldr	r2, [r3, #0]
{
 8002cb2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002cb4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cb6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002cba:	d107      	bne.n	8002ccc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cbc:	0696      	lsls	r6, r2, #26
 8002cbe:	d55a      	bpl.n	8002d76 <HAL_UART_IRQHandler+0xca>
 8002cc0:	068d      	lsls	r5, r1, #26
 8002cc2:	d558      	bpl.n	8002d76 <HAL_UART_IRQHandler+0xca>
}
 8002cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002cc8:	f7ff bf83 	b.w	8002bd2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ccc:	f015 0501 	ands.w	r5, r5, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x2c>
 8002cd2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002cd6:	d04e      	beq.n	8002d76 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd8:	07d3      	lsls	r3, r2, #31
 8002cda:	d505      	bpl.n	8002ce8 <HAL_UART_IRQHandler+0x3c>
 8002cdc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cde:	bf42      	ittt	mi
 8002ce0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002ce2:	f043 0301 	orrmi.w	r3, r3, #1
 8002ce6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce8:	0750      	lsls	r0, r2, #29
 8002cea:	d504      	bpl.n	8002cf6 <HAL_UART_IRQHandler+0x4a>
 8002cec:	b11d      	cbz	r5, 8002cf6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf6:	0793      	lsls	r3, r2, #30
 8002cf8:	d504      	bpl.n	8002d04 <HAL_UART_IRQHandler+0x58>
 8002cfa:	b11d      	cbz	r5, 8002d04 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d04:	0716      	lsls	r6, r2, #28
 8002d06:	d504      	bpl.n	8002d12 <HAL_UART_IRQHandler+0x66>
 8002d08:	b11d      	cbz	r5, 8002d12 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d066      	beq.n	8002de6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d18:	0695      	lsls	r5, r2, #26
 8002d1a:	d504      	bpl.n	8002d26 <HAL_UART_IRQHandler+0x7a>
 8002d1c:	0688      	lsls	r0, r1, #26
 8002d1e:	d502      	bpl.n	8002d26 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ff56 	bl	8002bd2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002d28:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d2e:	0711      	lsls	r1, r2, #28
 8002d30:	d402      	bmi.n	8002d38 <HAL_UART_IRQHandler+0x8c>
 8002d32:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002d36:	d01a      	beq.n	8002d6e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002d38:	f7ff fd88 	bl	800284c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	0652      	lsls	r2, r2, #25
 8002d42:	d510      	bpl.n	8002d66 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d44:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002d46:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002d4e:	b150      	cbz	r0, 8002d66 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_UART_IRQHandler+0x13c>)
 8002d52:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d54:	f7fe feaa 	bl	8001aac <HAL_DMA_Abort_IT>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d044      	beq.n	8002de6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d64:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff ff77 	bl	8002c5a <HAL_UART_ErrorCallback>
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002d6e:	f7ff ff74 	bl	8002c5a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d76:	0616      	lsls	r6, r2, #24
 8002d78:	d527      	bpl.n	8002dca <HAL_UART_IRQHandler+0x11e>
 8002d7a:	060d      	lsls	r5, r1, #24
 8002d7c:	d525      	bpl.n	8002dca <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d7e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002d82:	2a21      	cmp	r2, #33	; 0x21
 8002d84:	d12f      	bne.n	8002de6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d86:	68a2      	ldr	r2, [r4, #8]
 8002d88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002d8c:	6a22      	ldr	r2, [r4, #32]
 8002d8e:	d117      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d90:	8811      	ldrh	r1, [r2, #0]
 8002d92:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d96:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d98:	6921      	ldr	r1, [r4, #16]
 8002d9a:	b979      	cbnz	r1, 8002dbc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002d9c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002d9e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002da0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002da2:	3a01      	subs	r2, #1
 8002da4:	b292      	uxth	r2, r2
 8002da6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002da8:	b9ea      	cbnz	r2, 8002de6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002dbc:	3201      	adds	r2, #1
 8002dbe:	e7ee      	b.n	8002d9e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dc0:	1c51      	adds	r1, r2, #1
 8002dc2:	6221      	str	r1, [r4, #32]
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	e7ea      	b.n	8002da0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dca:	0650      	lsls	r0, r2, #25
 8002dcc:	d50b      	bpl.n	8002de6 <HAL_UART_IRQHandler+0x13a>
 8002dce:	064a      	lsls	r2, r1, #25
 8002dd0:	d509      	bpl.n	8002de6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dd2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002dd4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dda:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002de2:	f7ff fed9 	bl	8002b98 <HAL_UART_TxCpltCallback>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	08002ded 	.word	0x08002ded

08002dec <UART_DMAAbortOnError>:
{
 8002dec:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002dee:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002df2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002df4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002df6:	f7ff ff30 	bl	8002c5a <HAL_UART_ErrorCallback>
 8002dfa:	bd08      	pop	{r3, pc}

08002dfc <_ZN5Robot4initEv>:
 *      Author: rvbc-
 */

#include "Robot.h"

void Robot::init(){
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	servo[0] = new Servo(&TIM4->CCR1);
 8002e04:	200c      	movs	r0, #12
 8002e06:	f000 fe22 	bl	8003a4e <_Znwj>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461c      	mov	r4, r3
 8002e0e:	491f      	ldr	r1, [pc, #124]	; (8002e8c <_ZN5Robot4initEv+0x90>)
 8002e10:	4620      	mov	r0, r4
 8002e12:	f000 f875 	bl	8002f00 <_ZN5ServoC1EPVm>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	605c      	str	r4, [r3, #4]
	servo[1] = new Servo(&TIM4->CCR2);
 8002e1a:	200c      	movs	r0, #12
 8002e1c:	f000 fe17 	bl	8003a4e <_Znwj>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461c      	mov	r4, r3
 8002e24:	491a      	ldr	r1, [pc, #104]	; (8002e90 <_ZN5Robot4initEv+0x94>)
 8002e26:	4620      	mov	r0, r4
 8002e28:	f000 f86a 	bl	8002f00 <_ZN5ServoC1EPVm>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609c      	str	r4, [r3, #8]
	servo[2] = new Servo(&TIM4->CCR3);
 8002e30:	200c      	movs	r0, #12
 8002e32:	f000 fe0c 	bl	8003a4e <_Znwj>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461c      	mov	r4, r3
 8002e3a:	4916      	ldr	r1, [pc, #88]	; (8002e94 <_ZN5Robot4initEv+0x98>)
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f000 f85f 	bl	8002f00 <_ZN5ServoC1EPVm>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60dc      	str	r4, [r3, #12]
	servo[3] = new Servo(&TIM4->CCR4);
 8002e46:	200c      	movs	r0, #12
 8002e48:	f000 fe01 	bl	8003a4e <_Znwj>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461c      	mov	r4, r3
 8002e50:	4911      	ldr	r1, [pc, #68]	; (8002e98 <_ZN5Robot4initEv+0x9c>)
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f854 	bl	8002f00 <_ZN5ServoC1EPVm>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	611c      	str	r4, [r3, #16]
}
 8002e5c:	e013      	b.n	8002e86 <_ZN5Robot4initEv+0x8a>
	servo[0] = new Servo(&TIM4->CCR1);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f000 fdf3 	bl	8003a4a <_ZdlPv>
 8002e64:	f000 fe04 	bl	8003a70 <__cxa_end_cleanup>
	servo[1] = new Servo(&TIM4->CCR2);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f000 fdee 	bl	8003a4a <_ZdlPv>
 8002e6e:	f000 fdff 	bl	8003a70 <__cxa_end_cleanup>
	servo[2] = new Servo(&TIM4->CCR3);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 fde9 	bl	8003a4a <_ZdlPv>
 8002e78:	f000 fdfa 	bl	8003a70 <__cxa_end_cleanup>
	servo[3] = new Servo(&TIM4->CCR4);
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f000 fde4 	bl	8003a4a <_ZdlPv>
 8002e82:	f000 fdf5 	bl	8003a70 <__cxa_end_cleanup>
}
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	40000834 	.word	0x40000834
 8002e90:	40000838 	.word	0x40000838
 8002e94:	4000083c 	.word	0x4000083c
 8002e98:	40000840 	.word	0x40000840

08002e9c <_ZN5RobotC1Ev>:

Robot::Robot() {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <_ZN5RobotC1Ev+0x20>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
	init();
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffa6 	bl	8002dfc <_ZN5Robot4initEv>
}
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	08004790 	.word	0x08004790

08002ec0 <_ZN5RobotD1Ev>:

Robot::~Robot() {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <_ZN5RobotD1Ev+0x1c>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	08004790 	.word	0x08004790

08002ee0 <_ZN5RobotD0Ev>:
Robot::~Robot() {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
}
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffe9 	bl	8002ec0 <_ZN5RobotD1Ev>
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fdab 	bl	8003a4a <_ZdlPv>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <_ZN5ServoC1EPVm>:
 *      Author: rvbc-
 */

#include "Servo.h"

Servo::Servo(volatile uint32_t* PWM_Register) {
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <_ZN5ServoC1EPVm+0x30>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	601a      	str	r2, [r3, #0]
	this->PWM_Register = PWM_Register;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	605a      	str	r2, [r3, #4]
	this->max_angle = DEFAULT_MAX_ANGLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	22b4      	movs	r2, #180	; 0xb4
 8002f1a:	725a      	strb	r2, [r3, #9]
	this->min_angle = DEFAULT_MIN_ANGLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	721a      	strb	r2, [r3, #8]
}
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	080047b0 	.word	0x080047b0

08002f34 <_ZN5Servo8setPulseEt>:

void Servo::setPulse(uint16_t pulse){
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
	if(pulse < MIN_PULSE_WIDTH) pulse = MIN_PULSE_WIDTH;
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	f240 2289 	movw	r2, #649	; 0x289
 8002f46:	4293      	cmp	r3, r2
 8002f48:	dc02      	bgt.n	8002f50 <_ZN5Servo8setPulseEt+0x1c>
 8002f4a:	f240 238a 	movw	r3, #650	; 0x28a
 8002f4e:	807b      	strh	r3, [r7, #2]
	if(pulse > MAX_PULSE_WIDTH) pulse = MAX_PULSE_WIDTH;
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	f640 2228 	movw	r2, #2600	; 0xa28
 8002f56:	4293      	cmp	r3, r2
 8002f58:	dd02      	ble.n	8002f60 <_ZN5Servo8setPulseEt+0x2c>
 8002f5a:	f640 2328 	movw	r3, #2600	; 0xa28
 8002f5e:	807b      	strh	r3, [r7, #2]
	*PWM_Register = pulse;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	887a      	ldrh	r2, [r7, #2]
 8002f66:	601a      	str	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	0000      	movs	r0, r0
 8002f74:	0000      	movs	r0, r0
	...

08002f78 <_ZN5Servo8setAngleEh>:

void Servo::setAngle(uint8_t angle){
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
	if(angle < min_angle) angle = min_angle;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	7a12      	ldrb	r2, [r2, #8]
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	da02      	bge.n	8002f94 <_ZN5Servo8setAngleEh+0x1c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7a1b      	ldrb	r3, [r3, #8]
 8002f92:	70fb      	strb	r3, [r7, #3]
	if(angle > max_angle) angle = max_angle;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	7a52      	ldrb	r2, [r2, #9]
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	dd02      	ble.n	8002fa4 <_ZN5Servo8setAngleEh+0x2c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7a5b      	ldrb	r3, [r3, #9]
 8002fa2:	70fb      	strb	r3, [r7, #3]
	double pulse = (MAX_PULSE_WIDTH - MIN_PULSE_WIDTH) * (angle / 180.0) + MIN_PULSE_WIDTH;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fa2e 	bl	8000408 <__aeabi_i2d>
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <_ZN5Servo8setAngleEh+0x90>)
 8002fb2:	f7fd fbb9 	bl	8000728 <__aeabi_ddiv>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	a310      	add	r3, pc, #64	; (adr r3, 8003000 <_ZN5Servo8setAngleEh+0x88>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd fa86 	bl	80004d4 <__aeabi_dmul>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4621      	mov	r1, r4
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <_ZN5Servo8setAngleEh+0x94>)
 8002fd6:	f7fd f8cb 	bl	8000170 <__adddf3>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	e9c7 3402 	strd	r3, r4, [r7, #8]
	setPulse(pulse);
 8002fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fe6:	f7fd fc87 	bl	80008f8 <__aeabi_d2uiz>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff9f 	bl	8002f34 <_ZN5Servo8setPulseEt>
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00000000 	.word	0x00000000
 8003004:	409e7800 	.word	0x409e7800
 8003008:	40668000 	.word	0x40668000
 800300c:	40845000 	.word	0x40845000

08003010 <_ZN5ServoD1Ev>:

void Servo::setMaxAngle(uint8_t max_angle){
	this->max_angle = max_angle;
}

Servo::~Servo() {
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <_ZN5ServoD1Ev+0x1c>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	080047b0 	.word	0x080047b0

08003030 <_ZN5ServoD0Ev>:
Servo::~Servo() {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
}
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffe9 	bl	8003010 <_ZN5ServoD1Ev>
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fd03 	bl	8003a4a <_ZdlPv>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_ZN11UART_PC_COM4initEP18UART_HandleTypeDef>:
 *      Author: rvbc-
 */

#include "UARTPCCOM.h"

void UART_PC_COM::init(UART_HandleTypeDef *uart_handler){
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
	this->uart_handler = uart_handler;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	619a      	str	r2, [r3, #24]

	HAL_UART_Receive_DMA(uart_handler, frameRX.bytes, DATA_FRAME_RX_SIZE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3324      	adds	r3, #36	; 0x24
 8003062:	220a      	movs	r2, #10
 8003064:	4619      	mov	r1, r3
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	f7ff fd4e 	bl	8002b08 <HAL_UART_Receive_DMA>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_ZN11UART_PC_COMC1EP18UART_HandleTypeDef>:

UART_PC_COM::UART_PC_COM(UART_HandleTypeDef *uart_handler) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	4a06      	ldr	r2, [pc, #24]	; (8003098 <_ZN11UART_PC_COMC1EP18UART_HandleTypeDef+0x24>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
	init(uart_handler);
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffe1 	bl	800304e <_ZN11UART_PC_COM4initEP18UART_HandleTypeDef>
}
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	080047d0 	.word	0x080047d0

0800309c <_ZN11UART_PC_COMD1Ev>:

UART_PC_COM::~UART_PC_COM() {
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <_ZN11UART_PC_COMD1Ev+0x1c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	080047d0 	.word	0x080047d0

080030bc <_ZN11UART_PC_COMD0Ev>:
UART_PC_COM::~UART_PC_COM() {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
}
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ffe9 	bl	800309c <_ZN11UART_PC_COMD1Ev>
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fcbd 	bl	8003a4a <_ZdlPv>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZN11UART_PC_COM8sendDataEv>:

void UART_PC_COM::sendData(){
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(uart_handler, frameTX.bytes, DATA_FRAME_TX_SIZE, HAL_MAX_DELAY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6998      	ldr	r0, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f103 011c 	add.w	r1, r3, #28
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030f0:	2208      	movs	r2, #8
 80030f2:	f7ff fcad 	bl	8002a50 <HAL_UART_Transmit>


	//char buffer [20];
	//HAL_UART_Transmit(uart_handler, (uint8_t*)buffer,
	//sprintf(buffer, "%d\n%d\n%d\n%d\n", frameTX.data.servo1, frameTX.data.servo2, frameTX.data.servo3, frameTX.data.servo4), HAL_MAX_DELAY);
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <_ZN11UART_PC_COM11recieveDataEv>:

uint8_t UART_PC_COM::recieveData(){
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
	if((frameRX.data.start_code == START_CODE) && (frameRX.data.end_code == END_CODE)){
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d109      	bne.n	8003124 <_ZN11UART_PC_COM11recieveDataEv+0x26>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d104      	bne.n	8003124 <_ZN11UART_PC_COM11recieveDataEv+0x26>
		sendData();
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ffdd 	bl	80030da <_ZN11UART_PC_COM8sendDataEv>
		return true;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <_ZN11UART_PC_COM11recieveDataEv+0x28>
	}
	return false;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_ZN11UART_PC_COM14getUartHandlerEv>:

UART_HandleTypeDef * UART_PC_COM::getUartHandler(){
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	return uart_handler;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800314c:	2120      	movs	r1, #32
 800314e:	481e      	ldr	r0, [pc, #120]	; (80031c8 <HAL_UART_RxCpltCallback+0x84>)
 8003150:	f7fe fe6d 	bl	8001e2e <HAL_GPIO_TogglePin>
//	servo_1->setAngle(data1);
//	servo_2->setAngle(data2);
//	servo_3->setAngle(data3);
//	servo_4->setAngle(data4);

	if(pc->recieveData()){
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_UART_RxCpltCallback+0x88>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ffd0 	bl	80030fe <_ZN11UART_PC_COM11recieveDataEv>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01b      	beq.n	80031a6 <HAL_UART_RxCpltCallback+0x62>
		for(int i = 0; i < 4; i++){
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b03      	cmp	r3, #3
 8003176:	dc16      	bgt.n	80031a6 <HAL_UART_RxCpltCallback+0x62>
			robot->servo[i]->setAngle(pc->frameRX.data.servo[i]);
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_UART_RxCpltCallback+0x8c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	6858      	ldr	r0, [r3, #4]
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_UART_RxCpltCallback+0x88>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3310      	adds	r3, #16
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003194:	b29b      	uxth	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	f7ff feed 	bl	8002f78 <_ZN5Servo8setAngleEh>
		for(int i = 0; i < 4; i++){
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e7e5      	b.n	8003172 <HAL_UART_RxCpltCallback+0x2e>
//	pc->frameTX.data.servo2 = data2;
//	pc->frameTX.data.servo3 = data3;
//	pc->frameTX.data.servo4 = data4;


	HAL_UART_Receive_DMA(pc->getUartHandler(), pc->frameRX.bytes, DATA_FRAME_RX_SIZE);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_UART_RxCpltCallback+0x88>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ffbf 	bl	800312e <_ZN11UART_PC_COM14getUartHandlerEv>
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_UART_RxCpltCallback+0x88>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3324      	adds	r3, #36	; 0x24
 80031b6:	220a      	movs	r2, #10
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7ff fca5 	bl	8002b08 <HAL_UART_Receive_DMA>

}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40010800 	.word	0x40010800
 80031cc:	2000027c 	.word	0x2000027c
 80031d0:	20000278 	.word	0x20000278

080031d4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80031d4:	b598      	push	{r3, r4, r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d8:	f7fe fb58 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031dc:	f000 f842 	bl	8003264 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e0:	f000 f9fe 	bl	80035e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80031e4:	f000 f9c6 	bl	8003574 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80031e8:	f000 f95c 	bl	80034a4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 80031ec:	f000 f892 	bl	8003314 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 80031f0:	f000 f98c 	bl	800350c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80031f4:	2100      	movs	r1, #0
 80031f6:	4817      	ldr	r0, [pc, #92]	; (8003254 <main+0x80>)
 80031f8:	f7ff faf0 	bl	80027dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80031fc:	2104      	movs	r1, #4
 80031fe:	4815      	ldr	r0, [pc, #84]	; (8003254 <main+0x80>)
 8003200:	f7ff faec 	bl	80027dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003204:	2108      	movs	r1, #8
 8003206:	4813      	ldr	r0, [pc, #76]	; (8003254 <main+0x80>)
 8003208:	f7ff fae8 	bl	80027dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800320c:	210c      	movs	r1, #12
 800320e:	4811      	ldr	r0, [pc, #68]	; (8003254 <main+0x80>)
 8003210:	f7ff fae4 	bl	80027dc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	pc = new UART_PC_COM(&huart3);
 8003214:	2030      	movs	r0, #48	; 0x30
 8003216:	f000 fc1a 	bl	8003a4e <_Znwj>
 800321a:	4603      	mov	r3, r0
 800321c:	461c      	mov	r4, r3
 800321e:	490e      	ldr	r1, [pc, #56]	; (8003258 <main+0x84>)
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ff27 	bl	8003074 <_ZN11UART_PC_COMC1EP18UART_HandleTypeDef>
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <main+0x88>)
 8003228:	601c      	str	r4, [r3, #0]
	robot = new Robot();
 800322a:	2014      	movs	r0, #20
 800322c:	f000 fc0f 	bl	8003a4e <_Znwj>
 8003230:	4603      	mov	r3, r0
 8003232:	461c      	mov	r4, r3
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fe31 	bl	8002e9c <_ZN5RobotC1Ev>
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <main+0x8c>)
 800323c:	601c      	str	r4, [r3, #0]



	while (1)
 800323e:	e7fe      	b.n	800323e <main+0x6a>
	pc = new UART_PC_COM(&huart3);
 8003240:	4620      	mov	r0, r4
 8003242:	f000 fc02 	bl	8003a4a <_ZdlPv>
 8003246:	f000 fc13 	bl	8003a70 <__cxa_end_cleanup>
	robot = new Robot();
 800324a:	4620      	mov	r0, r4
 800324c:	f000 fbfd 	bl	8003a4a <_ZdlPv>
 8003250:	f000 fc0e 	bl	8003a70 <__cxa_end_cleanup>
 8003254:	20000094 	.word	0x20000094
 8003258:	20000114 	.word	0x20000114
 800325c:	2000027c 	.word	0x2000027c
 8003260:	20000278 	.word	0x20000278

08003264 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b090      	sub	sp, #64	; 0x40
 8003268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800326a:	2302      	movs	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800326e:	2301      	movs	r3, #1
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003272:	2310      	movs	r3, #16
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003276:	2302      	movs	r3, #2
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800327a:	2300      	movs	r3, #0
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800327e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fde1 	bl	8001e50 <HAL_RCC_OscConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <_Z18SystemClock_Configv+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800329e:	21d7      	movs	r1, #215	; 0xd7
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <_Z18SystemClock_Configv+0xa8>)
 80032a2:	f000 fa05 	bl	80036b0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a6:	230f      	movs	r3, #15
 80032a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032aa:	2302      	movs	r3, #2
 80032ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe ff8d 	bl	80021e0 <HAL_RCC_ClockConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <_Z18SystemClock_Configv+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032d6:	21e5      	movs	r1, #229	; 0xe5
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <_Z18SystemClock_Configv+0xa8>)
 80032da:	f000 f9e9 	bl	80036b0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80032de:	f7ff f823 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <_Z18SystemClock_Configv+0xac>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fb43 	bl	8001978 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80032f2:	2004      	movs	r0, #4
 80032f4:	f7fe fb56 	bl	80019a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003300:	f7fe fafa 	bl	80018f8 <HAL_NVIC_SetPriority>
}
 8003304:	bf00      	nop
 8003306:	3740      	adds	r7, #64	; 0x40
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	080047f0 	.word	0x080047f0
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <_ZL12MX_TIM4_Initv>:

/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800331c:	4a5f      	ldr	r2, [pc, #380]	; (800349c <_ZL12MX_TIM4_Initv+0x188>)
 800331e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64 - 1;
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 8003322:	223f      	movs	r2, #63	; 0x3f
 8003324:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003326:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000 - 1;
 800332c:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800332e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800333a:	4b57      	ldr	r3, [pc, #348]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003340:	4855      	ldr	r0, [pc, #340]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 8003342:	f7ff f97d 	bl	8002640 <HAL_TIM_Base_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <_ZL12MX_TIM4_Initv+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003356:	f44f 7182 	mov.w	r1, #260	; 0x104
 800335a:	4851      	ldr	r0, [pc, #324]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 800335c:	f000 f9a8 	bl	80036b0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336a:	4619      	mov	r1, r3
 800336c:	484a      	ldr	r0, [pc, #296]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800336e:	f7ff f876 	bl	800245e <HAL_TIM_ConfigClockSource>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <_ZL12MX_TIM4_Initv+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003382:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003386:	4846      	ldr	r0, [pc, #280]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 8003388:	f000 f992 	bl	80036b0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800338c:	4842      	ldr	r0, [pc, #264]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800338e:	f7ff f971 	bl	8002674 <HAL_TIM_PWM_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <_ZL12MX_TIM4_Initv+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033a2:	f240 110f 	movw	r1, #271	; 0x10f
 80033a6:	483e      	ldr	r0, [pc, #248]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 80033a8:	f000 f982 	bl	80036b0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033b4:	f107 0320 	add.w	r3, r7, #32
 80033b8:	4619      	mov	r1, r3
 80033ba:	4837      	ldr	r0, [pc, #220]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 80033bc:	f7ff fa24 	bl	8002808 <HAL_TIMEx_MasterConfigSynchronization>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <_ZL12MX_TIM4_Initv+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033d0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80033d4:	4832      	ldr	r0, [pc, #200]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 80033d6:	f000 f96b 	bl	80036b0 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033da:	2360      	movs	r3, #96	; 0x60
 80033dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80033de:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80033e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	2200      	movs	r2, #0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4829      	ldr	r0, [pc, #164]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 80033f4:	f7ff f984 	bl	8002700 <HAL_TIM_PWM_ConfigChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <_ZL12MX_TIM4_Initv+0xfe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003408:	f240 111f 	movw	r1, #287	; 0x11f
 800340c:	4824      	ldr	r0, [pc, #144]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 800340e:	f000 f94f 	bl	80036b0 <_Error_Handler>
  }

  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003412:	2304      	movs	r3, #4
 8003414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2204      	movs	r2, #4
 800341a:	4619      	mov	r1, r3
 800341c:	481e      	ldr	r0, [pc, #120]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800341e:	f7ff f96f 	bl	8002700 <HAL_TIM_PWM_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <_ZL12MX_TIM4_Initv+0x128>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003432:	f240 1125 	movw	r1, #293	; 0x125
 8003436:	481a      	ldr	r0, [pc, #104]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 8003438:	f000 f93a 	bl	80036b0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2208      	movs	r2, #8
 8003440:	4619      	mov	r1, r3
 8003442:	4815      	ldr	r0, [pc, #84]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 8003444:	f7ff f95c 	bl	8002700 <HAL_TIM_PWM_ConfigChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <_ZL12MX_TIM4_Initv+0x14e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003458:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800345c:	4810      	ldr	r0, [pc, #64]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 800345e:	f000 f927 	bl	80036b0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	220c      	movs	r2, #12
 8003466:	4619      	mov	r1, r3
 8003468:	480b      	ldr	r0, [pc, #44]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800346a:	f7ff f949 	bl	8002700 <HAL_TIM_PWM_ConfigChannel>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <_ZL12MX_TIM4_Initv+0x174>
  {
    _Error_Handler(__FILE__, __LINE__);
 800347e:	f240 112f 	movw	r1, #303	; 0x12f
 8003482:	4807      	ldr	r0, [pc, #28]	; (80034a0 <_ZL12MX_TIM4_Initv+0x18c>)
 8003484:	f000 f914 	bl	80036b0 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8003488:	4803      	ldr	r0, [pc, #12]	; (8003498 <_ZL12MX_TIM4_Initv+0x184>)
 800348a:	f000 f97b 	bl	8003784 <HAL_TIM_MspPostInit>

}
 800348e:	bf00      	nop
 8003490:	3738      	adds	r7, #56	; 0x38
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000094 	.word	0x20000094
 800349c:	40000800 	.word	0x40000800
 80034a0:	080047f0 	.word	0x080047f0

080034a4 <_ZL19MX_USART2_UART_Initv>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <_ZL19MX_USART2_UART_Initv+0x60>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034da:	4809      	ldr	r0, [pc, #36]	; (8003500 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80034dc:	f7ff fa8a 	bl	80029f4 <HAL_UART_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <_ZL19MX_USART2_UART_Initv+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034f0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80034f4:	4804      	ldr	r0, [pc, #16]	; (8003508 <_ZL19MX_USART2_UART_Initv+0x64>)
 80034f6:	f000 f8db 	bl	80036b0 <_Error_Handler>
  }

}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200000d4 	.word	0x200000d4
 8003504:	40004400 	.word	0x40004400
 8003508:	080047f0 	.word	0x080047f0

0800350c <_ZL19MX_USART3_UART_Initv>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <_ZL19MX_USART3_UART_Initv+0x60>)
 8003514:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800351c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003532:	220c      	movs	r2, #12
 8003534:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8003544:	f7ff fa56 	bl	80029f4 <HAL_UART_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <_ZL19MX_USART3_UART_Initv+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003558:	f240 1157 	movw	r1, #343	; 0x157
 800355c:	4804      	ldr	r0, [pc, #16]	; (8003570 <_ZL19MX_USART3_UART_Initv+0x64>)
 800355e:	f000 f8a7 	bl	80036b0 <_Error_Handler>
  }

}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000114 	.word	0x20000114
 800356c:	40004800 	.word	0x40004800
 8003570:	080047f0 	.word	0x080047f0

08003574 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800357a:	4a18      	ldr	r2, [pc, #96]	; (80035dc <_ZL11MX_DMA_Initv+0x68>)
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <_ZL11MX_DMA_Initv+0x68>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6153      	str	r3, [r2, #20]
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <_ZL11MX_DMA_Initv+0x68>)
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	200c      	movs	r0, #12
 8003598:	f7fe f9ae 	bl	80018f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800359c:	200c      	movs	r0, #12
 800359e:	f7fe f9df 	bl	8001960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	200d      	movs	r0, #13
 80035a8:	f7fe f9a6 	bl	80018f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035ac:	200d      	movs	r0, #13
 80035ae:	f7fe f9d7 	bl	8001960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2100      	movs	r1, #0
 80035b6:	2010      	movs	r0, #16
 80035b8:	f7fe f99e 	bl	80018f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80035bc:	2010      	movs	r0, #16
 80035be:	f7fe f9cf 	bl	8001960 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	2011      	movs	r0, #17
 80035c8:	f7fe f996 	bl	80018f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035cc:	2011      	movs	r0, #17
 80035ce:	f7fe f9c7 	bl	8001960 <HAL_NVIC_EnableIRQ>

}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000

080035e0 <_ZL12MX_GPIO_Initv>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f043 0310 	orr.w	r3, r3, #16
 80035f0:	6193      	str	r3, [r2, #24]
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fe:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	6193      	str	r3, [r2, #24]
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6193      	str	r3, [r2, #24]
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6193      	str	r3, [r2, #24]
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <_ZL12MX_GPIO_Initv+0xc0>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
 8003648:	2120      	movs	r1, #32
 800364a:	4816      	ldr	r0, [pc, #88]	; (80036a4 <_ZL12MX_GPIO_Initv+0xc4>)
 800364c:	f7fe fbea 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <_ZL12MX_GPIO_Initv+0xc8>)
 8003658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	4619      	mov	r1, r3
 8003664:	4811      	ldr	r0, [pc, #68]	; (80036ac <_ZL12MX_GPIO_Initv+0xcc>)
 8003666:	f7fe fafd 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800366a:	2320      	movs	r3, #32
 800366c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2302      	movs	r3, #2
 8003678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 0310 	add.w	r3, r7, #16
 800367e:	4619      	mov	r1, r3
 8003680:	4808      	ldr	r0, [pc, #32]	; (80036a4 <_ZL12MX_GPIO_Initv+0xc4>)
 8003682:	f7fe faef 	bl	8001c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	2028      	movs	r0, #40	; 0x28
 800368c:	f7fe f934 	bl	80018f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003690:	2028      	movs	r0, #40	; 0x28
 8003692:	f7fe f965 	bl	8001960 <HAL_NVIC_EnableIRQ>

}
 8003696:	bf00      	nop
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010800 	.word	0x40010800
 80036a8:	10110000 	.word	0x10110000
 80036ac:	40011000 	.word	0x40011000

080036b0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 80036ba:	e7fe      	b.n	80036ba <_Error_Handler+0xa>

080036bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_MspInit+0x98>)
{
 80036be:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80036c0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	619a      	str	r2, [r3, #24]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	f002 0201 	and.w	r2, r2, #1
 80036d0:	9200      	str	r2, [sp, #0]
 80036d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036da:	61da      	str	r2, [r3, #28]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e6:	f7fe f8f5 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	f06f 000b 	mvn.w	r0, #11
 80036f0:	4611      	mov	r1, r2
 80036f2:	f7fe f901 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80036f6:	2200      	movs	r2, #0
 80036f8:	f06f 000a 	mvn.w	r0, #10
 80036fc:	4611      	mov	r1, r2
 80036fe:	f7fe f8fb 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	f06f 0009 	mvn.w	r0, #9
 8003708:	4611      	mov	r1, r2
 800370a:	f7fe f8f5 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	f06f 0004 	mvn.w	r0, #4
 8003714:	4611      	mov	r1, r2
 8003716:	f7fe f8ef 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	f06f 0003 	mvn.w	r0, #3
 8003720:	4611      	mov	r1, r2
 8003722:	f7fe f8e9 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	f06f 0001 	mvn.w	r0, #1
 800372c:	4611      	mov	r1, r2
 800372e:	f7fe f8e3 	bl	80018f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003738:	4611      	mov	r1, r2
 800373a:	f7fe f8dd 	bl	80018f8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800373e:	4a06      	ldr	r2, [pc, #24]	; (8003758 <HAL_MspInit+0x9c>)
 8003740:	6853      	ldr	r3, [r2, #4]
 8003742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800374a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800374c:	b003      	add	sp, #12
 800374e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40010000 	.word	0x40010000

0800375c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM4)
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_TIM_Base_MspInit+0x24>)
{
 8003760:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8003762:	429a      	cmp	r2, r3
 8003764:	d10a      	bne.n	800377c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003766:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	f042 0204 	orr.w	r2, r2, #4
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800377c:	b002      	add	sp, #8
 800377e:	4770      	bx	lr
 8003780:	40000800 	.word	0x40000800

08003784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003784:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8003786:	6802      	ldr	r2, [r0, #0]
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_TIM_MspPostInit+0x28>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d10a      	bne.n	80037a4 <HAL_TIM_MspPostInit+0x20>
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8003794:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003798:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379a:	4669      	mov	r1, sp
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800379e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a0:	f7fe fa60 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037a4:	b005      	add	sp, #20
 80037a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037aa:	bf00      	nop
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40010c00 	.word	0x40010c00

080037b4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80037b6:	6803      	ldr	r3, [r0, #0]
 80037b8:	4a57      	ldr	r2, [pc, #348]	; (8003918 <HAL_UART_MspInit+0x164>)
{
 80037ba:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80037bc:	4293      	cmp	r3, r2
{
 80037be:	4605      	mov	r5, r0
  if(huart->Instance==USART2)
 80037c0:	d14a      	bne.n	8003858 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_UART_MspInit+0x168>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	4856      	ldr	r0, [pc, #344]	; (8003920 <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80037c6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80037ce:	61da      	str	r2, [r3, #28]
 80037d0:	69db      	ldr	r3, [r3, #28]

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80037d2:	4c54      	ldr	r4, [pc, #336]	; (8003924 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037dc:	230c      	movs	r3, #12
 80037de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f7fe fa3d 	bl	8001c64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80037ea:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_UART_MspInit+0x174>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ec:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80037ee:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f0:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037f2:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f4:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f6:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037f8:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037fa:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037fc:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80037fe:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003800:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003802:	f7fe f8e1 	bl	80019c8 <HAL_DMA_Init>
 8003806:	b118      	cbz	r0, 8003810 <HAL_UART_MspInit+0x5c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003808:	21bd      	movs	r1, #189	; 0xbd
 800380a:	4848      	ldr	r0, [pc, #288]	; (800392c <HAL_UART_MspInit+0x178>)
 800380c:	f7ff ff50 	bl	80036b0 <_Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003810:	f04f 0c10 	mov.w	ip, #16
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <HAL_UART_MspInit+0x17c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003816:	636c      	str	r4, [r5, #52]	; 0x34
 8003818:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800381a:	4c46      	ldr	r4, [pc, #280]	; (8003934 <HAL_UART_MspInit+0x180>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381c:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800381e:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003822:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003824:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003826:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003828:	60e2      	str	r2, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800382a:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800382c:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800382e:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003830:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003832:	f7fe f8c9 	bl	80019c8 <HAL_DMA_Init>
 8003836:	b118      	cbz	r0, 8003840 <HAL_UART_MspInit+0x8c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003838:	21cd      	movs	r1, #205	; 0xcd
 800383a:	483c      	ldr	r0, [pc, #240]	; (800392c <HAL_UART_MspInit+0x178>)
 800383c:	f7ff ff38 	bl	80036b0 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003844:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003846:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003848:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800384a:	f7fe f855 	bl	80018f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800384e:	2026      	movs	r0, #38	; 0x26

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003850:	f7fe f886 	bl	8001960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003854:	b006      	add	sp, #24
 8003856:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 8003858:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_UART_MspInit+0x184>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d1fa      	bne.n	8003854 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800385e:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8003862:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003864:	4835      	ldr	r0, [pc, #212]	; (800393c <HAL_UART_MspInit+0x188>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003866:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800386a:	61da      	str	r2, [r3, #28]
 800386c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800386e:	2600      	movs	r6, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f7fe f9ed 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800388a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388e:	482b      	ldr	r0, [pc, #172]	; (800393c <HAL_UART_MspInit+0x188>)
 8003890:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003892:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003898:	f7fe f9e4 	bl	8001c64 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800389c:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_UART_MspInit+0x18c>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800389e:	4c29      	ldr	r4, [pc, #164]	; (8003944 <HAL_UART_MspInit+0x190>)
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80038a0:	6853      	ldr	r3, [r2, #4]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038a2:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80038a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80038ac:	f043 0310 	orr.w	r3, r3, #16
 80038b0:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80038b2:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_UART_MspInit+0x194>)
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b4:	60a6      	str	r6, [r4, #8]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038b6:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ba:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038bc:	6126      	str	r6, [r4, #16]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038be:	60e3      	str	r3, [r4, #12]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c0:	6166      	str	r6, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80038c2:	61a6      	str	r6, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038c4:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038c6:	f7fe f87f 	bl	80019c8 <HAL_DMA_Init>
 80038ca:	b118      	cbz	r0, 80038d4 <HAL_UART_MspInit+0x120>
      _Error_Handler(__FILE__, __LINE__);
 80038cc:	21fd      	movs	r1, #253	; 0xfd
 80038ce:	4817      	ldr	r0, [pc, #92]	; (800392c <HAL_UART_MspInit+0x178>)
 80038d0:	f7ff feee 	bl	80036b0 <_Error_Handler>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038d4:	f04f 0c10 	mov.w	ip, #16
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_UART_MspInit+0x198>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80038da:	636c      	str	r4, [r5, #52]	; 0x34
 80038dc:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80038de:	4c1c      	ldr	r4, [pc, #112]	; (8003950 <HAL_UART_MspInit+0x19c>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038e0:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e2:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e6:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80038e8:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ea:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038ec:	60e2      	str	r2, [r4, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ee:	6123      	str	r3, [r4, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038f0:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80038f2:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038f4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80038f6:	f7fe f867 	bl	80019c8 <HAL_DMA_Init>
 80038fa:	b120      	cbz	r0, 8003906 <HAL_UART_MspInit+0x152>
      _Error_Handler(__FILE__, __LINE__);
 80038fc:	f240 110d 	movw	r1, #269	; 0x10d
 8003900:	480a      	ldr	r0, [pc, #40]	; (800392c <HAL_UART_MspInit+0x178>)
 8003902:	f7ff fed5 	bl	80036b0 <_Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800390a:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800390c:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800390e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003910:	f7fd fff2 	bl	80018f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003914:	2027      	movs	r0, #39	; 0x27
 8003916:	e79b      	b.n	8003850 <HAL_UART_MspInit+0x9c>
 8003918:	40004400 	.word	0x40004400
 800391c:	40021000 	.word	0x40021000
 8003920:	40010800 	.word	0x40010800
 8003924:	20000154 	.word	0x20000154
 8003928:	4002006c 	.word	0x4002006c
 800392c:	08004800 	.word	0x08004800
 8003930:	40020080 	.word	0x40020080
 8003934:	20000198 	.word	0x20000198
 8003938:	40004800 	.word	0x40004800
 800393c:	40011000 	.word	0x40011000
 8003940:	40010000 	.word	0x40010000
 8003944:	200001dc 	.word	0x200001dc
 8003948:	40020030 	.word	0x40020030
 800394c:	4002001c 	.word	0x4002001c
 8003950:	20000220 	.word	0x20000220

08003954 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003956:	f7fd ffab 	bl	80018b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800395a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800395e:	f7fe b82e 	b.w	80019be <HAL_SYSTICK_IRQHandler>
	...

08003964 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <DMA1_Channel2_IRQHandler+0x8>)
 8003966:	f7fe b8e9 	b.w	8001b3c <HAL_DMA_IRQHandler>
 800396a:	bf00      	nop
 800396c:	20000220 	.word	0x20000220

08003970 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <DMA1_Channel3_IRQHandler+0x8>)
 8003972:	f7fe b8e3 	b.w	8001b3c <HAL_DMA_IRQHandler>
 8003976:	bf00      	nop
 8003978:	200001dc 	.word	0x200001dc

0800397c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <DMA1_Channel6_IRQHandler+0x8>)
 800397e:	f7fe b8dd 	b.w	8001b3c <HAL_DMA_IRQHandler>
 8003982:	bf00      	nop
 8003984:	20000154 	.word	0x20000154

08003988 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <DMA1_Channel7_IRQHandler+0x8>)
 800398a:	f7fe b8d7 	b.w	8001b3c <HAL_DMA_IRQHandler>
 800398e:	bf00      	nop
 8003990:	20000198 	.word	0x20000198

08003994 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <USART2_IRQHandler+0x8>)
 8003996:	f7ff b989 	b.w	8002cac <HAL_UART_IRQHandler>
 800399a:	bf00      	nop
 800399c:	200000d4 	.word	0x200000d4

080039a0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <USART3_IRQHandler+0x8>)
 80039a2:	f7ff b983 	b.w	8002cac <HAL_UART_IRQHandler>
 80039a6:	bf00      	nop
 80039a8:	20000114 	.word	0x20000114

080039ac <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039b0:	f7fe ba42 	b.w	8001e38 <HAL_GPIO_EXTI_IRQHandler>

080039b4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <SystemInit+0x40>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <SystemInit+0x44>)
 80039c2:	400a      	ands	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80039cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039d0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039d8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80039e0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80039e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80039e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80039e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <SystemInit+0x48>)
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	f8ff0000 	.word	0xf8ff0000
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a02:	e003      	b.n	8003a0c <LoopCopyDataInit>

08003a04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a0a:	3104      	adds	r1, #4

08003a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a0c:	480a      	ldr	r0, [pc, #40]	; (8003a38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a14:	d3f6      	bcc.n	8003a04 <CopyDataInit>
  ldr r2, =_sbss
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a18:	e002      	b.n	8003a20 <LoopFillZerobss>

08003a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a1c:	f842 3b04 	str.w	r3, [r2], #4

08003a20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a24:	d3f9      	bcc.n	8003a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a26:	f7ff ffc5 	bl	80039b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f000 fd39 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a2e:	f7ff fbd1 	bl	80031d4 <main>
  bx lr
 8003a32:	4770      	bx	lr
  ldr r3, =_sidata
 8003a34:	08004b90 	.word	0x08004b90
  ldr r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a3c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003a40:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003a44:	200002a4 	.word	0x200002a4

08003a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a48:	e7fe      	b.n	8003a48 <ADC1_2_IRQHandler>

08003a4a <_ZdlPv>:
 8003a4a:	f000 bd55 	b.w	80044f8 <free>

08003a4e <_Znwj>:
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	2800      	cmp	r0, #0
 8003a52:	bf14      	ite	ne
 8003a54:	4604      	movne	r4, r0
 8003a56:	2401      	moveq	r4, #1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 fd45 	bl	80044e8 <malloc>
 8003a5e:	b930      	cbnz	r0, 8003a6e <_Znwj+0x20>
 8003a60:	f000 fb50 	bl	8004104 <_ZSt15get_new_handlerv>
 8003a64:	b908      	cbnz	r0, 8003a6a <_Znwj+0x1c>
 8003a66:	f000 fd13 	bl	8004490 <abort>
 8003a6a:	4780      	blx	r0
 8003a6c:	e7f4      	b.n	8003a58 <_Znwj+0xa>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <__cxa_end_cleanup>:
 8003a70:	b41e      	push	{r1, r2, r3, r4}
 8003a72:	f000 f89c 	bl	8003bae <__gnu_end_cleanup>
 8003a76:	bc1e      	pop	{r1, r2, r3, r4}
 8003a78:	f7fd fcda 	bl	8001430 <_Unwind_Resume>

08003a7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003a7c:	7803      	ldrb	r3, [r0, #0]
 8003a7e:	2b47      	cmp	r3, #71	; 0x47
 8003a80:	d117      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003a82:	7843      	ldrb	r3, [r0, #1]
 8003a84:	2b4e      	cmp	r3, #78	; 0x4e
 8003a86:	d114      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003a88:	7883      	ldrb	r3, [r0, #2]
 8003a8a:	2b55      	cmp	r3, #85	; 0x55
 8003a8c:	d111      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003a8e:	78c3      	ldrb	r3, [r0, #3]
 8003a90:	2b43      	cmp	r3, #67	; 0x43
 8003a92:	d10e      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003a94:	7903      	ldrb	r3, [r0, #4]
 8003a96:	2b43      	cmp	r3, #67	; 0x43
 8003a98:	d10b      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003a9a:	7943      	ldrb	r3, [r0, #5]
 8003a9c:	2b2b      	cmp	r3, #43	; 0x2b
 8003a9e:	d108      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003aa0:	7983      	ldrb	r3, [r0, #6]
 8003aa2:	2b2b      	cmp	r3, #43	; 0x2b
 8003aa4:	d105      	bne.n	8003ab2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003aa6:	79c0      	ldrb	r0, [r0, #7]
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	bf8c      	ite	hi
 8003aac:	2000      	movhi	r0, #0
 8003aae:	2001      	movls	r0, #1
 8003ab0:	4770      	bx	lr
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	4770      	bx	lr
	...

08003ab8 <__cxa_type_match>:
 8003ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003abc:	461e      	mov	r6, r3
 8003abe:	7803      	ldrb	r3, [r0, #0]
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	2b47      	cmp	r3, #71	; 0x47
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	79c1      	ldrb	r1, [r0, #7]
 8003ac8:	d147      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003aca:	7843      	ldrb	r3, [r0, #1]
 8003acc:	2b4e      	cmp	r3, #78	; 0x4e
 8003ace:	d144      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003ad0:	7883      	ldrb	r3, [r0, #2]
 8003ad2:	2b55      	cmp	r3, #85	; 0x55
 8003ad4:	d141      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003ad6:	78c3      	ldrb	r3, [r0, #3]
 8003ad8:	2b43      	cmp	r3, #67	; 0x43
 8003ada:	d13e      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003adc:	7903      	ldrb	r3, [r0, #4]
 8003ade:	2b46      	cmp	r3, #70	; 0x46
 8003ae0:	d13b      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003ae2:	7943      	ldrb	r3, [r0, #5]
 8003ae4:	2b4f      	cmp	r3, #79	; 0x4f
 8003ae6:	d138      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003ae8:	7983      	ldrb	r3, [r0, #6]
 8003aea:	2b52      	cmp	r3, #82	; 0x52
 8003aec:	d135      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003aee:	2900      	cmp	r1, #0
 8003af0:	d133      	bne.n	8003b5a <__cxa_type_match+0xa2>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4608      	mov	r0, r1
 8003af6:	2400      	movs	r4, #0
 8003af8:	9401      	str	r4, [sp, #4]
 8003afa:	bb33      	cbnz	r3, 8003b4a <__cxa_type_match+0x92>
 8003afc:	bb38      	cbnz	r0, 8003b4e <__cxa_type_match+0x96>
 8003afe:	2901      	cmp	r1, #1
 8003b00:	bf0a      	itet	eq
 8003b02:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8003b06:	f1a2 0320 	subne.w	r3, r2, #32
 8003b0a:	3b78      	subeq	r3, #120	; 0x78
 8003b0c:	2901      	cmp	r1, #1
 8003b0e:	bf0c      	ite	eq
 8003b10:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8003b14:	3258      	addne	r2, #88	; 0x58
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4798      	blx	r3
 8003b22:	b1b0      	cbz	r0, 8003b52 <__cxa_type_match+0x9a>
 8003b24:	2702      	movs	r7, #2
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	aa01      	add	r2, sp, #4
 8003b30:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003b34:	4621      	mov	r1, r4
 8003b36:	2301      	movs	r3, #1
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47c0      	blx	r8
 8003b3c:	b158      	cbz	r0, 8003b56 <__cxa_type_match+0x9e>
 8003b3e:	9b01      	ldr	r3, [sp, #4]
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	4638      	mov	r0, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4a:	4c08      	ldr	r4, [pc, #32]	; (8003b6c <__cxa_type_match+0xb4>)
 8003b4c:	e7e5      	b.n	8003b1a <__cxa_type_match+0x62>
 8003b4e:	4c08      	ldr	r4, [pc, #32]	; (8003b70 <__cxa_type_match+0xb8>)
 8003b50:	e7e3      	b.n	8003b1a <__cxa_type_match+0x62>
 8003b52:	2701      	movs	r7, #1
 8003b54:	e7ea      	b.n	8003b2c <__cxa_type_match+0x74>
 8003b56:	4607      	mov	r7, r0
 8003b58:	e7f3      	b.n	8003b42 <__cxa_type_match+0x8a>
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7ff ff8e 	bl	8003a7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003b60:	f080 0001 	eor.w	r0, r0, #1
 8003b64:	b2c0      	uxtb	r0, r0
 8003b66:	2300      	movs	r3, #0
 8003b68:	e7c5      	b.n	8003af6 <__cxa_type_match+0x3e>
 8003b6a:	bf00      	nop
 8003b6c:	080048a8 	.word	0x080048a8
 8003b70:	080048b0 	.word	0x080048b0

08003b74 <__cxa_begin_cleanup>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	f000 fc84 	bl	8004484 <__cxa_get_globals>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f1a4 0120 	sub.w	r1, r4, #32
 8003b84:	f7ff ff7a 	bl	8003a7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003b88:	b160      	cbz	r0, 8003ba4 <__cxa_begin_cleanup+0x30>
 8003b8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f844 3c04 	str.w	r3, [r4, #-4]
 8003b96:	d103      	bne.n	8003ba0 <__cxa_begin_cleanup+0x2c>
 8003b98:	6893      	ldr	r3, [r2, #8]
 8003b9a:	f844 3c08 	str.w	r3, [r4, #-8]
 8003b9e:	6091      	str	r1, [r2, #8]
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	bd10      	pop	{r4, pc}
 8003ba4:	6893      	ldr	r3, [r2, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f9      	beq.n	8003b9e <__cxa_begin_cleanup+0x2a>
 8003baa:	f000 fc53 	bl	8004454 <_ZSt9terminatev>

08003bae <__gnu_end_cleanup>:
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	f000 fc68 	bl	8004484 <__cxa_get_globals>
 8003bb4:	6882      	ldr	r2, [r0, #8]
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	b90a      	cbnz	r2, 8003bbe <__gnu_end_cleanup+0x10>
 8003bba:	f000 fc4b 	bl	8004454 <_ZSt9terminatev>
 8003bbe:	f102 0420 	add.w	r4, r2, #32
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff ff5a 	bl	8003a7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003bc8:	b140      	cbz	r0, 8003bdc <__gnu_end_cleanup+0x2e>
 8003bca:	69d3      	ldr	r3, [r2, #28]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	61d3      	str	r3, [r2, #28]
 8003bd0:	b913      	cbnz	r3, 8003bd8 <__gnu_end_cleanup+0x2a>
 8003bd2:	6990      	ldr	r0, [r2, #24]
 8003bd4:	6088      	str	r0, [r1, #8]
 8003bd6:	6193      	str	r3, [r2, #24]
 8003bd8:	4620      	mov	r0, r4
 8003bda:	bd10      	pop	{r4, pc}
 8003bdc:	6088      	str	r0, [r1, #8]
 8003bde:	e7fb      	b.n	8003bd8 <__gnu_end_cleanup+0x2a>

08003be0 <_ZL12read_uleb128PKhPm>:
 8003be0:	2300      	movs	r3, #0
 8003be2:	b570      	push	{r4, r5, r6, lr}
 8003be4:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8003be8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8003bec:	f810 5b01 	ldrb.w	r5, [r0], #1
 8003bf0:	1994      	adds	r4, r2, r6
 8003bf2:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8003bf6:	40a2      	lsls	r2, r4
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	062a      	lsls	r2, r5, #24
 8003bfc:	d4f4      	bmi.n	8003be8 <_ZL12read_uleb128PKhPm+0x8>
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	bd70      	pop	{r4, r5, r6, pc}

08003c02 <_ZL12read_sleb128PKhPl>:
 8003c02:	2300      	movs	r3, #0
 8003c04:	461a      	mov	r2, r3
 8003c06:	b530      	push	{r4, r5, lr}
 8003c08:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003c0c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8003c10:	4095      	lsls	r5, r2
 8003c12:	432b      	orrs	r3, r5
 8003c14:	0625      	lsls	r5, r4, #24
 8003c16:	f102 0207 	add.w	r2, r2, #7
 8003c1a:	d4f5      	bmi.n	8003c08 <_ZL12read_sleb128PKhPl+0x6>
 8003c1c:	2a1f      	cmp	r2, #31
 8003c1e:	d806      	bhi.n	8003c2e <_ZL12read_sleb128PKhPl+0x2c>
 8003c20:	0664      	lsls	r4, r4, #25
 8003c22:	bf42      	ittt	mi
 8003c24:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8003c28:	fa04 f202 	lslmi.w	r2, r4, r2
 8003c2c:	4313      	orrmi	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	bd30      	pop	{r4, r5, pc}

08003c32 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8003c32:	2850      	cmp	r0, #80	; 0x50
 8003c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c36:	4605      	mov	r5, r0
 8003c38:	460e      	mov	r6, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	461f      	mov	r7, r3
 8003c3e:	d107      	bne.n	8003c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8003c40:	1cd0      	adds	r0, r2, #3
 8003c42:	f020 0003 	bic.w	r0, r0, #3
 8003c46:	f850 3b04 	ldr.w	r3, [r0], #4
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	b003      	add	sp, #12
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c50:	f000 030f 	and.w	r3, r0, #15
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d82e      	bhi.n	8003cb6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8003c58:	e8df f003 	tbb	[pc, r3]
 8003c5c:	251d0725 	.word	0x251d0725
 8003c60:	2d2d2d29 	.word	0x2d2d2d29
 8003c64:	2521182d 	.word	0x2521182d
 8003c68:	29          	.byte	0x29
 8003c69:	00          	.byte	0x00
 8003c6a:	a901      	add	r1, sp, #4
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ffb7 	bl	8003be0 <_ZL12read_uleb128PKhPm>
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0e8      	beq.n	8003c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8003c78:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8003c7c:	2a10      	cmp	r2, #16
 8003c7e:	bf08      	it	eq
 8003c80:	4626      	moveq	r6, r4
 8003c82:	062a      	lsls	r2, r5, #24
 8003c84:	4433      	add	r3, r6
 8003c86:	bf48      	it	mi
 8003c88:	681b      	ldrmi	r3, [r3, #0]
 8003c8a:	e7de      	b.n	8003c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8003c8c:	a901      	add	r1, sp, #4
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7ff ffb7 	bl	8003c02 <_ZL12read_sleb128PKhPl>
 8003c94:	e7ed      	b.n	8003c72 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8003c96:	4620      	mov	r0, r4
 8003c98:	f830 3b02 	ldrh.w	r3, [r0], #2
 8003c9c:	e7ea      	b.n	8003c74 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8003ca4:	e7e6      	b.n	8003c74 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f850 3b04 	ldr.w	r3, [r0], #4
 8003cac:	e7e2      	b.n	8003c74 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f850 3b08 	ldr.w	r3, [r0], #8
 8003cb4:	e7de      	b.n	8003c74 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8003cb6:	f000 fbeb 	bl	8004490 <abort>

08003cba <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8003cba:	b508      	push	{r3, lr}
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2bff      	cmp	r3, #255	; 0xff
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	d007      	beq.n	8003cd4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8003cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d00d      	beq.n	8003ce8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8003ccc:	d804      	bhi.n	8003cd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8003cce:	b10b      	cbz	r3, 8003cd4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d107      	bne.n	8003ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bd08      	pop	{r3, pc}
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d00d      	beq.n	8003cf8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d0f9      	beq.n	8003cd4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d005      	beq.n	8003cf0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8003ce4:	f000 fbd4 	bl	8004490 <abort>
 8003ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cec:	f7fd bda2 	b.w	8001834 <_Unwind_GetTextRelBase>
 8003cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cf4:	f7fd bda2 	b.w	800183c <_Unwind_GetDataRelBase>
 8003cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cfc:	f7fd bd8a 	b.w	8001814 <_Unwind_GetRegionStart>

08003d00 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460c      	mov	r4, r1
 8003d04:	4601      	mov	r1, r0
 8003d06:	4620      	mov	r0, r4
 8003d08:	4615      	mov	r5, r2
 8003d0a:	461e      	mov	r6, r3
 8003d0c:	f7ff ffd5 	bl	8003cba <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003d10:	4633      	mov	r3, r6
 8003d12:	462a      	mov	r2, r5
 8003d14:	4601      	mov	r1, r0
 8003d16:	4620      	mov	r0, r4
 8003d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d1c:	f7ff bf89 	b.w	8003c32 <_ZL28read_encoded_value_with_basehjPKhPj>

08003d20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8003d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d22:	460e      	mov	r6, r1
 8003d24:	4614      	mov	r4, r2
 8003d26:	4605      	mov	r5, r0
 8003d28:	b318      	cbz	r0, 8003d72 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 8003d2a:	f7fd fd73 	bl	8001814 <_Unwind_GetRegionStart>
 8003d2e:	6020      	str	r0, [r4, #0]
 8003d30:	7831      	ldrb	r1, [r6, #0]
 8003d32:	1c72      	adds	r2, r6, #1
 8003d34:	29ff      	cmp	r1, #255	; 0xff
 8003d36:	d01d      	beq.n	8003d74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8003d38:	1d23      	adds	r3, r4, #4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7ff ffe0 	bl	8003d00 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8003d40:	4602      	mov	r2, r0
 8003d42:	7813      	ldrb	r3, [r2, #0]
 8003d44:	1c50      	adds	r0, r2, #1
 8003d46:	2bff      	cmp	r3, #255	; 0xff
 8003d48:	7523      	strb	r3, [r4, #20]
 8003d4a:	d015      	beq.n	8003d78 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	a901      	add	r1, sp, #4
 8003d50:	7523      	strb	r3, [r4, #20]
 8003d52:	f7ff ff45 	bl	8003be0 <_ZL12read_uleb128PKhPm>
 8003d56:	9b01      	ldr	r3, [sp, #4]
 8003d58:	4403      	add	r3, r0
 8003d5a:	60e3      	str	r3, [r4, #12]
 8003d5c:	7803      	ldrb	r3, [r0, #0]
 8003d5e:	a901      	add	r1, sp, #4
 8003d60:	7563      	strb	r3, [r4, #21]
 8003d62:	3001      	adds	r0, #1
 8003d64:	f7ff ff3c 	bl	8003be0 <_ZL12read_uleb128PKhPm>
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	4403      	add	r3, r0
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
 8003d72:	e7dc      	b.n	8003d2e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8003d74:	6060      	str	r0, [r4, #4]
 8003d76:	e7e4      	b.n	8003d42 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e7ee      	b.n	8003d5a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

08003d7c <_Unwind_GetGR>:
 8003d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d7e:	ab03      	add	r3, sp, #12
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	460a      	mov	r2, r1
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7fc ffa8 	bl	8000cdc <_Unwind_VRS_Get>
 8003d8c:	9803      	ldr	r0, [sp, #12]
 8003d8e:	b005      	add	sp, #20
 8003d90:	f85d fb04 	ldr.w	pc, [sp], #4

08003d94 <__gxx_personality_v0>:
 8003d94:	2300      	movs	r3, #0
 8003d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	b091      	sub	sp, #68	; 0x44
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	f000 0303 	and.w	r3, r0, #3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	4607      	mov	r7, r0
 8003da6:	460c      	mov	r4, r1
 8003da8:	4616      	mov	r6, r2
 8003daa:	d011      	beq.n	8003dd0 <__gxx_personality_v0+0x3c>
 8003dac:	d303      	bcc.n	8003db6 <__gxx_personality_v0+0x22>
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <__gxx_personality_v0+0x26>
 8003db2:	f000 fb6d 	bl	8004490 <abort>
 8003db6:	0702      	lsls	r2, r0, #28
 8003db8:	d51a      	bpl.n	8003df0 <__gxx_personality_v0+0x5c>
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7fd fd13 	bl	80017e8 <__gnu_unwind_frame>
 8003dc2:	b118      	cbz	r0, 8003dcc <__gxx_personality_v0+0x38>
 8003dc4:	2009      	movs	r0, #9
 8003dc6:	b011      	add	sp, #68	; 0x44
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	2008      	movs	r0, #8
 8003dce:	e7fa      	b.n	8003dc6 <__gxx_personality_v0+0x32>
 8003dd0:	f000 0508 	and.w	r5, r0, #8
 8003dd4:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8003dd8:	bb85      	cbnz	r5, 8003e3c <__gxx_personality_v0+0xa8>
 8003dda:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8003dde:	4610      	mov	r0, r2
 8003de0:	210d      	movs	r1, #13
 8003de2:	f7ff ffcb 	bl	8003d7c <_Unwind_GetGR>
 8003de6:	4581      	cmp	r9, r0
 8003de8:	f040 8140 	bne.w	800406c <__gxx_personality_v0+0x2d8>
 8003dec:	2506      	movs	r5, #6
 8003dee:	e000      	b.n	8003df2 <__gxx_personality_v0+0x5e>
 8003df0:	2501      	movs	r5, #1
 8003df2:	ab10      	add	r3, sp, #64	; 0x40
 8003df4:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f007 0708 	and.w	r7, r7, #8
 8003e00:	433d      	orrs	r5, r7
 8003e02:	220c      	movs	r2, #12
 8003e04:	4619      	mov	r1, r3
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7fc ff8e 	bl	8000d28 <_Unwind_VRS_Set>
 8003e0c:	2d06      	cmp	r5, #6
 8003e0e:	f040 8139 	bne.w	8004084 <__gxx_personality_v0+0x2f0>
 8003e12:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8003e16:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003e18:	f1b8 0f00 	cmp.w	r8, #0
 8003e1c:	bf0c      	ite	eq
 8003e1e:	f04f 0a01 	moveq.w	sl, #1
 8003e22:	f04f 0a03 	movne.w	sl, #3
 8003e26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e28:	f015 0508 	ands.w	r5, r5, #8
 8003e2c:	f000 80ce 	beq.w	8003fcc <__gxx_personality_v0+0x238>
 8003e30:	f1ba 0f01 	cmp.w	sl, #1
 8003e34:	f040 80c6 	bne.w	8003fc4 <__gxx_personality_v0+0x230>
 8003e38:	f000 fb0c 	bl	8004454 <_ZSt9terminatev>
 8003e3c:	2502      	movs	r5, #2
 8003e3e:	e7d8      	b.n	8003df2 <__gxx_personality_v0+0x5e>
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	429f      	cmp	r7, r3
 8003e46:	f080 8137 	bcs.w	80040b8 <__gxx_personality_v0+0x324>
 8003e4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4e:	f1b8 0f00 	cmp.w	r8, #0
 8003e52:	d001      	beq.n	8003e58 <__gxx_personality_v0+0xc4>
 8003e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e56:	4498      	add	r8, r3
 8003e58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e5a:	b117      	cbz	r7, 8003e62 <__gxx_personality_v0+0xce>
 8003e5c:	1e78      	subs	r0, r7, #1
 8003e5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003e60:	4407      	add	r7, r0
 8003e62:	f1b8 0f00 	cmp.w	r8, #0
 8003e66:	d0a8      	beq.n	8003dba <__gxx_personality_v0+0x26>
 8003e68:	2f00      	cmp	r7, #0
 8003e6a:	f000 80a1 	beq.w	8003fb0 <__gxx_personality_v0+0x21c>
 8003e6e:	f015 0308 	ands.w	r3, r5, #8
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	d036      	beq.n	8003ee4 <__gxx_personality_v0+0x150>
 8003e76:	2347      	movs	r3, #71	; 0x47
 8003e78:	7023      	strb	r3, [r4, #0]
 8003e7a:	234e      	movs	r3, #78	; 0x4e
 8003e7c:	7063      	strb	r3, [r4, #1]
 8003e7e:	2355      	movs	r3, #85	; 0x55
 8003e80:	70a3      	strb	r3, [r4, #2]
 8003e82:	2343      	movs	r3, #67	; 0x43
 8003e84:	70e3      	strb	r3, [r4, #3]
 8003e86:	2346      	movs	r3, #70	; 0x46
 8003e88:	7123      	strb	r3, [r4, #4]
 8003e8a:	234f      	movs	r3, #79	; 0x4f
 8003e8c:	7163      	strb	r3, [r4, #5]
 8003e8e:	2352      	movs	r3, #82	; 0x52
 8003e90:	71a3      	strb	r3, [r4, #6]
 8003e92:	2300      	movs	r3, #0
 8003e94:	71e3      	strb	r3, [r4, #7]
 8003e96:	f04f 0a00 	mov.w	sl, #0
 8003e9a:	f06f 0b03 	mvn.w	fp, #3
 8003e9e:	a907      	add	r1, sp, #28
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff feae 	bl	8003c02 <_ZL12read_sleb128PKhPl>
 8003ea6:	a908      	add	r1, sp, #32
 8003ea8:	9003      	str	r0, [sp, #12]
 8003eaa:	f7ff feaa 	bl	8003c02 <_ZL12read_sleb128PKhPl>
 8003eae:	9a07      	ldr	r2, [sp, #28]
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	d076      	beq.n	8003fa2 <__gxx_personality_v0+0x20e>
 8003eb4:	dd3d      	ble.n	8003f32 <__gxx_personality_v0+0x19e>
 8003eb6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8003eba:	28ff      	cmp	r0, #255	; 0xff
 8003ebc:	d035      	beq.n	8003f2a <__gxx_personality_v0+0x196>
 8003ebe:	f000 0307 	and.w	r3, r0, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	f63f af75 	bhi.w	8003db2 <__gxx_personality_v0+0x1e>
 8003ec8:	a101      	add	r1, pc, #4	; (adr r1, 8003ed0 <__gxx_personality_v0+0x13c>)
 8003eca:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f2f 	.word	0x08003f2f
 8003ed4:	08003db3 	.word	0x08003db3
 8003ed8:	08003ef7 	.word	0x08003ef7
 8003edc:	08003f2f 	.word	0x08003f2f
 8003ee0:	08003f27 	.word	0x08003f27
 8003ee4:	79e3      	ldrb	r3, [r4, #7]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	bf0c      	ite	eq
 8003eea:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8003eee:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	e7cf      	b.n	8003e96 <__gxx_personality_v0+0x102>
 8003ef6:	2702      	movs	r7, #2
 8003ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003efa:	ab09      	add	r3, sp, #36	; 0x24
 8003efc:	fb07 1212 	mls	r2, r7, r2, r1
 8003f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f02:	f7ff fe96 	bl	8003c32 <_ZL28read_encoded_value_with_basehjPKhPj>
 8003f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f08:	b369      	cbz	r1, 8003f66 <__gxx_personality_v0+0x1d2>
 8003f0a:	b12c      	cbz	r4, 8003f18 <__gxx_personality_v0+0x184>
 8003f0c:	ab04      	add	r3, sp, #16
 8003f0e:	2200      	movs	r2, #0
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7ff fdd1 	bl	8003ab8 <__cxa_type_match>
 8003f16:	bb30      	cbnz	r0, 8003f66 <__gxx_personality_v0+0x1d2>
 8003f18:	9f08      	ldr	r7, [sp, #32]
 8003f1a:	2f00      	cmp	r7, #0
 8003f1c:	d044      	beq.n	8003fa8 <__gxx_personality_v0+0x214>
 8003f1e:	9b03      	ldr	r3, [sp, #12]
 8003f20:	443b      	add	r3, r7
 8003f22:	461f      	mov	r7, r3
 8003f24:	e7bb      	b.n	8003e9e <__gxx_personality_v0+0x10a>
 8003f26:	2708      	movs	r7, #8
 8003f28:	e7e6      	b.n	8003ef8 <__gxx_personality_v0+0x164>
 8003f2a:	2700      	movs	r7, #0
 8003f2c:	e7e4      	b.n	8003ef8 <__gxx_personality_v0+0x164>
 8003f2e:	2704      	movs	r7, #4
 8003f30:	e7e2      	b.n	8003ef8 <__gxx_personality_v0+0x164>
 8003f32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003f34:	3201      	adds	r2, #1
 8003f36:	b36c      	cbz	r4, 8003f94 <__gxx_personality_v0+0x200>
 8003f38:	9b02      	ldr	r3, [sp, #8]
 8003f3a:	bb5b      	cbnz	r3, 8003f94 <__gxx_personality_v0+0x200>
 8003f3c:	fb0b 7202 	mla	r2, fp, r2, r7
 8003f40:	9b04      	ldr	r3, [sp, #16]
 8003f42:	1f17      	subs	r7, r2, #4
 8003f44:	9306      	str	r3, [sp, #24]
 8003f46:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003f4a:	b141      	cbz	r1, 8003f5e <__gxx_personality_v0+0x1ca>
 8003f4c:	ab06      	add	r3, sp, #24
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4439      	add	r1, r7
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff fdb0 	bl	8003ab8 <__cxa_type_match>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d0f4      	beq.n	8003f46 <__gxx_personality_v0+0x1b2>
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	f081 0101 	eor.w	r1, r1, #1
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d0d8      	beq.n	8003f18 <__gxx_personality_v0+0x184>
 8003f66:	f04f 0a03 	mov.w	sl, #3
 8003f6a:	9f07      	ldr	r7, [sp, #28]
 8003f6c:	07eb      	lsls	r3, r5, #31
 8003f6e:	d527      	bpl.n	8003fc0 <__gxx_personality_v0+0x22c>
 8003f70:	f1ba 0f02 	cmp.w	sl, #2
 8003f74:	f43f af21 	beq.w	8003dba <__gxx_personality_v0+0x26>
 8003f78:	210d      	movs	r1, #13
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	9d04      	ldr	r5, [sp, #16]
 8003f7e:	f7ff fefd 	bl	8003d7c <_Unwind_GetGR>
 8003f82:	6265      	str	r5, [r4, #36]	; 0x24
 8003f84:	6220      	str	r0, [r4, #32]
 8003f86:	62a7      	str	r7, [r4, #40]	; 0x28
 8003f88:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8003f8c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8003f90:	2006      	movs	r0, #6
 8003f92:	e718      	b.n	8003dc6 <__gxx_personality_v0+0x32>
 8003f94:	fb0b f202 	mul.w	r2, fp, r2
 8003f98:	58b9      	ldr	r1, [r7, r2]
 8003f9a:	fab1 f181 	clz	r1, r1
 8003f9e:	0949      	lsrs	r1, r1, #5
 8003fa0:	e7df      	b.n	8003f62 <__gxx_personality_v0+0x1ce>
 8003fa2:	f04f 0a01 	mov.w	sl, #1
 8003fa6:	e7b7      	b.n	8003f18 <__gxx_personality_v0+0x184>
 8003fa8:	f1ba 0f00 	cmp.w	sl, #0
 8003fac:	f43f af05 	beq.w	8003dba <__gxx_personality_v0+0x26>
 8003fb0:	f04f 0a02 	mov.w	sl, #2
 8003fb4:	e7da      	b.n	8003f6c <__gxx_personality_v0+0x1d8>
 8003fb6:	2700      	movs	r7, #0
 8003fb8:	f04f 0a01 	mov.w	sl, #1
 8003fbc:	46b8      	mov	r8, r7
 8003fbe:	e7d5      	b.n	8003f6c <__gxx_personality_v0+0x1d8>
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	e731      	b.n	8003e28 <__gxx_personality_v0+0x94>
 8003fc4:	2f00      	cmp	r7, #0
 8003fc6:	da23      	bge.n	8004010 <__gxx_personality_v0+0x27c>
 8003fc8:	f000 fa56 	bl	8004478 <_ZSt10unexpectedv>
 8003fcc:	f1ba 0f01 	cmp.w	sl, #1
 8003fd0:	d102      	bne.n	8003fd8 <__gxx_personality_v0+0x244>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f9c8 	bl	8004368 <__cxa_call_terminate>
 8003fd8:	2f00      	cmp	r7, #0
 8003fda:	da19      	bge.n	8004010 <__gxx_personality_v0+0x27c>
 8003fdc:	aa0a      	add	r2, sp, #40	; 0x28
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff fe9e 	bl	8003d20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8003fea:	f7ff fe66 	bl	8003cba <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003fee:	f06f 0303 	mvn.w	r3, #3
 8003ff2:	fb07 3203 	mla	r2, r7, r3, r3
 8003ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ff8:	900c      	str	r0, [sp, #48]	; 0x30
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004000:	b10a      	cbz	r2, 8004006 <__gxx_personality_v0+0x272>
 8004002:	3501      	adds	r5, #1
 8004004:	e7fa      	b.n	8003ffc <__gxx_personality_v0+0x268>
 8004006:	2204      	movs	r2, #4
 8004008:	62a5      	str	r5, [r4, #40]	; 0x28
 800400a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800400c:	6322      	str	r2, [r4, #48]	; 0x30
 800400e:	6363      	str	r3, [r4, #52]	; 0x34
 8004010:	ab10      	add	r3, sp, #64	; 0x40
 8004012:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	4630      	mov	r0, r6
 800401c:	461a      	mov	r2, r3
 800401e:	4619      	mov	r1, r3
 8004020:	f7fc fe82 	bl	8000d28 <_Unwind_VRS_Set>
 8004024:	ab10      	add	r3, sp, #64	; 0x40
 8004026:	f843 7d20 	str.w	r7, [r3, #-32]!
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2201      	movs	r2, #1
 8004030:	4619      	mov	r1, r3
 8004032:	4630      	mov	r0, r6
 8004034:	f7fc fe78 	bl	8000d28 <_Unwind_VRS_Set>
 8004038:	210f      	movs	r1, #15
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff fe9e 	bl	8003d7c <_Unwind_GetGR>
 8004040:	f000 0001 	and.w	r0, r0, #1
 8004044:	ab10      	add	r3, sp, #64	; 0x40
 8004046:	ea40 0008 	orr.w	r0, r0, r8
 800404a:	f843 0d24 	str.w	r0, [r3, #-36]!
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	220f      	movs	r2, #15
 8004054:	4619      	mov	r1, r3
 8004056:	4630      	mov	r0, r6
 8004058:	f7fc fe66 	bl	8000d28 <_Unwind_VRS_Set>
 800405c:	f1ba 0f02 	cmp.w	sl, #2
 8004060:	d102      	bne.n	8004068 <__gxx_personality_v0+0x2d4>
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff fd86 	bl	8003b74 <__cxa_begin_cleanup>
 8004068:	2007      	movs	r0, #7
 800406a:	e6ac      	b.n	8003dc6 <__gxx_personality_v0+0x32>
 800406c:	aa10      	add	r2, sp, #64	; 0x40
 800406e:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8004072:	9200      	str	r2, [sp, #0]
 8004074:	4643      	mov	r3, r8
 8004076:	220c      	movs	r2, #12
 8004078:	4641      	mov	r1, r8
 800407a:	4630      	mov	r0, r6
 800407c:	f045 0502 	orr.w	r5, r5, #2
 8004080:	f7fc fe52 	bl	8000d28 <_Unwind_VRS_Set>
 8004084:	4630      	mov	r0, r6
 8004086:	f7fd fbcb 	bl	8001820 <_Unwind_GetLanguageSpecificData>
 800408a:	4681      	mov	r9, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	f43f ae94 	beq.w	8003dba <__gxx_personality_v0+0x26>
 8004092:	aa0a      	add	r2, sp, #40	; 0x28
 8004094:	4601      	mov	r1, r0
 8004096:	4630      	mov	r0, r6
 8004098:	f7ff fe42 	bl	8003d20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800409c:	4631      	mov	r1, r6
 800409e:	4680      	mov	r8, r0
 80040a0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80040a4:	f7ff fe09 	bl	8003cba <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80040a8:	210f      	movs	r1, #15
 80040aa:	900c      	str	r0, [sp, #48]	; 0x30
 80040ac:	4630      	mov	r0, r6
 80040ae:	f7ff fe65 	bl	8003d7c <_Unwind_GetGR>
 80040b2:	f020 0001 	bic.w	r0, r0, #1
 80040b6:	1e47      	subs	r7, r0, #1
 80040b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040ba:	4598      	cmp	r8, r3
 80040bc:	f4bf af7b 	bcs.w	8003fb6 <__gxx_personality_v0+0x222>
 80040c0:	4642      	mov	r2, r8
 80040c2:	ab06      	add	r3, sp, #24
 80040c4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7ff fe19 	bl	8003d00 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80040ce:	ab07      	add	r3, sp, #28
 80040d0:	4602      	mov	r2, r0
 80040d2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80040d6:	2000      	movs	r0, #0
 80040d8:	f7ff fe12 	bl	8003d00 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80040dc:	ab08      	add	r3, sp, #32
 80040de:	4602      	mov	r2, r0
 80040e0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7ff fe0b 	bl	8003d00 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80040ea:	a909      	add	r1, sp, #36	; 0x24
 80040ec:	f7ff fd78 	bl	8003be0 <_ZL12read_uleb128PKhPm>
 80040f0:	9a06      	ldr	r2, [sp, #24]
 80040f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f4:	4680      	mov	r8, r0
 80040f6:	4413      	add	r3, r2
 80040f8:	429f      	cmp	r7, r3
 80040fa:	f4bf aea1 	bcs.w	8003e40 <__gxx_personality_v0+0xac>
 80040fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004102:	e7d9      	b.n	80040b8 <__gxx_personality_v0+0x324>

08004104 <_ZSt15get_new_handlerv>:
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <_ZSt15get_new_handlerv+0xc>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	f3bf 8f5b 	dmb	ish
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000280 	.word	0x20000280

08004114 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004116:	2310      	movs	r3, #16
 8004118:	2400      	movs	r4, #0
 800411a:	9302      	str	r3, [sp, #8]
 800411c:	6803      	ldr	r3, [r0, #0]
 800411e:	4615      	mov	r5, r2
 8004120:	699e      	ldr	r6, [r3, #24]
 8004122:	9400      	str	r4, [sp, #0]
 8004124:	466b      	mov	r3, sp
 8004126:	f88d 4004 	strb.w	r4, [sp, #4]
 800412a:	9403      	str	r4, [sp, #12]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	47b0      	blx	r6
 8004130:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004134:	f003 0306 	and.w	r3, r3, #6
 8004138:	2b06      	cmp	r3, #6
 800413a:	bf09      	itett	eq
 800413c:	2001      	moveq	r0, #1
 800413e:	4620      	movne	r0, r4
 8004140:	9b00      	ldreq	r3, [sp, #0]
 8004142:	602b      	streq	r3, [r5, #0]
 8004144:	b004      	add	sp, #16
 8004146:	bd70      	pop	{r4, r5, r6, pc}

08004148 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004148:	9800      	ldr	r0, [sp, #0]
 800414a:	4290      	cmp	r0, r2
 800414c:	bf0c      	ite	eq
 800414e:	2006      	moveq	r0, #6
 8004150:	2001      	movne	r0, #1
 8004152:	4770      	bx	lr

08004154 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004154:	b510      	push	{r4, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800415a:	6003      	str	r3, [r0, #0]
 800415c:	f000 f84b 	bl	80041f6 <_ZNSt9type_infoD1Ev>
 8004160:	4620      	mov	r0, r4
 8004162:	bd10      	pop	{r4, pc}
 8004164:	0800486c 	.word	0x0800486c

08004168 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4604      	mov	r4, r0
 800416c:	f7ff fff2 	bl	8004154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004170:	4620      	mov	r0, r4
 8004172:	2108      	movs	r1, #8
 8004174:	f000 f98a 	bl	800448c <_ZdlPvj>
 8004178:	4620      	mov	r0, r4
 800417a:	bd10      	pop	{r4, pc}

0800417c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4615      	mov	r5, r2
 8004180:	461c      	mov	r4, r3
 8004182:	f000 f83b 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 8004186:	b120      	cbz	r0, 8004192 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004188:	2308      	movs	r3, #8
 800418a:	60e3      	str	r3, [r4, #12]
 800418c:	2306      	movs	r3, #6
 800418e:	6025      	str	r5, [r4, #0]
 8004190:	7123      	strb	r3, [r4, #4]
 8004192:	bd38      	pop	{r3, r4, r5, pc}

08004194 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	4605      	mov	r5, r0
 800419a:	460c      	mov	r4, r1
 800419c:	4616      	mov	r6, r2
 800419e:	461f      	mov	r7, r3
 80041a0:	f000 f82c 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 80041a4:	b948      	cbnz	r0, 80041ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80041a6:	2f03      	cmp	r7, #3
 80041a8:	d807      	bhi.n	80041ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	4632      	mov	r2, r6
 80041ae:	4629      	mov	r1, r5
 80041b0:	4620      	mov	r0, r4
 80041b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4718      	bx	r3
 80041ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	9e06      	ldr	r6, [sp, #24]
 80041c4:	4698      	mov	r8, r3
 80041c6:	9b08      	ldr	r3, [sp, #32]
 80041c8:	4607      	mov	r7, r0
 80041ca:	429e      	cmp	r6, r3
 80041cc:	4615      	mov	r5, r2
 80041ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80041d0:	d103      	bne.n	80041da <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 80041d2:	9907      	ldr	r1, [sp, #28]
 80041d4:	f000 f812 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 80041d8:	b958      	cbnz	r0, 80041f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 80041da:	4641      	mov	r1, r8
 80041dc:	4638      	mov	r0, r7
 80041de:	f000 f80d 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 80041e2:	b118      	cbz	r0, 80041ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80041e4:	2301      	movs	r3, #1
 80041e6:	6026      	str	r6, [r4, #0]
 80041e8:	7125      	strb	r5, [r4, #4]
 80041ea:	71a3      	strb	r3, [r4, #6]
 80041ec:	2000      	movs	r0, #0
 80041ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f2:	7165      	strb	r5, [r4, #5]
 80041f4:	e7fa      	b.n	80041ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

080041f6 <_ZNSt9type_infoD1Ev>:
 80041f6:	4770      	bx	lr

080041f8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80041f8:	2000      	movs	r0, #0
 80041fa:	4770      	bx	lr

080041fc <_ZNKSt9type_infoeqERKS_>:
 80041fc:	4281      	cmp	r1, r0
 80041fe:	b508      	push	{r3, lr}
 8004200:	d00e      	beq.n	8004220 <_ZNKSt9type_infoeqERKS_+0x24>
 8004202:	6840      	ldr	r0, [r0, #4]
 8004204:	7803      	ldrb	r3, [r0, #0]
 8004206:	2b2a      	cmp	r3, #42	; 0x2a
 8004208:	d00c      	beq.n	8004224 <_ZNKSt9type_infoeqERKS_+0x28>
 800420a:	6849      	ldr	r1, [r1, #4]
 800420c:	780b      	ldrb	r3, [r1, #0]
 800420e:	2b2a      	cmp	r3, #42	; 0x2a
 8004210:	bf08      	it	eq
 8004212:	3101      	addeq	r1, #1
 8004214:	f7fb ff9c 	bl	8000150 <strcmp>
 8004218:	fab0 f080 	clz	r0, r0
 800421c:	0940      	lsrs	r0, r0, #5
 800421e:	bd08      	pop	{r3, pc}
 8004220:	2001      	movs	r0, #1
 8004222:	bd08      	pop	{r3, pc}
 8004224:	2000      	movs	r0, #0
 8004226:	bd08      	pop	{r3, pc}

08004228 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800422e:	6003      	str	r3, [r0, #0]
 8004230:	f7ff ff90 	bl	8004154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004234:	4620      	mov	r0, r4
 8004236:	bd10      	pop	{r4, pc}
 8004238:	08004938 	.word	0x08004938

0800423c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4604      	mov	r4, r0
 8004240:	f7ff fff2 	bl	8004228 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8004244:	4620      	mov	r0, r4
 8004246:	210c      	movs	r1, #12
 8004248:	f000 f920 	bl	800448c <_ZdlPvj>
 800424c:	4620      	mov	r0, r4
 800424e:	bd10      	pop	{r4, pc}

08004250 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	9e06      	ldr	r6, [sp, #24]
 8004256:	4680      	mov	r8, r0
 8004258:	4296      	cmp	r6, r2
 800425a:	460f      	mov	r7, r1
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	d103      	bne.n	800426a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8004262:	4619      	mov	r1, r3
 8004264:	f7ff ffca 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 8004268:	b958      	cbnz	r0, 8004282 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 800426a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800426e:	4622      	mov	r2, r4
 8004270:	6803      	ldr	r3, [r0, #0]
 8004272:	9606      	str	r6, [sp, #24]
 8004274:	6a1e      	ldr	r6, [r3, #32]
 8004276:	4639      	mov	r1, r7
 8004278:	462b      	mov	r3, r5
 800427a:	46b4      	mov	ip, r6
 800427c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	4760      	bx	ip
 8004282:	2006      	movs	r0, #6
 8004284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004288 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8004288:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	460e      	mov	r6, r1
 800428e:	4619      	mov	r1, r3
 8004290:	4683      	mov	fp, r0
 8004292:	4617      	mov	r7, r2
 8004294:	4699      	mov	r9, r3
 8004296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004298:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800429c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80042a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80042a2:	f7ff ffab 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 80042a6:	b190      	cbz	r0, 80042ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80042a8:	2e00      	cmp	r6, #0
 80042aa:	602c      	str	r4, [r5, #0]
 80042ac:	712f      	strb	r7, [r5, #4]
 80042ae:	db09      	blt.n	80042c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80042b0:	4434      	add	r4, r6
 80042b2:	45a0      	cmp	r8, r4
 80042b4:	bf0c      	ite	eq
 80042b6:	2406      	moveq	r4, #6
 80042b8:	2401      	movne	r4, #1
 80042ba:	71ac      	strb	r4, [r5, #6]
 80042bc:	2000      	movs	r0, #0
 80042be:	b001      	add	sp, #4
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c4:	3602      	adds	r6, #2
 80042c6:	d1f9      	bne.n	80042bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80042c8:	2301      	movs	r3, #1
 80042ca:	71ab      	strb	r3, [r5, #6]
 80042cc:	e7f6      	b.n	80042bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80042ce:	4544      	cmp	r4, r8
 80042d0:	d104      	bne.n	80042dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80042d2:	4651      	mov	r1, sl
 80042d4:	4658      	mov	r0, fp
 80042d6:	f7ff ff91 	bl	80041fc <_ZNKSt9type_infoeqERKS_>
 80042da:	b988      	cbnz	r0, 8004300 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80042dc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80042e0:	463a      	mov	r2, r7
 80042e2:	6803      	ldr	r3, [r0, #0]
 80042e4:	950d      	str	r5, [sp, #52]	; 0x34
 80042e6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80042ea:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80042ee:	940a      	str	r4, [sp, #40]	; 0x28
 80042f0:	69dc      	ldr	r4, [r3, #28]
 80042f2:	4631      	mov	r1, r6
 80042f4:	464b      	mov	r3, r9
 80042f6:	46a4      	mov	ip, r4
 80042f8:	b001      	add	sp, #4
 80042fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fe:	4760      	bx	ip
 8004300:	716f      	strb	r7, [r5, #5]
 8004302:	e7db      	b.n	80042bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08004304 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8004304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004308:	4604      	mov	r4, r0
 800430a:	460d      	mov	r5, r1
 800430c:	4616      	mov	r6, r2
 800430e:	461f      	mov	r7, r3
 8004310:	f7ff ff34 	bl	800417c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8004314:	b948      	cbnz	r0, 800432a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8004316:	68a0      	ldr	r0, [r4, #8]
 8004318:	4632      	mov	r2, r6
 800431a:	6803      	ldr	r3, [r0, #0]
 800431c:	4629      	mov	r1, r5
 800431e:	699c      	ldr	r4, [r3, #24]
 8004320:	463b      	mov	r3, r7
 8004322:	46a4      	mov	ip, r4
 8004324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004328:	4760      	bx	ip
 800432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800432e:	7803      	ldrb	r3, [r0, #0]
 8004330:	2b47      	cmp	r3, #71	; 0x47
 8004332:	d117      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004334:	7843      	ldrb	r3, [r0, #1]
 8004336:	2b4e      	cmp	r3, #78	; 0x4e
 8004338:	d114      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800433a:	7883      	ldrb	r3, [r0, #2]
 800433c:	2b55      	cmp	r3, #85	; 0x55
 800433e:	d111      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004340:	78c3      	ldrb	r3, [r0, #3]
 8004342:	2b43      	cmp	r3, #67	; 0x43
 8004344:	d10e      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004346:	7903      	ldrb	r3, [r0, #4]
 8004348:	2b43      	cmp	r3, #67	; 0x43
 800434a:	d10b      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800434c:	7943      	ldrb	r3, [r0, #5]
 800434e:	2b2b      	cmp	r3, #43	; 0x2b
 8004350:	d108      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004352:	7983      	ldrb	r3, [r0, #6]
 8004354:	2b2b      	cmp	r3, #43	; 0x2b
 8004356:	d105      	bne.n	8004364 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004358:	79c0      	ldrb	r0, [r0, #7]
 800435a:	2801      	cmp	r0, #1
 800435c:	bf8c      	ite	hi
 800435e:	2000      	movhi	r0, #0
 8004360:	2001      	movls	r0, #1
 8004362:	4770      	bx	lr
 8004364:	2000      	movs	r0, #0
 8004366:	4770      	bx	lr

08004368 <__cxa_call_terminate>:
 8004368:	b510      	push	{r4, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	b148      	cbz	r0, 8004382 <__cxa_call_terminate+0x1a>
 800436e:	f000 f83b 	bl	80043e8 <__cxa_begin_catch>
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff ffdb 	bl	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004378:	b118      	cbz	r0, 8004382 <__cxa_call_terminate+0x1a>
 800437a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800437e:	f000 f85d 	bl	800443c <_ZN10__cxxabiv111__terminateEPFvvE>
 8004382:	f000 f867 	bl	8004454 <_ZSt9terminatev>

08004386 <__cxa_call_unexpected>:
 8004386:	b538      	push	{r3, r4, r5, lr}
 8004388:	4602      	mov	r2, r0
 800438a:	f7ff ffd0 	bl	800432e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800438e:	b140      	cbz	r0, 80043a2 <__cxa_call_unexpected+0x1c>
 8004390:	2500      	movs	r5, #0
 8004392:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004396:	4610      	mov	r0, r2
 8004398:	f000 f826 	bl	80043e8 <__cxa_begin_catch>
 800439c:	b125      	cbz	r5, 80043a8 <__cxa_call_unexpected+0x22>
 800439e:	f000 f86b 	bl	8004478 <_ZSt10unexpectedv>
 80043a2:	4604      	mov	r4, r0
 80043a4:	2501      	movs	r5, #1
 80043a6:	e7f6      	b.n	8004396 <__cxa_call_unexpected+0x10>
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 f858 	bl	800445e <_ZN10__cxxabiv112__unexpectedEPFvvE>

080043ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80043ae:	7803      	ldrb	r3, [r0, #0]
 80043b0:	2b47      	cmp	r3, #71	; 0x47
 80043b2:	d117      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043b4:	7843      	ldrb	r3, [r0, #1]
 80043b6:	2b4e      	cmp	r3, #78	; 0x4e
 80043b8:	d114      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043ba:	7883      	ldrb	r3, [r0, #2]
 80043bc:	2b55      	cmp	r3, #85	; 0x55
 80043be:	d111      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043c0:	78c3      	ldrb	r3, [r0, #3]
 80043c2:	2b43      	cmp	r3, #67	; 0x43
 80043c4:	d10e      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043c6:	7903      	ldrb	r3, [r0, #4]
 80043c8:	2b43      	cmp	r3, #67	; 0x43
 80043ca:	d10b      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043cc:	7943      	ldrb	r3, [r0, #5]
 80043ce:	2b2b      	cmp	r3, #43	; 0x2b
 80043d0:	d108      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043d2:	7983      	ldrb	r3, [r0, #6]
 80043d4:	2b2b      	cmp	r3, #43	; 0x2b
 80043d6:	d105      	bne.n	80043e4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043d8:	79c0      	ldrb	r0, [r0, #7]
 80043da:	2801      	cmp	r0, #1
 80043dc:	bf8c      	ite	hi
 80043de:	2000      	movhi	r0, #0
 80043e0:	2001      	movls	r0, #1
 80043e2:	4770      	bx	lr
 80043e4:	2000      	movs	r0, #0
 80043e6:	4770      	bx	lr

080043e8 <__cxa_begin_catch>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	f000 f84a 	bl	8004484 <__cxa_get_globals>
 80043f0:	4601      	mov	r1, r0
 80043f2:	6802      	ldr	r2, [r0, #0]
 80043f4:	4628      	mov	r0, r5
 80043f6:	f1a5 0420 	sub.w	r4, r5, #32
 80043fa:	f7ff ffd8 	bl	80043ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80043fe:	b930      	cbnz	r0, 800440e <__cxa_begin_catch+0x26>
 8004400:	b10a      	cbz	r2, 8004406 <__cxa_begin_catch+0x1e>
 8004402:	f000 f827 	bl	8004454 <_ZSt9terminatev>
 8004406:	600c      	str	r4, [r1, #0]
 8004408:	4614      	mov	r4, r2
 800440a:	4620      	mov	r0, r4
 800440c:	bd38      	pop	{r3, r4, r5, pc}
 800440e:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8004412:	4628      	mov	r0, r5
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfb4      	ite	lt
 8004418:	f1c3 0301 	rsblt	r3, r3, #1
 800441c:	3301      	addge	r3, #1
 800441e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004422:	684b      	ldr	r3, [r1, #4]
 8004424:	42a2      	cmp	r2, r4
 8004426:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	bf1c      	itt	ne
 800442e:	f845 2c10 	strne.w	r2, [r5, #-16]
 8004432:	600c      	strne	r4, [r1, #0]
 8004434:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004436:	f7fc fc49 	bl	8000ccc <_Unwind_Complete>
 800443a:	e7e6      	b.n	800440a <__cxa_begin_catch+0x22>

0800443c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800443c:	b508      	push	{r3, lr}
 800443e:	4780      	blx	r0
 8004440:	f000 f826 	bl	8004490 <abort>

08004444 <_ZSt13get_terminatev>:
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <_ZSt13get_terminatev+0xc>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	f3bf 8f5b 	dmb	ish
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	2000000c 	.word	0x2000000c

08004454 <_ZSt9terminatev>:
 8004454:	b508      	push	{r3, lr}
 8004456:	f7ff fff5 	bl	8004444 <_ZSt13get_terminatev>
 800445a:	f7ff ffef 	bl	800443c <_ZN10__cxxabiv111__terminateEPFvvE>

0800445e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800445e:	b508      	push	{r3, lr}
 8004460:	4780      	blx	r0
 8004462:	f7ff fff7 	bl	8004454 <_ZSt9terminatev>
	...

08004468 <_ZSt14get_unexpectedv>:
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <_ZSt14get_unexpectedv+0xc>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	f3bf 8f5b 	dmb	ish
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000010 	.word	0x20000010

08004478 <_ZSt10unexpectedv>:
 8004478:	b508      	push	{r3, lr}
 800447a:	f7ff fff5 	bl	8004468 <_ZSt14get_unexpectedv>
 800447e:	f7ff ffee 	bl	800445e <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08004484 <__cxa_get_globals>:
 8004484:	4800      	ldr	r0, [pc, #0]	; (8004488 <__cxa_get_globals+0x4>)
 8004486:	4770      	bx	lr
 8004488:	20000284 	.word	0x20000284

0800448c <_ZdlPvj>:
 800448c:	f7ff badd 	b.w	8003a4a <_ZdlPv>

08004490 <abort>:
 8004490:	b508      	push	{r3, lr}
 8004492:	2006      	movs	r0, #6
 8004494:	f000 f91a 	bl	80046cc <raise>
 8004498:	2001      	movs	r0, #1
 800449a:	f000 f95f 	bl	800475c <_exit>
	...

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	2500      	movs	r5, #0
 80044a4:	4e0c      	ldr	r6, [pc, #48]	; (80044d8 <__libc_init_array+0x38>)
 80044a6:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a8:	1ba4      	subs	r4, r4, r6
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	42a5      	cmp	r5, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	f000 f956 	bl	8004760 <_init>
 80044b4:	2500      	movs	r5, #0
 80044b6:	4e0a      	ldr	r6, [pc, #40]	; (80044e0 <__libc_init_array+0x40>)
 80044b8:	4c0a      	ldr	r4, [pc, #40]	; (80044e4 <__libc_init_array+0x44>)
 80044ba:	1ba4      	subs	r4, r4, r6
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	42a5      	cmp	r5, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c8:	4798      	blx	r3
 80044ca:	3501      	adds	r5, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d2:	4798      	blx	r3
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08004b88 	.word	0x08004b88
 80044dc:	08004b88 	.word	0x08004b88
 80044e0:	08004b88 	.word	0x08004b88
 80044e4:	08004b8c 	.word	0x08004b8c

080044e8 <malloc>:
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <malloc+0xc>)
 80044ea:	4601      	mov	r1, r0
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f000 b857 	b.w	80045a0 <_malloc_r>
 80044f2:	bf00      	nop
 80044f4:	20000014 	.word	0x20000014

080044f8 <free>:
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <free+0xc>)
 80044fa:	4601      	mov	r1, r0
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	f000 b803 	b.w	8004508 <_free_r>
 8004502:	bf00      	nop
 8004504:	20000014 	.word	0x20000014

08004508 <_free_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	2900      	cmp	r1, #0
 800450e:	d043      	beq.n	8004598 <_free_r+0x90>
 8004510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004514:	1f0c      	subs	r4, r1, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	18e4      	addlt	r4, r4, r3
 800451c:	f000 f8f2 	bl	8004704 <__malloc_lock>
 8004520:	4a1e      	ldr	r2, [pc, #120]	; (800459c <_free_r+0x94>)
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	4610      	mov	r0, r2
 8004526:	b933      	cbnz	r3, 8004536 <_free_r+0x2e>
 8004528:	6063      	str	r3, [r4, #4]
 800452a:	6014      	str	r4, [r2, #0]
 800452c:	4628      	mov	r0, r5
 800452e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004532:	f000 b8e8 	b.w	8004706 <__malloc_unlock>
 8004536:	42a3      	cmp	r3, r4
 8004538:	d90b      	bls.n	8004552 <_free_r+0x4a>
 800453a:	6821      	ldr	r1, [r4, #0]
 800453c:	1862      	adds	r2, r4, r1
 800453e:	4293      	cmp	r3, r2
 8004540:	bf01      	itttt	eq
 8004542:	681a      	ldreq	r2, [r3, #0]
 8004544:	685b      	ldreq	r3, [r3, #4]
 8004546:	1852      	addeq	r2, r2, r1
 8004548:	6022      	streq	r2, [r4, #0]
 800454a:	6063      	str	r3, [r4, #4]
 800454c:	6004      	str	r4, [r0, #0]
 800454e:	e7ed      	b.n	800452c <_free_r+0x24>
 8004550:	4613      	mov	r3, r2
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	b10a      	cbz	r2, 800455a <_free_r+0x52>
 8004556:	42a2      	cmp	r2, r4
 8004558:	d9fa      	bls.n	8004550 <_free_r+0x48>
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	1858      	adds	r0, r3, r1
 800455e:	42a0      	cmp	r0, r4
 8004560:	d10b      	bne.n	800457a <_free_r+0x72>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	4401      	add	r1, r0
 8004566:	1858      	adds	r0, r3, r1
 8004568:	4282      	cmp	r2, r0
 800456a:	6019      	str	r1, [r3, #0]
 800456c:	d1de      	bne.n	800452c <_free_r+0x24>
 800456e:	6810      	ldr	r0, [r2, #0]
 8004570:	6852      	ldr	r2, [r2, #4]
 8004572:	4401      	add	r1, r0
 8004574:	6019      	str	r1, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	e7d8      	b.n	800452c <_free_r+0x24>
 800457a:	d902      	bls.n	8004582 <_free_r+0x7a>
 800457c:	230c      	movs	r3, #12
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	e7d4      	b.n	800452c <_free_r+0x24>
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1821      	adds	r1, r4, r0
 8004586:	428a      	cmp	r2, r1
 8004588:	bf01      	itttt	eq
 800458a:	6811      	ldreq	r1, [r2, #0]
 800458c:	6852      	ldreq	r2, [r2, #4]
 800458e:	1809      	addeq	r1, r1, r0
 8004590:	6021      	streq	r1, [r4, #0]
 8004592:	6062      	str	r2, [r4, #4]
 8004594:	605c      	str	r4, [r3, #4]
 8004596:	e7c9      	b.n	800452c <_free_r+0x24>
 8004598:	bd38      	pop	{r3, r4, r5, pc}
 800459a:	bf00      	nop
 800459c:	20000290 	.word	0x20000290

080045a0 <_malloc_r>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	1ccd      	adds	r5, r1, #3
 80045a4:	f025 0503 	bic.w	r5, r5, #3
 80045a8:	3508      	adds	r5, #8
 80045aa:	2d0c      	cmp	r5, #12
 80045ac:	bf38      	it	cc
 80045ae:	250c      	movcc	r5, #12
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	4606      	mov	r6, r0
 80045b4:	db01      	blt.n	80045ba <_malloc_r+0x1a>
 80045b6:	42a9      	cmp	r1, r5
 80045b8:	d903      	bls.n	80045c2 <_malloc_r+0x22>
 80045ba:	230c      	movs	r3, #12
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	2000      	movs	r0, #0
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	f000 f89f 	bl	8004704 <__malloc_lock>
 80045c6:	4a23      	ldr	r2, [pc, #140]	; (8004654 <_malloc_r+0xb4>)
 80045c8:	6814      	ldr	r4, [r2, #0]
 80045ca:	4621      	mov	r1, r4
 80045cc:	b991      	cbnz	r1, 80045f4 <_malloc_r+0x54>
 80045ce:	4c22      	ldr	r4, [pc, #136]	; (8004658 <_malloc_r+0xb8>)
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	b91b      	cbnz	r3, 80045dc <_malloc_r+0x3c>
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 f841 	bl	800465c <_sbrk_r>
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	4629      	mov	r1, r5
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 f83c 	bl	800465c <_sbrk_r>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d126      	bne.n	8004636 <_malloc_r+0x96>
 80045e8:	230c      	movs	r3, #12
 80045ea:	4630      	mov	r0, r6
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	f000 f88a 	bl	8004706 <__malloc_unlock>
 80045f2:	e7e4      	b.n	80045be <_malloc_r+0x1e>
 80045f4:	680b      	ldr	r3, [r1, #0]
 80045f6:	1b5b      	subs	r3, r3, r5
 80045f8:	d41a      	bmi.n	8004630 <_malloc_r+0x90>
 80045fa:	2b0b      	cmp	r3, #11
 80045fc:	d90f      	bls.n	800461e <_malloc_r+0x7e>
 80045fe:	600b      	str	r3, [r1, #0]
 8004600:	18cc      	adds	r4, r1, r3
 8004602:	50cd      	str	r5, [r1, r3]
 8004604:	4630      	mov	r0, r6
 8004606:	f000 f87e 	bl	8004706 <__malloc_unlock>
 800460a:	f104 000b 	add.w	r0, r4, #11
 800460e:	1d23      	adds	r3, r4, #4
 8004610:	f020 0007 	bic.w	r0, r0, #7
 8004614:	1ac3      	subs	r3, r0, r3
 8004616:	d01b      	beq.n	8004650 <_malloc_r+0xb0>
 8004618:	425a      	negs	r2, r3
 800461a:	50e2      	str	r2, [r4, r3]
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	428c      	cmp	r4, r1
 8004620:	bf0b      	itete	eq
 8004622:	6863      	ldreq	r3, [r4, #4]
 8004624:	684b      	ldrne	r3, [r1, #4]
 8004626:	6013      	streq	r3, [r2, #0]
 8004628:	6063      	strne	r3, [r4, #4]
 800462a:	bf18      	it	ne
 800462c:	460c      	movne	r4, r1
 800462e:	e7e9      	b.n	8004604 <_malloc_r+0x64>
 8004630:	460c      	mov	r4, r1
 8004632:	6849      	ldr	r1, [r1, #4]
 8004634:	e7ca      	b.n	80045cc <_malloc_r+0x2c>
 8004636:	1cc4      	adds	r4, r0, #3
 8004638:	f024 0403 	bic.w	r4, r4, #3
 800463c:	42a0      	cmp	r0, r4
 800463e:	d005      	beq.n	800464c <_malloc_r+0xac>
 8004640:	1a21      	subs	r1, r4, r0
 8004642:	4630      	mov	r0, r6
 8004644:	f000 f80a 	bl	800465c <_sbrk_r>
 8004648:	3001      	adds	r0, #1
 800464a:	d0cd      	beq.n	80045e8 <_malloc_r+0x48>
 800464c:	6025      	str	r5, [r4, #0]
 800464e:	e7d9      	b.n	8004604 <_malloc_r+0x64>
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	bf00      	nop
 8004654:	20000290 	.word	0x20000290
 8004658:	20000294 	.word	0x20000294

0800465c <_sbrk_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	2300      	movs	r3, #0
 8004660:	4c05      	ldr	r4, [pc, #20]	; (8004678 <_sbrk_r+0x1c>)
 8004662:	4605      	mov	r5, r0
 8004664:	4608      	mov	r0, r1
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	f000 f86a 	bl	8004740 <_sbrk>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_sbrk_r+0x1a>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	b103      	cbz	r3, 8004676 <_sbrk_r+0x1a>
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	200002a0 	.word	0x200002a0

0800467c <_raise_r>:
 800467c:	291f      	cmp	r1, #31
 800467e:	b538      	push	{r3, r4, r5, lr}
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	d904      	bls.n	8004690 <_raise_r+0x14>
 8004686:	2316      	movs	r3, #22
 8004688:	6003      	str	r3, [r0, #0]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004692:	b112      	cbz	r2, 800469a <_raise_r+0x1e>
 8004694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004698:	b94b      	cbnz	r3, 80046ae <_raise_r+0x32>
 800469a:	4620      	mov	r0, r4
 800469c:	f000 f830 	bl	8004700 <_getpid_r>
 80046a0:	462a      	mov	r2, r5
 80046a2:	4601      	mov	r1, r0
 80046a4:	4620      	mov	r0, r4
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f000 b817 	b.w	80046dc <_kill_r>
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00a      	beq.n	80046c8 <_raise_r+0x4c>
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	d103      	bne.n	80046be <_raise_r+0x42>
 80046b6:	2316      	movs	r3, #22
 80046b8:	6003      	str	r3, [r0, #0]
 80046ba:	2001      	movs	r0, #1
 80046bc:	bd38      	pop	{r3, r4, r5, pc}
 80046be:	2400      	movs	r4, #0
 80046c0:	4628      	mov	r0, r5
 80046c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80046c6:	4798      	blx	r3
 80046c8:	2000      	movs	r0, #0
 80046ca:	bd38      	pop	{r3, r4, r5, pc}

080046cc <raise>:
 80046cc:	4b02      	ldr	r3, [pc, #8]	; (80046d8 <raise+0xc>)
 80046ce:	4601      	mov	r1, r0
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f7ff bfd3 	b.w	800467c <_raise_r>
 80046d6:	bf00      	nop
 80046d8:	20000014 	.word	0x20000014

080046dc <_kill_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	2300      	movs	r3, #0
 80046e0:	4c06      	ldr	r4, [pc, #24]	; (80046fc <_kill_r+0x20>)
 80046e2:	4605      	mov	r5, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	f000 f821 	bl	8004730 <_kill>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d102      	bne.n	80046f8 <_kill_r+0x1c>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	b103      	cbz	r3, 80046f8 <_kill_r+0x1c>
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
 80046fa:	bf00      	nop
 80046fc:	200002a0 	.word	0x200002a0

08004700 <_getpid_r>:
 8004700:	f000 b80e 	b.w	8004720 <_getpid>

08004704 <__malloc_lock>:
 8004704:	4770      	bx	lr

08004706 <__malloc_unlock>:
 8004706:	4770      	bx	lr

08004708 <memcpy>:
 8004708:	b510      	push	{r4, lr}
 800470a:	1e43      	subs	r3, r0, #1
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	bd10      	pop	{r4, pc}
 8004714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471c:	e7f7      	b.n	800470e <memcpy+0x6>
	...

08004720 <_getpid>:
 8004720:	2258      	movs	r2, #88	; 0x58
 8004722:	4b02      	ldr	r3, [pc, #8]	; (800472c <_getpid+0xc>)
 8004724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	4770      	bx	lr
 800472c:	200002a0 	.word	0x200002a0

08004730 <_kill>:
 8004730:	2258      	movs	r2, #88	; 0x58
 8004732:	4b02      	ldr	r3, [pc, #8]	; (800473c <_kill+0xc>)
 8004734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	4770      	bx	lr
 800473c:	200002a0 	.word	0x200002a0

08004740 <_sbrk>:
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <_sbrk+0x14>)
 8004742:	4602      	mov	r2, r0
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	b909      	cbnz	r1, 800474c <_sbrk+0xc>
 8004748:	4903      	ldr	r1, [pc, #12]	; (8004758 <_sbrk+0x18>)
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	4402      	add	r2, r0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	4770      	bx	lr
 8004754:	20000298 	.word	0x20000298
 8004758:	200002a4 	.word	0x200002a4

0800475c <_exit>:
 800475c:	e7fe      	b.n	800475c <_exit>
	...

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
